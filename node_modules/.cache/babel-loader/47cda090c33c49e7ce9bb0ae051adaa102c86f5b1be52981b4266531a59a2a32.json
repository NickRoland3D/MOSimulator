{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MO180SalesSimulator/src/components/Charts/ProfitVolumeChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume with grid layout\n * Updated to match the reference screenshot\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfitVolumeChart = ({\n  salesPricePerUnit,\n  costPerUnit,\n  currentVolume\n}) => {\n  _s();\n  const theme = useTheme();\n  const canvasRef = useRef(null);\n\n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n\n  // Format currency with thousands separators and K/M suffixes\n  const formatCurrency = (amount, short = false) => {\n    if (short) {\n      if (amount >= 1000000) {\n        return `${(amount / 1000000).toFixed(1)}M JPY`;\n      } else if (amount >= 1000) {\n        return `${(amount / 1000).toFixed(1)}K JPY`;\n      }\n      return `${Math.round(amount)} JPY`;\n    }\n    return `${Math.round(amount).toLocaleString()} JPY`;\n  };\n\n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = {\n      left: 80,\n      right: 20,\n      top: 40,\n      bottom: 60\n    };\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Chart area dimensions\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n\n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n\n    // Y-axis: Monthly Profit (0 to max value based on volume and profit per unit)\n    const maxProfit = maxVolume * profitPerUnit;\n\n    // Function to convert data points to canvas coordinates\n    const toCanvasX = volume => padding.left + volume / maxVolume * chartWidth;\n    const toCanvasY = profit => height - padding.bottom - profit / maxProfit * chartHeight;\n\n    // Draw the light green background\n    ctx.fillStyle = '#f2f7f2'; // Light green background like in reference\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw grid\n    ctx.beginPath();\n    ctx.strokeStyle = '#dcdcdc'; // Light gray grid lines\n    ctx.lineWidth = 1;\n\n    // Draw vertical grid lines every 100 units\n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n\n    // Calculate appropriate step size for Y-axis based on maxProfit\n    let yStep;\n    let yLabelMultiplier = 1;\n    let yLabelSuffix = '';\n    if (maxProfit > 2000000) {\n      yStep = 500000;\n      yLabelMultiplier = 1 / 1000000;\n      yLabelSuffix = 'M JPY';\n    } else if (maxProfit > 500000) {\n      yStep = 250000;\n      yLabelMultiplier = 1 / 1000000;\n      yLabelSuffix = 'M JPY';\n    } else {\n      yStep = 100000;\n      yLabelMultiplier = 1 / 1000;\n      yLabelSuffix = 'K JPY';\n    }\n\n    // Draw horizontal grid lines\n    for (let i = 0; i <= maxProfit; i += yStep) {\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa'; // Darker gray for axes\n    ctx.lineWidth = 1;\n\n    // X-axis\n    ctx.moveTo(padding.left, height - padding.bottom);\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n\n    // Y-axis\n    ctx.moveTo(padding.left, padding.top);\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n\n    // Draw Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#666666';\n    ctx.font = '11px sans-serif';\n    for (let i = 0; i <= maxProfit; i += yStep) {\n      const y = toCanvasY(i);\n      const label = `${(i * yLabelMultiplier).toFixed(1)}${yLabelSuffix}`;\n\n      // Draw tick mark\n      ctx.beginPath();\n      ctx.moveTo(padding.left - 5, y);\n      ctx.lineTo(padding.left, y);\n      ctx.stroke();\n\n      // Draw label\n      ctx.fillText(label, padding.left - 10, y);\n    }\n\n    // Draw X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      // Draw tick mark\n      ctx.beginPath();\n      ctx.moveTo(x, height - padding.bottom);\n      ctx.lineTo(x, height - padding.bottom + 5);\n      ctx.stroke();\n\n      // Draw label\n      ctx.fillText(i.toString(), x, height - padding.bottom + 10);\n    }\n\n    // Axis titles\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#444444';\n\n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 15);\n\n    // Y-axis title\n    ctx.save();\n    ctx.translate(25, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n\n    // Draw the profit line from origin to maxVolume\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.cmyk.yellow; // Yellow line\n    ctx.lineWidth = 2;\n\n    // Start point at origin (0,0)\n    ctx.moveTo(toCanvasX(0), toCanvasY(0));\n\n    // Create data points every 100 units\n    for (let volume = 100; volume <= 1000; volume += 100) {\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n\n    // Stroke the line\n    ctx.stroke();\n\n    // Mark current volume point\n    if (currentVolume) {\n      const pointX = toCanvasX(currentVolume);\n      const pointY = toCanvasY(currentVolume * profitPerUnit);\n\n      // Calculate tooltip position (placing it above the point)\n      const tooltipX = pointX;\n      const tooltipY = pointY - 40; // Position above the point\n\n      // Draw vertical line to the current point\n      ctx.beginPath();\n      ctx.strokeStyle = '#999999';\n      ctx.setLineDash([4, 4]);\n      ctx.lineWidth = 1;\n      ctx.moveTo(pointX, height - padding.bottom);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n\n      // Reset dash\n      ctx.setLineDash([]);\n\n      // Draw the point\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = '#666666';\n      ctx.fill();\n\n      // Draw tooltip background\n      const tooltipWidth = 180;\n      const tooltipHeight = 40;\n      const tooltipLeft = Math.min(Math.max(tooltipX - tooltipWidth / 2, padding.left), width - padding.right - tooltipWidth); // Ensure stays within chart area\n\n      ctx.fillStyle = 'rgba(80, 80, 80, 0.8)';\n      ctx.fillRect(tooltipLeft, tooltipY - tooltipHeight / 2, tooltipWidth, tooltipHeight);\n\n      // Draw tooltip text\n      const tooltipText = `Volume: ${currentVolume}, Profit: ${formatCurrency(currentVolume * profitPerUnit)}`;\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.fillText(tooltipText, tooltipLeft + tooltipWidth / 2, tooltipY);\n    }\n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Profit vs. Sales Volume\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        width: '100%',\n        height: '220px',\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 600,\n        height: 350,\n        style: {\n          maxWidth: '100%',\n          maxHeight: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2,\n        textAlign: 'center',\n        bgcolor: '#f5f5f5',\n        py: 1,\n        px: 2,\n        borderRadius: 1,\n        width: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        fontWeight: \"600\",\n        color: \"text.primary\",\n        children: [\"Profit per unit: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: theme.palette.primary.main\n          },\n          children: formatCurrency(profitPerUnit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfitVolumeChart, \"kdrREFZ0jLaicLxmNBI1E0NiK+c=\", false, function () {\n  return [useTheme];\n});\n_c = ProfitVolumeChart;\nexport default ProfitVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","Box","Typography","useTheme","jsxDEV","_jsxDEV","ProfitVolumeChart","salesPricePerUnit","costPerUnit","currentVolume","_s","theme","canvasRef","profitPerUnit","formatCurrency","amount","short","toFixed","Math","round","toLocaleString","canvas","current","ctx","getContext","width","height","padding","left","right","top","bottom","clearRect","chartWidth","chartHeight","maxVolume","maxProfit","toCanvasX","volume","toCanvasY","profit","fillStyle","fillRect","beginPath","strokeStyle","lineWidth","i","x","moveTo","lineTo","yStep","yLabelMultiplier","yLabelSuffix","y","stroke","textAlign","textBaseline","font","label","fillText","toString","save","translate","rotate","PI","restore","palette","cmyk","yellow","pointX","pointY","tooltipX","tooltipY","setLineDash","arc","fill","tooltipWidth","tooltipHeight","tooltipLeft","min","max","tooltipText","sx","display","flexDirection","alignItems","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","position","justifyContent","ref","style","maxWidth","maxHeight","mt","bgcolor","py","px","borderRadius","fontWeight","color","primary","main","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MO180SalesSimulator/src/components/Charts/ProfitVolumeChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume with grid layout\n * Updated to match the reference screenshot\n */\nconst ProfitVolumeChart = ({ salesPricePerUnit, costPerUnit, currentVolume }) => {\n  const theme = useTheme();\n  const canvasRef = useRef(null);\n  \n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  \n  // Format currency with thousands separators and K/M suffixes\n  const formatCurrency = (amount, short = false) => {\n    if (short) {\n      if (amount >= 1000000) {\n        return `${(amount / 1000000).toFixed(1)}M JPY`;\n      } else if (amount >= 1000) {\n        return `${(amount / 1000).toFixed(1)}K JPY`;\n      }\n      return `${Math.round(amount)} JPY`;\n    }\n    return `${Math.round(amount).toLocaleString()} JPY`;\n  };\n  \n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    \n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = { left: 80, right: 20, top: 40, bottom: 60 };\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Chart area dimensions\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n    \n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n    \n    // Y-axis: Monthly Profit (0 to max value based on volume and profit per unit)\n    const maxProfit = maxVolume * profitPerUnit;\n    \n    // Function to convert data points to canvas coordinates\n    const toCanvasX = (volume) => padding.left + (volume / maxVolume) * chartWidth;\n    const toCanvasY = (profit) => height - padding.bottom - (profit / maxProfit) * chartHeight;\n    \n    // Draw the light green background\n    ctx.fillStyle = '#f2f7f2'; // Light green background like in reference\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw grid\n    ctx.beginPath();\n    ctx.strokeStyle = '#dcdcdc'; // Light gray grid lines\n    ctx.lineWidth = 1;\n    \n    // Draw vertical grid lines every 100 units\n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n    \n    // Calculate appropriate step size for Y-axis based on maxProfit\n    let yStep;\n    let yLabelMultiplier = 1;\n    let yLabelSuffix = '';\n    \n    if (maxProfit > 2000000) {\n      yStep = 500000;\n      yLabelMultiplier = 1/1000000;\n      yLabelSuffix = 'M JPY';\n    } else if (maxProfit > 500000) {\n      yStep = 250000;\n      yLabelMultiplier = 1/1000000;\n      yLabelSuffix = 'M JPY';\n    } else {\n      yStep = 100000;\n      yLabelMultiplier = 1/1000;\n      yLabelSuffix = 'K JPY';\n    }\n    \n    // Draw horizontal grid lines\n    for (let i = 0; i <= maxProfit; i += yStep) {\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n    \n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa'; // Darker gray for axes\n    ctx.lineWidth = 1;\n    \n    // X-axis\n    ctx.moveTo(padding.left, height - padding.bottom);\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    \n    // Y-axis\n    ctx.moveTo(padding.left, padding.top);\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n    \n    // Draw Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#666666';\n    ctx.font = '11px sans-serif';\n    \n    for (let i = 0; i <= maxProfit; i += yStep) {\n      const y = toCanvasY(i);\n      const label = `${(i * yLabelMultiplier).toFixed(1)}${yLabelSuffix}`;\n      \n      // Draw tick mark\n      ctx.beginPath();\n      ctx.moveTo(padding.left - 5, y);\n      ctx.lineTo(padding.left, y);\n      ctx.stroke();\n      \n      // Draw label\n      ctx.fillText(label, padding.left - 10, y);\n    }\n    \n    // Draw X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    \n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      // Draw tick mark\n      ctx.beginPath();\n      ctx.moveTo(x, height - padding.bottom);\n      ctx.lineTo(x, height - padding.bottom + 5);\n      ctx.stroke();\n      \n      // Draw label\n      ctx.fillText(i.toString(), x, height - padding.bottom + 10);\n    }\n    \n    // Axis titles\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#444444';\n    \n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 15);\n    \n    // Y-axis title\n    ctx.save();\n    ctx.translate(25, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n    \n    // Draw the profit line from origin to maxVolume\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.cmyk.yellow; // Yellow line\n    ctx.lineWidth = 2;\n    \n    // Start point at origin (0,0)\n    ctx.moveTo(toCanvasX(0), toCanvasY(0));\n    \n    // Create data points every 100 units\n    for (let volume = 100; volume <= 1000; volume += 100) {\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n    \n    // Stroke the line\n    ctx.stroke();\n    \n    // Mark current volume point\n    if (currentVolume) {\n      const pointX = toCanvasX(currentVolume);\n      const pointY = toCanvasY(currentVolume * profitPerUnit);\n      \n      // Calculate tooltip position (placing it above the point)\n      const tooltipX = pointX;\n      const tooltipY = pointY - 40; // Position above the point\n      \n      // Draw vertical line to the current point\n      ctx.beginPath();\n      ctx.strokeStyle = '#999999';\n      ctx.setLineDash([4, 4]);\n      ctx.lineWidth = 1;\n      ctx.moveTo(pointX, height - padding.bottom);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      \n      // Reset dash\n      ctx.setLineDash([]);\n      \n      // Draw the point\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = '#666666';\n      ctx.fill();\n      \n      // Draw tooltip background\n      const tooltipWidth = 180;\n      const tooltipHeight = 40;\n      const tooltipLeft = Math.min(Math.max(tooltipX - tooltipWidth / 2, padding.left), width - padding.right - tooltipWidth); // Ensure stays within chart area\n      \n      ctx.fillStyle = 'rgba(80, 80, 80, 0.8)';\n      ctx.fillRect(tooltipLeft, tooltipY - tooltipHeight / 2, tooltipWidth, tooltipHeight);\n      \n      // Draw tooltip text\n      const tooltipText = `Volume: ${currentVolume}, Profit: ${formatCurrency(currentVolume * profitPerUnit)}`;\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.fillText(tooltipText, tooltipLeft + tooltipWidth / 2, tooltipY);\n    }\n    \n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme]);\n  \n  return (\n    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\n        Profit vs. Sales Volume\n      </Typography>\n      \n      {/* Canvas for line chart */}\n      <Box sx={{ position: 'relative', width: '100%', height: '220px', display: 'flex', justifyContent: 'center' }}>\n        <canvas ref={canvasRef} width={600} height={350} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n      </Box>\n      \n      {/* Current profit info */}\n      <Box sx={{ mt: 2, textAlign: 'center', bgcolor: '#f5f5f5', py: 1, px: 2, borderRadius: 1, width: 'auto' }}>\n        <Typography variant=\"body1\" fontWeight=\"600\" color=\"text.primary\">\n          Profit per unit: <span style={{ color: theme.palette.primary.main }}>{formatCurrency(profitPerUnit)}</span>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfitVolumeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}