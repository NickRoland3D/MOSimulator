{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/components/Charts/ProfitVolumeChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { useLanguage } from '../../context/LanguageContext';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume with grid layout\n * Updated to match the reference screenshot with enhanced readability\n * and improved Y-axis formatting\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfitVolumeChart = ({\n  salesPricePerUnit,\n  costPerUnit,\n  currentVolume\n}) => {\n  _s();\n  const theme = useTheme();\n  const {\n    t,\n    language\n  } = useLanguage();\n  const canvasRef = useRef(null);\n\n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n\n  // Format currency with thousands separators and format based on language\n  const formatCurrency = (amount, short = false) => {\n    if (typeof amount !== 'number') return '';\n\n    // Get the current currency symbol\n    const currencySymbol = t('currency');\n    if (short) {\n      if (amount >= 1000000) {\n        // Format millions \n        const value = (amount / 1000000).toFixed(1);\n        return language === 'ja' ? `${value}百万${currencySymbol}` : `${value}M ${currencySymbol}`;\n      } else if (amount >= 1000) {\n        // Format thousands\n        const value = (amount / 1000).toFixed(1);\n        return language === 'ja' ? `${value}万${currencySymbol}` : `${value}K ${currencySymbol}`;\n      }\n      // Format normal numbers based on language\n      return language === 'ja' ? `${Math.round(amount)}${currencySymbol}` : `${Math.round(amount)} ${currencySymbol}`;\n    }\n\n    // Format full numbers based on language\n    return language === 'ja' ? `${Math.round(amount).toLocaleString()}${currencySymbol}` : `${Math.round(amount).toLocaleString()} ${currencySymbol}`;\n  };\n\n  // Helper function to get nice rounded step values for Y-axis\n  const calculateNiceStep = (maxValue, targetSteps = 5) => {\n    // Calculate a raw step size\n    const rawStep = maxValue / targetSteps;\n\n    // Calculate magnitude (power of 10) of the raw step\n    const magnitude = Math.pow(10, Math.floor(Math.log10(rawStep)));\n\n    // Calculate the normalized mantissa (between 1 and 10)\n    const mantissa = rawStep / magnitude;\n\n    // Round to a nice step value (1, 2, 2.5, 5, or 10)\n    let niceStep;\n    if (mantissa < 1.5) {\n      niceStep = 1;\n    } else if (mantissa < 3) {\n      niceStep = 2;\n    } else if (mantissa < 7) {\n      niceStep = 5;\n    } else {\n      niceStep = 10;\n    }\n    return niceStep * magnitude;\n  };\n\n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = {\n      left: 80,\n      right: 20,\n      top: 40,\n      bottom: 60\n    };\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Chart area dimensions\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n\n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n\n    // Y-axis: Monthly Profit dynamically calculated\n    const maxProfit = maxVolume * profitPerUnit;\n\n    // Calculate a nice rounded max value for y-axis that's slightly above the actual max profit\n    // This ensures the line doesn't touch the top of the chart\n    const ceiling = maxProfit * 1.1; // Add 10% padding at the top\n    const niceMax = Math.ceil(ceiling / calculateNiceStep(ceiling)) * calculateNiceStep(ceiling);\n\n    // Function to convert data points to canvas coordinates\n    const toCanvasX = volume => padding.left + volume / maxVolume * chartWidth;\n    const toCanvasY = profit => height - padding.bottom - profit / niceMax * chartHeight;\n\n    // Draw the light green background\n    ctx.fillStyle = '#f2f7f2'; // Light green background like in reference\n    ctx.fillRect(0, 0, width, height);\n\n    // Determine optimal Y-axis formatting\n    let yStep, yFormat, unitSuffix;\n    if (niceMax >= 1000000) {\n      // Use millions formatting\n      yStep = calculateNiceStep(niceMax, 5);\n      yFormat = value => (value / 1000000).toFixed(1);\n      unitSuffix = language === 'ja' ? '百万円' : 'M JPY';\n    } else if (niceMax >= 100000) {\n      // Use hundred thousands formatting\n      yStep = calculateNiceStep(niceMax, 5);\n      yFormat = value => (value / 1000).toFixed(0);\n      unitSuffix = language === 'ja' ? '千円' : 'K JPY';\n    } else {\n      // Use standard formatting\n      yStep = calculateNiceStep(niceMax, 5);\n      yFormat = value => value.toFixed(0);\n      unitSuffix = language === 'ja' ? '円' : 'JPY';\n    }\n\n    // Draw grid\n    ctx.beginPath();\n    ctx.strokeStyle = '#e0e0e0'; // Slightly darker gray for better visibility\n    ctx.lineWidth = 1;\n\n    // Draw vertical grid lines every 100 units\n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n\n    // Draw horizontal grid lines\n    for (let i = 0; i <= niceMax; i += yStep) {\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa'; // Darker gray for axes\n    ctx.lineWidth = 1.5; // Slightly thicker for visibility\n\n    // X-axis\n    ctx.moveTo(padding.left, height - padding.bottom);\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n\n    // Y-axis\n    ctx.moveTo(padding.left, padding.top);\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n\n    // Draw Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#444444'; // Darker for better readability\n    ctx.font = '12px sans-serif'; // Slightly larger for readability\n\n    for (let i = 0; i <= niceMax; i += yStep) {\n      const y = toCanvasY(i);\n\n      // Format the label based on determined formatting\n      const label = `${yFormat(i)} ${unitSuffix}`;\n\n      // Draw tick mark\n      ctx.beginPath();\n      ctx.strokeStyle = '#777777';\n      ctx.lineWidth = 1.5;\n      ctx.moveTo(padding.left - 5, y);\n      ctx.lineTo(padding.left, y);\n      ctx.stroke();\n\n      // Draw label\n      ctx.fillText(label, padding.left - 10, y);\n    }\n\n    // Draw X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    ctx.fillStyle = '#444444';\n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      // Draw tick mark\n      ctx.beginPath();\n      ctx.moveTo(x, height - padding.bottom);\n      ctx.lineTo(x, height - padding.bottom + 5);\n      ctx.stroke();\n\n      // Draw label\n      ctx.fillText(i.toString(), x, height - padding.bottom + 10);\n    }\n\n    // Axis titles - make them stand out more\n    ctx.font = 'bold 13px sans-serif';\n    ctx.fillStyle = '#333333';\n\n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 15);\n\n    // Y-axis title with improved positioning\n    ctx.save();\n    ctx.translate(20, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n\n    // Draw the profit line from origin to maxVolume\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.cmyk.yellow; // Yellow line\n    ctx.lineWidth = 2.5; // Slightly thicker for visibility\n\n    // Start point at origin (0,0)\n    ctx.moveTo(toCanvasX(0), toCanvasY(0));\n\n    // Create data points every 25 units (more points for smoother line)\n    for (let volume = 25; volume <= 1000; volume += 25) {\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n\n    // Stroke the line\n    ctx.stroke();\n\n    // Set up interactive area for hovering\n    // This will be used by mousemove handlers outside this effect\n    canvas.onmousemove = e => {\n      // Get mouse position relative to canvas\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      // Check if mouse is within chart area\n      if (mouseX >= padding.left && mouseX <= width - padding.right && mouseY >= padding.top && mouseY <= height - padding.bottom) {\n        // Convert mouse X position to volume\n        const volume = Math.round((mouseX - padding.left) / chartWidth * maxVolume);\n\n        // Calculate profit for this volume\n        const profit = volume * profitPerUnit;\n\n        // Calculate point position\n        const pointX = toCanvasX(volume);\n        const pointY = toCanvasY(profit);\n\n        // Redraw the chart to clear previous tooltips\n        ctx.clearRect(0, 0, width, height);\n\n        // Redraw background, grid, axes, etc.\n        // ... (duplicate all the drawing code above this point, excluding event handlers)\n\n        // Draw tooltip at hovered point\n        drawTooltip(ctx, pointX, pointY, volume, profit);\n      }\n    };\n\n    // Mark current volume point\n    if (currentVolume) {\n      const pointX = toCanvasX(currentVolume);\n      const pointY = toCanvasY(currentVolume * profitPerUnit);\n      drawTooltip(ctx, pointX, pointY, currentVolume, currentVolume * profitPerUnit);\n    }\n\n    // Helper function to draw tooltip at any point\n    function drawTooltip(ctx, pointX, pointY, volume, profit) {\n      // Draw vertical line to the point\n      ctx.beginPath();\n      ctx.strokeStyle = '#999999';\n      ctx.setLineDash([4, 4]);\n      ctx.lineWidth = 1;\n      ctx.moveTo(pointX, height - padding.bottom);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n\n      // Reset dash\n      ctx.setLineDash([]);\n\n      // Draw the point\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = theme.palette.cmyk.yellow;\n      ctx.fill();\n      ctx.strokeStyle = '#666666';\n      ctx.lineWidth = 1.5;\n      ctx.stroke();\n\n      // Draw tooltip background - now lighter with border\n      const tooltipWidth = 200;\n      const tooltipHeight = 50;\n      const tooltipLeft = Math.min(Math.max(pointX - tooltipWidth / 2, padding.left), width - padding.right - tooltipWidth);\n      const tooltipY = pointY - 40; // Position above the point\n\n      // Draw background with light color\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n      ctx.fillRect(tooltipLeft, tooltipY - tooltipHeight / 2, tooltipWidth, tooltipHeight);\n\n      // Draw border\n      ctx.strokeStyle = 'rgba(150, 150, 150, 0.7)';\n      ctx.lineWidth = 1;\n      ctx.strokeRect(tooltipLeft, tooltipY - tooltipHeight / 2, tooltipWidth, tooltipHeight);\n\n      // Add subtle shadow\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';\n      ctx.shadowBlur = 5;\n      ctx.shadowOffsetX = 2;\n      ctx.shadowOffsetY = 2;\n\n      // Draw tooltip text\n      const profitText = formatCurrency(profit);\n      const profitPerUnitText = formatCurrency(profitPerUnit);\n      ctx.fillStyle = '#333333'; // Dark text for contrast\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.shadowColor = 'transparent'; // Remove shadow for text\n\n      // Volume and profit info on first line\n      ctx.fillText(`Volume: ${volume}, Profit: ${profitText}`, tooltipLeft + tooltipWidth / 2, tooltipY - 8);\n\n      // Profit per unit on second line\n      ctx.fillText(`Profit per unit: ${profitPerUnitText}`, tooltipLeft + tooltipWidth / 2, tooltipY + 12);\n    }\n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme, language, t]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      gutterBottom: true,\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [\"Profit vs. Sales Volume\", /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mt: 0.5\n        },\n        children: [\"Profit per unit: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: theme.palette.primary.main,\n            fontWeight: 'bold'\n          },\n          children: formatCurrency(profitPerUnit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        width: '100%',\n        height: '220px',\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 600,\n        height: 350,\n        style: {\n          maxWidth: '100%',\n          maxHeight: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfitVolumeChart, \"MuRjGjuRIlN+epBYiLF1/Xvb9SM=\", false, function () {\n  return [useTheme, useLanguage];\n});\n_c = ProfitVolumeChart;\nexport default ProfitVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","Box","Typography","useTheme","useLanguage","jsxDEV","_jsxDEV","ProfitVolumeChart","salesPricePerUnit","costPerUnit","currentVolume","_s","theme","t","language","canvasRef","profitPerUnit","formatCurrency","amount","short","currencySymbol","value","toFixed","Math","round","toLocaleString","calculateNiceStep","maxValue","targetSteps","rawStep","magnitude","pow","floor","log10","mantissa","niceStep","canvas","current","ctx","getContext","width","height","padding","left","right","top","bottom","clearRect","chartWidth","chartHeight","maxVolume","maxProfit","ceiling","niceMax","ceil","toCanvasX","volume","toCanvasY","profit","fillStyle","fillRect","yStep","yFormat","unitSuffix","beginPath","strokeStyle","lineWidth","i","x","moveTo","lineTo","y","stroke","textAlign","textBaseline","font","label","fillText","toString","save","translate","rotate","PI","restore","palette","cmyk","yellow","onmousemove","e","rect","getBoundingClientRect","mouseX","clientX","mouseY","clientY","pointX","pointY","drawTooltip","setLineDash","arc","fill","tooltipWidth","tooltipHeight","tooltipLeft","min","max","tooltipY","strokeRect","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","profitText","profitPerUnitText","sx","display","flexDirection","alignItems","children","variant","align","gutterBottom","color","mt","style","primary","main","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","position","justifyContent","ref","maxWidth","maxHeight","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/components/Charts/ProfitVolumeChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { useLanguage } from '../../context/LanguageContext';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume with grid layout\n * Updated to match the reference screenshot with enhanced readability\n * and improved Y-axis formatting\n */\nconst ProfitVolumeChart = ({ salesPricePerUnit, costPerUnit, currentVolume }) => {\n  const theme = useTheme();\n  const { t, language } = useLanguage();\n  const canvasRef = useRef(null);\n  \n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  \n  // Format currency with thousands separators and format based on language\n  const formatCurrency = (amount, short = false) => {\n    if (typeof amount !== 'number') return '';\n    \n    // Get the current currency symbol\n    const currencySymbol = t('currency');\n    \n    if (short) {\n      if (amount >= 1000000) {\n        // Format millions \n        const value = (amount / 1000000).toFixed(1);\n        return language === 'ja' ? \n          `${value}百万${currencySymbol}` : \n          `${value}M ${currencySymbol}`;\n      } else if (amount >= 1000) {\n        // Format thousands\n        const value = (amount / 1000).toFixed(1);\n        return language === 'ja' ? \n          `${value}万${currencySymbol}` : \n          `${value}K ${currencySymbol}`;\n      }\n      // Format normal numbers based on language\n      return language === 'ja' ? \n        `${Math.round(amount)}${currencySymbol}` : \n        `${Math.round(amount)} ${currencySymbol}`;\n    }\n    \n    // Format full numbers based on language\n    return language === 'ja' ? \n      `${Math.round(amount).toLocaleString()}${currencySymbol}` : \n      `${Math.round(amount).toLocaleString()} ${currencySymbol}`;\n  };\n  \n  // Helper function to get nice rounded step values for Y-axis\n  const calculateNiceStep = (maxValue, targetSteps = 5) => {\n    // Calculate a raw step size\n    const rawStep = maxValue / targetSteps;\n    \n    // Calculate magnitude (power of 10) of the raw step\n    const magnitude = Math.pow(10, Math.floor(Math.log10(rawStep)));\n    \n    // Calculate the normalized mantissa (between 1 and 10)\n    const mantissa = rawStep / magnitude;\n    \n    // Round to a nice step value (1, 2, 2.5, 5, or 10)\n    let niceStep;\n    if (mantissa < 1.5) {\n      niceStep = 1;\n    } else if (mantissa < 3) {\n      niceStep = 2;\n    } else if (mantissa < 7) {\n      niceStep = 5;\n    } else {\n      niceStep = 10;\n    }\n    \n    return niceStep * magnitude;\n  };\n  \n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    \n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = { left: 80, right: 20, top: 40, bottom: 60 };\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Chart area dimensions\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n    \n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n    \n    // Y-axis: Monthly Profit dynamically calculated\n    const maxProfit = maxVolume * profitPerUnit;\n    \n    // Calculate a nice rounded max value for y-axis that's slightly above the actual max profit\n    // This ensures the line doesn't touch the top of the chart\n    const ceiling = maxProfit * 1.1; // Add 10% padding at the top\n    const niceMax = Math.ceil(ceiling / calculateNiceStep(ceiling)) * calculateNiceStep(ceiling);\n    \n    // Function to convert data points to canvas coordinates\n    const toCanvasX = (volume) => padding.left + (volume / maxVolume) * chartWidth;\n    const toCanvasY = (profit) => height - padding.bottom - (profit / niceMax) * chartHeight;\n    \n    // Draw the light green background\n    ctx.fillStyle = '#f2f7f2'; // Light green background like in reference\n    ctx.fillRect(0, 0, width, height);\n    \n    // Determine optimal Y-axis formatting\n    let yStep, yFormat, unitSuffix;\n    \n    if (niceMax >= 1000000) {\n      // Use millions formatting\n      yStep = calculateNiceStep(niceMax, 5);\n      yFormat = value => (value / 1000000).toFixed(1);\n      unitSuffix = language === 'ja' ? '百万円' : 'M JPY';\n    } else if (niceMax >= 100000) {\n      // Use hundred thousands formatting\n      yStep = calculateNiceStep(niceMax, 5);\n      yFormat = value => (value / 1000).toFixed(0);\n      unitSuffix = language === 'ja' ? '千円' : 'K JPY';\n    } else {\n      // Use standard formatting\n      yStep = calculateNiceStep(niceMax, 5);\n      yFormat = value => value.toFixed(0);\n      unitSuffix = language === 'ja' ? '円' : 'JPY';\n    }\n    \n    // Draw grid\n    ctx.beginPath();\n    ctx.strokeStyle = '#e0e0e0'; // Slightly darker gray for better visibility\n    ctx.lineWidth = 1;\n    \n    // Draw vertical grid lines every 100 units\n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n    \n    // Draw horizontal grid lines\n    for (let i = 0; i <= niceMax; i += yStep) {\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n    \n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa'; // Darker gray for axes\n    ctx.lineWidth = 1.5; // Slightly thicker for visibility\n    \n    // X-axis\n    ctx.moveTo(padding.left, height - padding.bottom);\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    \n    // Y-axis\n    ctx.moveTo(padding.left, padding.top);\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n    \n    // Draw Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#444444'; // Darker for better readability\n    ctx.font = '12px sans-serif'; // Slightly larger for readability\n    \n    for (let i = 0; i <= niceMax; i += yStep) {\n      const y = toCanvasY(i);\n      \n      // Format the label based on determined formatting\n      const label = `${yFormat(i)} ${unitSuffix}`;\n      \n      // Draw tick mark\n      ctx.beginPath();\n      ctx.strokeStyle = '#777777';\n      ctx.lineWidth = 1.5;\n      ctx.moveTo(padding.left - 5, y);\n      ctx.lineTo(padding.left, y);\n      ctx.stroke();\n      \n      // Draw label\n      ctx.fillText(label, padding.left - 10, y);\n    }\n    \n    // Draw X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    ctx.fillStyle = '#444444';\n    \n    for (let i = 0; i <= 1000; i += 100) {\n      const x = toCanvasX(i);\n      // Draw tick mark\n      ctx.beginPath();\n      ctx.moveTo(x, height - padding.bottom);\n      ctx.lineTo(x, height - padding.bottom + 5);\n      ctx.stroke();\n      \n      // Draw label\n      ctx.fillText(i.toString(), x, height - padding.bottom + 10);\n    }\n    \n    // Axis titles - make them stand out more\n    ctx.font = 'bold 13px sans-serif';\n    ctx.fillStyle = '#333333';\n    \n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 15);\n    \n    // Y-axis title with improved positioning\n    ctx.save();\n    ctx.translate(20, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n    \n    // Draw the profit line from origin to maxVolume\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.cmyk.yellow; // Yellow line\n    ctx.lineWidth = 2.5; // Slightly thicker for visibility\n    \n    // Start point at origin (0,0)\n    ctx.moveTo(toCanvasX(0), toCanvasY(0));\n    \n    // Create data points every 25 units (more points for smoother line)\n    for (let volume = 25; volume <= 1000; volume += 25) {\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n    \n    // Stroke the line\n    ctx.stroke();\n    \n    // Set up interactive area for hovering\n    // This will be used by mousemove handlers outside this effect\n    canvas.onmousemove = (e) => {\n      // Get mouse position relative to canvas\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      // Check if mouse is within chart area\n      if (mouseX >= padding.left && mouseX <= width - padding.right &&\n          mouseY >= padding.top && mouseY <= height - padding.bottom) {\n        \n        // Convert mouse X position to volume\n        const volume = Math.round(((mouseX - padding.left) / chartWidth) * maxVolume);\n        \n        // Calculate profit for this volume\n        const profit = volume * profitPerUnit;\n        \n        // Calculate point position\n        const pointX = toCanvasX(volume);\n        const pointY = toCanvasY(profit);\n        \n        // Redraw the chart to clear previous tooltips\n        ctx.clearRect(0, 0, width, height);\n        \n        // Redraw background, grid, axes, etc.\n        // ... (duplicate all the drawing code above this point, excluding event handlers)\n        \n        // Draw tooltip at hovered point\n        drawTooltip(ctx, pointX, pointY, volume, profit);\n      }\n    };\n    \n    // Mark current volume point\n    if (currentVolume) {\n      const pointX = toCanvasX(currentVolume);\n      const pointY = toCanvasY(currentVolume * profitPerUnit);\n      \n      drawTooltip(ctx, pointX, pointY, currentVolume, currentVolume * profitPerUnit);\n    }\n    \n    // Helper function to draw tooltip at any point\n    function drawTooltip(ctx, pointX, pointY, volume, profit) {\n      // Draw vertical line to the point\n      ctx.beginPath();\n      ctx.strokeStyle = '#999999';\n      ctx.setLineDash([4, 4]);\n      ctx.lineWidth = 1;\n      ctx.moveTo(pointX, height - padding.bottom);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      \n      // Reset dash\n      ctx.setLineDash([]);\n      \n      // Draw the point\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = theme.palette.cmyk.yellow;\n      ctx.fill();\n      ctx.strokeStyle = '#666666';\n      ctx.lineWidth = 1.5;\n      ctx.stroke();\n      \n      // Draw tooltip background - now lighter with border\n      const tooltipWidth = 200;\n      const tooltipHeight = 50;\n      const tooltipLeft = Math.min(Math.max(pointX - tooltipWidth / 2, padding.left), \n                                  width - padding.right - tooltipWidth);\n      const tooltipY = pointY - 40; // Position above the point\n      \n      // Draw background with light color\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n      ctx.fillRect(tooltipLeft, tooltipY - tooltipHeight / 2, tooltipWidth, tooltipHeight);\n      \n      // Draw border\n      ctx.strokeStyle = 'rgba(150, 150, 150, 0.7)';\n      ctx.lineWidth = 1;\n      ctx.strokeRect(tooltipLeft, tooltipY - tooltipHeight / 2, tooltipWidth, tooltipHeight);\n      \n      // Add subtle shadow\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';\n      ctx.shadowBlur = 5;\n      ctx.shadowOffsetX = 2;\n      ctx.shadowOffsetY = 2;\n      \n      // Draw tooltip text\n      const profitText = formatCurrency(profit);\n      const profitPerUnitText = formatCurrency(profitPerUnit);\n      \n      ctx.fillStyle = '#333333'; // Dark text for contrast\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.shadowColor = 'transparent'; // Remove shadow for text\n      \n      // Volume and profit info on first line\n      ctx.fillText(`Volume: ${volume}, Profit: ${profitText}`, \n                   tooltipLeft + tooltipWidth / 2, \n                   tooltipY - 8);\n      \n      // Profit per unit on second line\n      ctx.fillText(`Profit per unit: ${profitPerUnitText}`, \n                   tooltipLeft + tooltipWidth / 2, \n                   tooltipY + 12);\n    }\n    \n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme, language, t]);\n  \n  return (\n    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <Typography variant=\"h6\" align=\"center\" gutterBottom sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        Profit vs. Sales Volume\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 0.5 }}>\n          Profit per unit: <span style={{ color: theme.palette.primary.main, fontWeight: 'bold' }}>{formatCurrency(profitPerUnit)}</span>\n        </Typography>\n      </Typography>\n      \n      {/* Canvas for line chart */}\n      <Box sx={{ position: 'relative', width: '100%', height: '220px', display: 'flex', justifyContent: 'center' }}>\n        <canvas ref={canvasRef} width={600} height={350} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfitVolumeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}