{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useLanguage } from '../context/LanguageContext';\nimport { calculateResults } from '../services/calculationService';\n\n/**\n * Custom hook for managing simulation state and calculations\n * This hook separates business logic from UI components\n */\nconst useSimulation = initialInputs => {\n  _s();\n  const [inputs, setInputs] = useState(initialInputs);\n  const [results, setResults] = useState(calculateResults(initialInputs));\n  const {\n    t\n  } = useLanguage();\n\n  // Handle input changes\n  const handleInputChange = useCallback((name, value) => {\n    setInputs(prevInputs => {\n      const newInputs = {\n        ...prevInputs,\n        [name]: value\n      };\n      // Recalculate results when inputs change\n      const newResults = calculateResults(newInputs);\n      setResults(newResults);\n      return newInputs;\n    });\n  }, []);\n\n  // Format currency for display\n  const formatCurrency = useCallback((amount, language) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\n\n    // Place the currency symbol after the number for Japanese\n    if (language === 'ja') {\n      return `${Math.round(amount).toLocaleString('ja-JP')}${t('currency')}`;\n    }\n    // Default format for other languages\n    return `${t('currency')} ${Math.round(amount).toLocaleString('en-US')}`;\n  }, [t]);\n\n  // Format percentage for display\n  const formatPercent = useCallback(value => {\n    return `${value.toFixed(2)}%`;\n  }, []);\n\n  // Reset simulation to default values\n  const resetSimulation = useCallback(() => {\n    setInputs(initialInputs);\n    setResults(calculateResults(initialInputs));\n  }, [initialInputs]);\n  return {\n    inputs,\n    results,\n    handleInputChange,\n    formatCurrency,\n    formatPercent,\n    resetSimulation\n  };\n};\n_s(useSimulation, \"iccSBVMkUTyIDSTH+7XXFEY/ghs=\", false, function () {\n  return [useLanguage];\n});\nexport default useSimulation;","map":{"version":3,"names":["useState","useCallback","useLanguage","calculateResults","useSimulation","initialInputs","_s","inputs","setInputs","results","setResults","t","handleInputChange","name","value","prevInputs","newInputs","newResults","formatCurrency","amount","language","isNaN","Math","round","toLocaleString","formatPercent","toFixed","resetSimulation"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/hooks/useSimulation.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useLanguage } from '../context/LanguageContext';\nimport { calculateResults } from '../services/calculationService';\n\n/**\n * Custom hook for managing simulation state and calculations\n * This hook separates business logic from UI components\n */\nconst useSimulation = (initialInputs) => {\n  const [inputs, setInputs] = useState(initialInputs);\n  const [results, setResults] = useState(calculateResults(initialInputs));\n  const { t } = useLanguage();\n\n  // Handle input changes\n  const handleInputChange = useCallback((name, value) => {\n    setInputs(prevInputs => {\n      const newInputs = { ...prevInputs, [name]: value };\n      // Recalculate results when inputs change\n      const newResults = calculateResults(newInputs);\n      setResults(newResults);\n      return newInputs;\n    });\n  }, []);\n\n  // Format currency for display\n  const formatCurrency = useCallback((amount, language) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\n    \n    // Place the currency symbol after the number for Japanese\n    if (language === 'ja') {\n      return `${Math.round(amount).toLocaleString('ja-JP')}${t('currency')}`;\n    }\n    // Default format for other languages\n    return `${t('currency')} ${Math.round(amount).toLocaleString('en-US')}`;\n  }, [t]);\n\n  // Format percentage for display\n  const formatPercent = useCallback((value) => {\n    return `${value.toFixed(2)}%`;\n  }, []);\n\n  // Reset simulation to default values\n  const resetSimulation = useCallback(() => {\n    setInputs(initialInputs);\n    setResults(calculateResults(initialInputs));\n  }, [initialInputs]);\n\n  return {\n    inputs,\n    results,\n    handleInputChange,\n    formatCurrency,\n    formatPercent,\n    resetSimulation\n  };\n};\n\nexport default useSimulation;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,gBAAgB,QAAQ,gCAAgC;;AAEjE;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAIC,aAAa,IAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAACK,aAAa,CAAC;EACnD,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAACG,gBAAgB,CAACE,aAAa,CAAC,CAAC;EACvE,MAAM;IAAEM;EAAE,CAAC,GAAGT,WAAW,CAAC,CAAC;;EAE3B;EACA,MAAMU,iBAAiB,GAAGX,WAAW,CAAC,CAACY,IAAI,EAAEC,KAAK,KAAK;IACrDN,SAAS,CAACO,UAAU,IAAI;MACtB,MAAMC,SAAS,GAAG;QAAE,GAAGD,UAAU;QAAE,CAACF,IAAI,GAAGC;MAAM,CAAC;MAClD;MACA,MAAMG,UAAU,GAAGd,gBAAgB,CAACa,SAAS,CAAC;MAC9CN,UAAU,CAACO,UAAU,CAAC;MACtB,OAAOD,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,cAAc,GAAGjB,WAAW,CAAC,CAACkB,MAAM,EAAEC,QAAQ,KAAK;IACvD,IAAI,OAAOD,MAAM,KAAK,QAAQ,IAAIE,KAAK,CAACF,MAAM,CAAC,EAAE,OAAO,KAAK;;IAE7D;IACA,IAAIC,QAAQ,KAAK,IAAI,EAAE;MACrB,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,CAACK,cAAc,CAAC,OAAO,CAAC,GAAGb,CAAC,CAAC,UAAU,CAAC,EAAE;IACxE;IACA;IACA,OAAO,GAAGA,CAAC,CAAC,UAAU,CAAC,IAAIW,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,CAACK,cAAc,CAAC,OAAO,CAAC,EAAE;EACzE,CAAC,EAAE,CAACb,CAAC,CAAC,CAAC;;EAEP;EACA,MAAMc,aAAa,GAAGxB,WAAW,CAAEa,KAAK,IAAK;IAC3C,OAAO,GAAGA,KAAK,CAACY,OAAO,CAAC,CAAC,CAAC,GAAG;EAC/B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,eAAe,GAAG1B,WAAW,CAAC,MAAM;IACxCO,SAAS,CAACH,aAAa,CAAC;IACxBK,UAAU,CAACP,gBAAgB,CAACE,aAAa,CAAC,CAAC;EAC7C,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,OAAO;IACLE,MAAM;IACNE,OAAO;IACPG,iBAAiB;IACjBM,cAAc;IACdO,aAAa;IACbE;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CA/CIF,aAAa;EAAA,QAGHF,WAAW;AAAA;AA8C3B,eAAeE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}