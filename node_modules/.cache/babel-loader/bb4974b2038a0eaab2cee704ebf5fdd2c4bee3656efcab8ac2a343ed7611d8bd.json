{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/components/Charts/ProfitVolumeChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { Box } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfitVolumeChart = ({\n  salesPricePerUnit,\n  costPerUnit,\n  currentVolume\n}) => {\n  _s();\n  var _theme$palette$cmyk2, _theme$palette$cmyk4;\n  const theme = useTheme();\n  const {\n    t,\n    language\n  } = useLanguage();\n  const canvasRef = useRef(null);\n  const chartInstanceRef = useRef({\n    ctx: null,\n    width: 0,\n    height: 0,\n    // Increased left padding for Y-axis labels to fix overlap issue\n    padding: {\n      left: 100,\n      right: 30,\n      top: 60,\n      bottom: 70\n    },\n    maxVolume: 1000,\n    niceMaxProfit: 0,\n    yStep: 0,\n    profitPerUnit: 0,\n    currentHoverData: null // To store data for the current hover position\n  });\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  chartInstanceRef.current.profitPerUnit = profitPerUnit; // Store for use in draw functions\n\n  const formatCurrency = useCallback((amount, short = false) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\n    const currencySymbol = t('currency');\n    if (short) {\n      if (Math.abs(amount) >= 1000000) {\n        const value = (amount / 1000000).toFixed(1);\n        return language === 'ja' ? `${value}百万${currencySymbol}` : `${value}M ${currencySymbol}`;\n      } else if (Math.abs(amount) >= 1000) {\n        const value = (amount / 1000).toFixed(0); // No decimal for K to avoid clutter\n        return language === 'ja' ? `${value}千${currencySymbol}` : `${value}K ${currencySymbol}`;\n      }\n      return language === 'ja' ? `${Math.round(amount)}${currencySymbol}` : `${Math.round(amount)} ${currencySymbol}`;\n    }\n    return language === 'ja' ? `${Math.round(amount).toLocaleString('ja-JP')}${currencySymbol}` : `${currencySymbol}${Math.round(amount).toLocaleString('en-US')}`;\n  }, [t, language]);\n  const calculateNiceStep = (maxValue, targetSteps = 5) => {\n    if (maxValue <= 0) return 10000; // Default step if no profit or negative\n    const rawStep = maxValue / targetSteps;\n    const magnitude = Math.pow(10, Math.floor(Math.log10(rawStep)));\n    const mantissa = rawStep / magnitude;\n    let niceStep;\n    if (mantissa < 1.5) niceStep = 1;else if (mantissa < 3) niceStep = 2;else if (mantissa < 7) niceStep = 5;else niceStep = 10;\n    return Math.max(1, niceStep * magnitude); // Ensure step is at least 1\n  };\n  const toCanvasX = useCallback(volume => {\n    const chart = chartInstanceRef.current;\n    return chart.padding.left + volume / chart.maxVolume * (chart.width - chart.padding.left - chart.padding.right);\n  }, []);\n  const toCanvasY = useCallback(profit => {\n    const chart = chartInstanceRef.current;\n    // Handle case where niceMaxProfit might be 0 or negative\n    const effectiveMaxProfit = chart.niceMaxProfit <= 0 ? 1 : chart.niceMaxProfit;\n    const chartHeight = chart.height - chart.padding.top - chart.padding.bottom;\n    // Adjust for Y-axis starting at 0 or a negative value\n    const zeroY = chart.niceMinProfit >= 0 ? 0 : chart.niceMinProfit;\n    const totalYRange = effectiveMaxProfit - zeroY;\n    if (totalYRange <= 0) return chart.height - chart.padding.bottom; // Avoid division by zero\n\n    return chart.height - chart.padding.bottom - (profit - zeroY) / totalYRange * chartHeight;\n  }, []);\n\n  // --- Drawing Functions ---\n  const drawBackground = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      width,\n      height\n    } = chart;\n    ctx.fillStyle = '#f7f9f7'; // Very light green/grayish background\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw chart title at the top\n    ctx.font = 'bold 14px sans-serif';\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    const chartTitle = language === 'ja' ? '利益と販売量の関係' : 'Profit vs. Sales Volume';\n    ctx.fillText(chartTitle, width / 2, 20);\n  }, [language]);\n  const drawGridAndAxes = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      width,\n      height,\n      padding,\n      niceMaxProfit,\n      niceMinProfit,\n      yStep,\n      maxVolume\n    } = chart;\n    const chartHeight = height - padding.top - padding.bottom;\n    ctx.beginPath();\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n\n    // Vertical grid lines\n    for (let i = 0; i <= maxVolume; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n\n    // Horizontal grid lines\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n      // Ensure we don't draw too many lines if yStep is very small relative to range\n      if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n        if (i % (yStep * 2) !== 0 && i !== 0) continue; // Skip some lines if too dense\n      }\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa';\n    ctx.lineWidth = 1.5;\n    ctx.moveTo(padding.left, height - padding.bottom); // X-axis\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    ctx.moveTo(padding.left, padding.top); // Y-axis\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY]);\n  const drawLabelsAndTitles = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      width,\n      height,\n      padding,\n      niceMaxProfit,\n      niceMinProfit,\n      yStep,\n      maxVolume\n    } = chart;\n\n    // Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#555555'; // Darker for better readability\n    ctx.font = '11px sans-serif';\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n      if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n        if (i % (yStep * 2) !== 0 && i !== 0) continue;\n      }\n      const y = toCanvasY(i);\n      ctx.fillText(formatCurrency(i, true), padding.left - 10, y);\n    }\n\n    // X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    for (let i = 0; i <= maxVolume; i += maxVolume >= 500 ? 100 : 50) {\n      // Adjust step for smaller maxVolume if needed\n      const x = toCanvasX(i);\n      ctx.fillText(i.toString(), x, height - padding.bottom + 8);\n    }\n\n    // Axis titles\n    ctx.font = 'bold 12px sans-serif';\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'center';\n\n    // X-axis title - Use default text if translation key fails\n    const xAxisTitle = language === 'ja' ? '月間販売量 (個)' : 'Monthly Sales Volume (units)';\n    ctx.fillText(xAxisTitle, padding.left + (width - padding.left - padding.right) / 2, height - padding.bottom + 30);\n\n    // Y-axis title - Use default text if translation key fails\n    const yAxisTitle = language === 'ja' ? '月間利益 (円)' : 'Monthly Profit (JPY)';\n    ctx.save();\n    // Moved position further left to avoid overlap with Y-axis labels\n    // Position at 15 pixels from the left edge of the canvas\n    ctx.translate(15, padding.top + (height - padding.top - padding.bottom) / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText(yAxisTitle, 0, 0);\n    ctx.restore();\n  }, [toCanvasX, toCanvasY, formatCurrency, language]);\n  const drawProfitLine = useCallback(() => {\n    var _theme$palette$cmyk;\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      profitPerUnit,\n      maxVolume\n    } = chart;\n    ctx.beginPath();\n    // Use theme color, ensure theme.palette.cmyk.yellow is defined\n    ctx.strokeStyle = ((_theme$palette$cmyk = theme.palette.cmyk) === null || _theme$palette$cmyk === void 0 ? void 0 : _theme$palette$cmyk.yellow) || '#FFD700';\n    ctx.lineWidth = 2.5;\n    ctx.moveTo(toCanvasX(0), toCanvasY(0)); // Start at 0,0\n    for (let volume = 0; volume <= maxVolume; volume += 10) {\n      // Plot points for the line\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY, (_theme$palette$cmyk2 = theme.palette.cmyk) === null || _theme$palette$cmyk2 === void 0 ? void 0 : _theme$palette$cmyk2.yellow]);\n  const drawTooltipAndPoint = useCallback((volume, profit) => {\n    var _theme$palette$cmyk3;\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      height,\n      padding,\n      profitPerUnit\n    } = chart;\n    if (!ctx) return;\n    const pointX = toCanvasX(volume);\n    const pointY = toCanvasY(profit);\n\n    // Dashed line\n    ctx.beginPath();\n    ctx.strokeStyle = '#888888';\n    ctx.setLineDash([3, 3]);\n    ctx.lineWidth = 1;\n    ctx.moveTo(pointX, height - padding.bottom);\n    ctx.lineTo(pointX, pointY);\n    ctx.moveTo(padding.left, pointY);\n    ctx.lineTo(pointX, pointY);\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Point\n    ctx.beginPath();\n    ctx.arc(pointX, pointY, 5, 0, Math.PI * 2);\n    ctx.fillStyle = ((_theme$palette$cmyk3 = theme.palette.cmyk) === null || _theme$palette$cmyk3 === void 0 ? void 0 : _theme$palette$cmyk3.yellow) || '#FFD700';\n    ctx.fill();\n    ctx.strokeStyle = '#555555';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n\n    // Tooltip\n    const volumeLabel = language === 'ja' ? '販売量' : 'Volume';\n    const profitLabel = language === 'ja' ? '利益' : 'Profit';\n    const tooltipText = `${volumeLabel}: ${volume}, ${profitLabel}: ${formatCurrency(profit)}`;\n    ctx.font = 'bold 11px sans-serif';\n    const textWidth = ctx.measureText(tooltipText).width;\n    const tooltipWidth = Math.max(textWidth) + 20;\n    const tooltipHeight = 30; // For one line of text\n\n    let tooltipX = pointX + 15;\n    let tooltipY = pointY - 15 - tooltipHeight;\n\n    // Adjust tooltip position to stay within canvas\n    if (tooltipX + tooltipWidth > chart.width - chart.padding.right) {\n      tooltipX = pointX - 15 - tooltipWidth;\n    }\n    if (tooltipY < chart.padding.top) {\n      tooltipY = pointY + 15;\n    }\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.strokeStyle = 'rgba(100, 100, 100, 0.7)';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.roundRect(tooltipX, tooltipY, tooltipWidth, tooltipHeight, 5); // Using roundRect\n    ctx.fill();\n    ctx.stroke();\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(tooltipText, tooltipX + 10, tooltipY + tooltipHeight / 2);\n  }, [toCanvasX, toCanvasY, formatCurrency, (_theme$palette$cmyk4 = theme.palette.cmyk) === null || _theme$palette$cmyk4 === void 0 ? void 0 : _theme$palette$cmyk4.yellow, language]);\n\n  // Main drawing effect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || typeof salesPricePerUnit !== 'number' || typeof costPerUnit !== 'number') {\n      // Clear canvas if data is invalid or not present\n      if (canvas) {\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      return;\n    }\n    const chart = chartInstanceRef.current;\n    chart.ctx = canvas.getContext('2d');\n    chart.width = canvas.width;\n    chart.height = canvas.height;\n    chart.profitPerUnit = salesPricePerUnit - costPerUnit;\n\n    // Calculate Y-axis scale\n    const maxPossibleProfit = chart.maxVolume * chart.profitPerUnit;\n    const minPossibleProfit = 0 * chart.profitPerUnit; // Could be negative if profitPerUnit is negative\n\n    if (chart.profitPerUnit > 0) {\n      chart.niceMinProfit = 0;\n      chart.niceMaxProfit = Math.ceil(maxPossibleProfit * 1.1 / calculateNiceStep(maxPossibleProfit * 1.1)) * calculateNiceStep(maxPossibleProfit * 1.1);\n      if (chart.niceMaxProfit <= 0) chart.niceMaxProfit = calculateNiceStep(100000); // Default if profit is tiny\n    } else {\n      // Handles zero or negative profit per unit\n      chart.niceMaxProfit = calculateNiceStep(100000); // A small positive default max\n      chart.niceMinProfit = Math.floor(minPossibleProfit * 1.1 / calculateNiceStep(Math.abs(minPossibleProfit * 1.1))) * calculateNiceStep(Math.abs(minPossibleProfit * 1.1));\n      if (chart.niceMinProfit >= 0 && minPossibleProfit < 0) chart.niceMinProfit = -calculateNiceStep(100000); // Default negative if profit is tiny negative\n      if (chart.profitPerUnit === 0) chart.niceMinProfit = 0;\n    }\n    // Ensure niceMaxProfit is always greater than niceMinProfit\n    if (chart.niceMaxProfit <= chart.niceMinProfit) {\n      chart.niceMaxProfit = chart.niceMinProfit + calculateNiceStep(Math.abs(chart.niceMinProfit) || 100000);\n    }\n    chart.yStep = calculateNiceStep(chart.niceMaxProfit - chart.niceMinProfit, 5);\n    if (chart.yStep === 0) chart.yStep = (chart.niceMaxProfit - chart.niceMinProfit) / 5 || 1;\n\n    // --- Main Draw Function (Static Elements) ---\n    const drawStaticChart = () => {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n      drawBackground();\n      drawGridAndAxes();\n      drawLabelsAndTitles();\n      drawProfitLine();\n    };\n    drawStaticChart(); // Initial draw of static elements\n\n    // Draw the point for currentVolume (if provided) on top of the static chart\n    if (typeof currentVolume === 'number') {\n      const currentProfit = currentVolume * chart.profitPerUnit;\n      // Store it for potential redraw on hover end\n      chart.currentHoverData = {\n        volume: currentVolume,\n        profit: currentProfit,\n        isCurrentVolumePoint: true\n      };\n      drawTooltipAndPoint(currentVolume, currentProfit);\n    } else {\n      chart.currentHoverData = null;\n    }\n\n    // --- Mouse Move Handler for Tooltips (More Efficient) ---\n    const handleMouseMove = e => {\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      const {\n        padding,\n        width,\n        height,\n        maxVolume,\n        profitPerUnit\n      } = chartInstanceRef.current;\n      if (mouseX >= padding.left && mouseX <= width - padding.right && mouseY >= padding.top && mouseY <= height - padding.bottom) {\n        const volume = Math.max(0, Math.min(maxVolume, Math.round((mouseX - padding.left) / (width - padding.left - padding.right) * maxVolume)));\n        const profit = volume * profitPerUnit;\n\n        // Redraw static parts, then the new hover point\n        drawStaticChart();\n        chartInstanceRef.current.currentHoverData = {\n          volume,\n          profit,\n          isCurrentVolumePoint: false\n        };\n        drawTooltipAndPoint(volume, profit);\n      } else {\n        // If mouse moves out, redraw static chart and the original currentVolume point if it exists\n        if (chartInstanceRef.current.currentHoverData && !chartInstanceRef.current.currentHoverData.isCurrentVolumePoint) {\n          drawStaticChart();\n          if (typeof currentVolume === 'number') {\n            const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n            chartInstanceRef.current.currentHoverData = {\n              volume: currentVolume,\n              profit: cvProfit,\n              isCurrentVolumePoint: true\n            };\n            drawTooltipAndPoint(currentVolume, cvProfit);\n          } else {\n            chartInstanceRef.current.currentHoverData = null;\n          }\n        }\n      }\n    };\n    canvas.addEventListener('mousemove', handleMouseMove);\n    // Optional: Add a mouseleave listener to clear the hover tooltip and redraw the currentVolume point\n    const handleMouseLeave = () => {\n      drawStaticChart();\n      if (typeof currentVolume === 'number') {\n        const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n        chartInstanceRef.current.currentHoverData = {\n          volume: currentVolume,\n          profit: cvProfit,\n          isCurrentVolumePoint: true\n        };\n        drawTooltipAndPoint(currentVolume, cvProfit);\n      } else {\n        chartInstanceRef.current.currentHoverData = null;\n      }\n    };\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, [salesPricePerUnit, costPerUnit, currentVolume, theme,\n  // theme.palette.cmyk.yellow is used\n  language, t,\n  // For localization in formatCurrency and titles\n  formatCurrency, calculateNiceStep, toCanvasX, toCanvasY,\n  // Memoized helpers\n  drawBackground, drawGridAndAxes, drawLabelsAndTitles, drawProfitLine, drawTooltipAndPoint // Memoized draw functions\n  ]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      height: 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: '100%',\n        maxWidth: '600px',\n        aspectRatio: '16 / 9',\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 600 /* Base width */,\n        height: 337.5 /* Base height for 16:9 */,\n        style: {\n          display: 'block',\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfitVolumeChart, \"0F0pRmqscZ7rsFJSjuFZY8LGvTE=\", false, function () {\n  return [useTheme, useLanguage];\n});\n_c = ProfitVolumeChart;\nexport default ProfitVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","Box","useTheme","useLanguage","jsxDEV","_jsxDEV","ProfitVolumeChart","salesPricePerUnit","costPerUnit","currentVolume","_s","_theme$palette$cmyk2","_theme$palette$cmyk4","theme","t","language","canvasRef","chartInstanceRef","ctx","width","height","padding","left","right","top","bottom","maxVolume","niceMaxProfit","yStep","profitPerUnit","currentHoverData","current","formatCurrency","amount","short","isNaN","currencySymbol","Math","abs","value","toFixed","round","toLocaleString","calculateNiceStep","maxValue","targetSteps","rawStep","magnitude","pow","floor","log10","mantissa","niceStep","max","toCanvasX","volume","chart","toCanvasY","profit","effectiveMaxProfit","chartHeight","zeroY","niceMinProfit","totalYRange","drawBackground","fillStyle","fillRect","font","textAlign","textBaseline","chartTitle","fillText","drawGridAndAxes","beginPath","strokeStyle","lineWidth","i","x","moveTo","lineTo","y","stroke","drawLabelsAndTitles","toString","xAxisTitle","yAxisTitle","save","translate","rotate","PI","restore","drawProfitLine","_theme$palette$cmyk","palette","cmyk","yellow","drawTooltipAndPoint","_theme$palette$cmyk3","pointX","pointY","setLineDash","arc","fill","volumeLabel","profitLabel","tooltipText","textWidth","measureText","tooltipWidth","tooltipHeight","tooltipX","tooltipY","roundRect","canvas","context","getContext","clearRect","maxPossibleProfit","minPossibleProfit","ceil","drawStaticChart","currentProfit","isCurrentVolumePoint","handleMouseMove","e","rect","getBoundingClientRect","mouseX","clientX","mouseY","clientY","min","cvProfit","addEventListener","handleMouseLeave","removeEventListener","sx","display","flexDirection","alignItems","children","maxWidth","aspectRatio","mb","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/components/Charts/ProfitVolumeChart.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { Box } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { useLanguage } from '../../context/LanguageContext';\n\nconst ProfitVolumeChart = ({ salesPricePerUnit, costPerUnit, currentVolume }) => {\n  const theme = useTheme();\n  const { t, language } = useLanguage();\n  const canvasRef = useRef(null);\n  const chartInstanceRef = useRef({ \n    ctx: null, \n    width: 0, \n    height: 0, \n    // Increased left padding for Y-axis labels to fix overlap issue\n    padding: { left: 100, right: 30, top: 60, bottom: 70 }, \n    maxVolume: 1000,\n    niceMaxProfit: 0,\n    yStep: 0,\n    profitPerUnit: 0,\n    currentHoverData: null // To store data for the current hover position\n  });\n\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  chartInstanceRef.current.profitPerUnit = profitPerUnit; // Store for use in draw functions\n\n  const formatCurrency = useCallback((amount, short = false) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\n    const currencySymbol = t('currency');\n    \n    if (short) {\n      if (Math.abs(amount) >= 1000000) {\n        const value = (amount / 1000000).toFixed(1);\n        return language === 'ja' ? `${value}百万${currencySymbol}` : `${value}M ${currencySymbol}`;\n      } else if (Math.abs(amount) >= 1000) {\n        const value = (amount / 1000).toFixed(0); // No decimal for K to avoid clutter\n        return language === 'ja' ? `${value}千${currencySymbol}` : `${value}K ${currencySymbol}`;\n      }\n      return language === 'ja' ? `${Math.round(amount)}${currencySymbol}` : `${Math.round(amount)} ${currencySymbol}`;\n    }\n    return language === 'ja' ? `${Math.round(amount).toLocaleString('ja-JP')}${currencySymbol}` : `${currencySymbol}${Math.round(amount).toLocaleString('en-US')}`;\n  }, [t, language]);\n\n  const calculateNiceStep = (maxValue, targetSteps = 5) => {\n    if (maxValue <= 0) return 10000; // Default step if no profit or negative\n    const rawStep = maxValue / targetSteps;\n    const magnitude = Math.pow(10, Math.floor(Math.log10(rawStep)));\n    const mantissa = rawStep / magnitude;\n    let niceStep;\n    if (mantissa < 1.5) niceStep = 1;\n    else if (mantissa < 3) niceStep = 2;\n    else if (mantissa < 7) niceStep = 5;\n    else niceStep = 10;\n    return Math.max(1, niceStep * magnitude); // Ensure step is at least 1\n  };\n\n  const toCanvasX = useCallback((volume) => {\n    const chart = chartInstanceRef.current;\n    return chart.padding.left + (volume / chart.maxVolume) * (chart.width - chart.padding.left - chart.padding.right);\n  }, []);\n\n  const toCanvasY = useCallback((profit) => {\n    const chart = chartInstanceRef.current;\n    // Handle case where niceMaxProfit might be 0 or negative\n    const effectiveMaxProfit = chart.niceMaxProfit <= 0 ? 1 : chart.niceMaxProfit;\n    const chartHeight = chart.height - chart.padding.top - chart.padding.bottom;\n    // Adjust for Y-axis starting at 0 or a negative value\n    const zeroY = chart.niceMinProfit >= 0 ? 0 : chart.niceMinProfit;\n    const totalYRange = effectiveMaxProfit - zeroY;\n    if (totalYRange <= 0) return chart.height - chart.padding.bottom; // Avoid division by zero\n\n    return chart.height - chart.padding.bottom - ((profit - zeroY) / totalYRange) * chartHeight;\n  }, []);\n\n\n  // --- Drawing Functions ---\n  const drawBackground = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, width, height } = chart;\n    ctx.fillStyle = '#f7f9f7'; // Very light green/grayish background\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw chart title at the top\n    ctx.font = 'bold 14px sans-serif';\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    const chartTitle = language === 'ja' ? '利益と販売量の関係' : 'Profit vs. Sales Volume';\n    ctx.fillText(chartTitle, width / 2, 20);\n  }, [language]);\n\n  const drawGridAndAxes = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, width, height, padding, niceMaxProfit, niceMinProfit, yStep, maxVolume } = chart;\n    const chartHeight = height - padding.top - padding.bottom;\n\n    ctx.beginPath();\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n\n    // Vertical grid lines\n    for (let i = 0; i <= maxVolume; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n\n    // Horizontal grid lines\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n      // Ensure we don't draw too many lines if yStep is very small relative to range\n      if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n          if (i % (yStep * 2) !== 0 && i !== 0) continue; // Skip some lines if too dense\n      }\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa';\n    ctx.lineWidth = 1.5;\n    ctx.moveTo(padding.left, height - padding.bottom); // X-axis\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    ctx.moveTo(padding.left, padding.top); // Y-axis\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY]);\n\n  const drawLabelsAndTitles = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, width, height, padding, niceMaxProfit, niceMinProfit, yStep, maxVolume } = chart;\n\n    // Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#555555'; // Darker for better readability\n    ctx.font = '11px sans-serif';\n\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n       if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n          if (i % (yStep * 2) !== 0 && i !== 0) continue;\n      }\n      const y = toCanvasY(i);\n      ctx.fillText(formatCurrency(i, true), padding.left - 10, y);\n    }\n\n    // X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    for (let i = 0; i <= maxVolume; i += (maxVolume >= 500 ? 100 : 50)) { // Adjust step for smaller maxVolume if needed\n      const x = toCanvasX(i);\n      ctx.fillText(i.toString(), x, height - padding.bottom + 8);\n    }\n\n    // Axis titles\n    ctx.font = 'bold 12px sans-serif';\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'center';\n    \n    // X-axis title - Use default text if translation key fails\n    const xAxisTitle = language === 'ja' ? '月間販売量 (個)' : 'Monthly Sales Volume (units)';\n    ctx.fillText(xAxisTitle, \n                 padding.left + (width - padding.left - padding.right) / 2, \n                 height - padding.bottom + 30);\n\n    // Y-axis title - Use default text if translation key fails\n    const yAxisTitle = language === 'ja' ? '月間利益 (円)' : 'Monthly Profit (JPY)';\n    ctx.save();\n    // Moved position further left to avoid overlap with Y-axis labels\n    // Position at 15 pixels from the left edge of the canvas\n    ctx.translate(15, padding.top + (height - padding.top - padding.bottom) / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText(yAxisTitle, 0, 0);\n    ctx.restore();\n  }, [toCanvasX, toCanvasY, formatCurrency, language]);\n\n  const drawProfitLine = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, profitPerUnit, maxVolume } = chart;\n\n    ctx.beginPath();\n    // Use theme color, ensure theme.palette.cmyk.yellow is defined\n    ctx.strokeStyle = theme.palette.cmyk?.yellow || '#FFD700'; \n    ctx.lineWidth = 2.5;\n    \n    ctx.moveTo(toCanvasX(0), toCanvasY(0)); // Start at 0,0\n    for (let volume = 0; volume <= maxVolume; volume += 10) { // Plot points for the line\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY, theme.palette.cmyk?.yellow]);\n\n  const drawTooltipAndPoint = useCallback((volume, profit) => {\n    const chart = chartInstanceRef.current;\n    const { ctx, height, padding, profitPerUnit } = chart;\n    if (!ctx) return;\n\n    const pointX = toCanvasX(volume);\n    const pointY = toCanvasY(profit);\n\n    // Dashed line\n    ctx.beginPath();\n    ctx.strokeStyle = '#888888';\n    ctx.setLineDash([3, 3]);\n    ctx.lineWidth = 1;\n    ctx.moveTo(pointX, height - padding.bottom);\n    ctx.lineTo(pointX, pointY);\n    ctx.moveTo(padding.left, pointY);\n    ctx.lineTo(pointX, pointY);\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Point\n    ctx.beginPath();\n    ctx.arc(pointX, pointY, 5, 0, Math.PI * 2);\n    ctx.fillStyle = theme.palette.cmyk?.yellow || '#FFD700';\n    ctx.fill();\n    ctx.strokeStyle = '#555555';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n\n    // Tooltip\n    const volumeLabel = language === 'ja' ? '販売量' : 'Volume';\n    const profitLabel = language === 'ja' ? '利益' : 'Profit';\n    const tooltipText = `${volumeLabel}: ${volume}, ${profitLabel}: ${formatCurrency(profit)}`;\n\n    ctx.font = 'bold 11px sans-serif';\n    const textWidth = ctx.measureText(tooltipText).width;\n    const tooltipWidth = Math.max(textWidth) + 20;\n    const tooltipHeight = 30; // For one line of text\n    \n    let tooltipX = pointX + 15;\n    let tooltipY = pointY - 15 - tooltipHeight;\n\n    // Adjust tooltip position to stay within canvas\n    if (tooltipX + tooltipWidth > chart.width - chart.padding.right) {\n      tooltipX = pointX - 15 - tooltipWidth;\n    }\n    if (tooltipY < chart.padding.top) {\n      tooltipY = pointY + 15;\n    }\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.strokeStyle = 'rgba(100, 100, 100, 0.7)';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.roundRect(tooltipX, tooltipY, tooltipWidth, tooltipHeight, 5); // Using roundRect\n    ctx.fill();\n    ctx.stroke();\n    \n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(tooltipText, tooltipX + 10, tooltipY + tooltipHeight / 2);\n\n  }, [toCanvasX, toCanvasY, formatCurrency, theme.palette.cmyk?.yellow, language]);\n\n\n  // Main drawing effect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || typeof salesPricePerUnit !== 'number' || typeof costPerUnit !== 'number') {\n      // Clear canvas if data is invalid or not present\n      if(canvas) {\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      return;\n    }\n    \n    const chart = chartInstanceRef.current;\n    chart.ctx = canvas.getContext('2d');\n    chart.width = canvas.width;\n    chart.height = canvas.height;\n    chart.profitPerUnit = salesPricePerUnit - costPerUnit;\n\n    // Calculate Y-axis scale\n    const maxPossibleProfit = chart.maxVolume * chart.profitPerUnit;\n    const minPossibleProfit = 0 * chart.profitPerUnit; // Could be negative if profitPerUnit is negative\n\n    if (chart.profitPerUnit > 0) {\n        chart.niceMinProfit = 0;\n        chart.niceMaxProfit = Math.ceil((maxPossibleProfit * 1.1) / calculateNiceStep(maxPossibleProfit * 1.1)) * calculateNiceStep(maxPossibleProfit * 1.1);\n        if (chart.niceMaxProfit <=0) chart.niceMaxProfit = calculateNiceStep(100000); // Default if profit is tiny\n    } else { // Handles zero or negative profit per unit\n        chart.niceMaxProfit = calculateNiceStep(100000); // A small positive default max\n        chart.niceMinProfit = Math.floor((minPossibleProfit * 1.1) / calculateNiceStep(Math.abs(minPossibleProfit * 1.1))) * calculateNiceStep(Math.abs(minPossibleProfit * 1.1));\n        if (chart.niceMinProfit >=0 && minPossibleProfit < 0) chart.niceMinProfit = -calculateNiceStep(100000); // Default negative if profit is tiny negative\n        if (chart.profitPerUnit === 0) chart.niceMinProfit = 0;\n    }\n    // Ensure niceMaxProfit is always greater than niceMinProfit\n    if (chart.niceMaxProfit <= chart.niceMinProfit) {\n        chart.niceMaxProfit = chart.niceMinProfit + calculateNiceStep(Math.abs(chart.niceMinProfit) || 100000);\n    }\n\n    chart.yStep = calculateNiceStep(chart.niceMaxProfit - chart.niceMinProfit, 5);\n    if (chart.yStep === 0) chart.yStep = (chart.niceMaxProfit - chart.niceMinProfit) / 5 || 1;\n\n\n    // --- Main Draw Function (Static Elements) ---\n    const drawStaticChart = () => {\n        chart.ctx.clearRect(0, 0, chart.width, chart.height);\n        drawBackground();\n        drawGridAndAxes();\n        drawLabelsAndTitles();\n        drawProfitLine();\n    };\n\n    drawStaticChart(); // Initial draw of static elements\n\n    // Draw the point for currentVolume (if provided) on top of the static chart\n    if (typeof currentVolume === 'number') {\n        const currentProfit = currentVolume * chart.profitPerUnit;\n        // Store it for potential redraw on hover end\n        chart.currentHoverData = { volume: currentVolume, profit: currentProfit, isCurrentVolumePoint: true };\n        drawTooltipAndPoint(currentVolume, currentProfit);\n    } else {\n        chart.currentHoverData = null;\n    }\n\n    // --- Mouse Move Handler for Tooltips (More Efficient) ---\n    const handleMouseMove = (e) => {\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      const { padding, width, height, maxVolume, profitPerUnit } = chartInstanceRef.current;\n\n      if (mouseX >= padding.left && mouseX <= width - padding.right &&\n          mouseY >= padding.top && mouseY <= height - padding.bottom) {\n        \n        const volume = Math.max(0, Math.min(maxVolume, Math.round(((mouseX - padding.left) / (width - padding.left - padding.right)) * maxVolume)));\n        const profit = volume * profitPerUnit;\n\n        // Redraw static parts, then the new hover point\n        drawStaticChart(); \n        chartInstanceRef.current.currentHoverData = { volume, profit, isCurrentVolumePoint: false };\n        drawTooltipAndPoint(volume, profit);\n\n      } else {\n        // If mouse moves out, redraw static chart and the original currentVolume point if it exists\n        if (chartInstanceRef.current.currentHoverData && !chartInstanceRef.current.currentHoverData.isCurrentVolumePoint) {\n            drawStaticChart();\n            if (typeof currentVolume === 'number') {\n                const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n                chartInstanceRef.current.currentHoverData = { volume: currentVolume, profit: cvProfit, isCurrentVolumePoint: true };\n                drawTooltipAndPoint(currentVolume, cvProfit);\n            } else {\n                chartInstanceRef.current.currentHoverData = null;\n            }\n        }\n      }\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n    // Optional: Add a mouseleave listener to clear the hover tooltip and redraw the currentVolume point\n    const handleMouseLeave = () => {\n        drawStaticChart();\n        if (typeof currentVolume === 'number') {\n            const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n            chartInstanceRef.current.currentHoverData = { volume: currentVolume, profit: cvProfit, isCurrentVolumePoint: true };\n            drawTooltipAndPoint(currentVolume, cvProfit);\n        } else {\n            chartInstanceRef.current.currentHoverData = null;\n        }\n    };\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n\n  }, [\n    salesPricePerUnit, \n    costPerUnit, \n    currentVolume, \n    theme, // theme.palette.cmyk.yellow is used\n    language, t, // For localization in formatCurrency and titles\n    formatCurrency, calculateNiceStep, toCanvasX, toCanvasY, // Memoized helpers\n    drawBackground, drawGridAndAxes, drawLabelsAndTitles, drawProfitLine, drawTooltipAndPoint // Memoized draw functions\n  ]);\n  \n  return (\n    <Box sx={{ width: '100%', height: 'auto', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <Box sx={{ width: '100%', maxWidth: '600px', aspectRatio: '16 / 9', mb: 2 }}> \n        <canvas \n            ref={canvasRef} \n            width={600}  /* Base width */\n            height={337.5} /* Base height for 16:9 */\n            style={{ display: 'block', width: '100%', height: '100%'}} \n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfitVolumeChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAC7D,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,WAAW,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,iBAAiB;EAAEC,WAAW;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,oBAAA,EAAAC,oBAAA;EAC/E,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;EACxB,MAAM;IAAEY,CAAC;IAAEC;EAAS,CAAC,GAAGZ,WAAW,CAAC,CAAC;EACrC,MAAMa,SAAS,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMkB,gBAAgB,GAAGlB,MAAM,CAAC;IAC9BmB,GAAG,EAAE,IAAI;IACTC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE,CAAC;IACT;IACAC,OAAO,EAAE;MAAEC,IAAI,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,GAAG,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC;IACtDC,SAAS,EAAE,IAAI;IACfC,aAAa,EAAE,CAAC;IAChBC,KAAK,EAAE,CAAC;IACRC,aAAa,EAAE,CAAC;IAChBC,gBAAgB,EAAE,IAAI,CAAC;EACzB,CAAC,CAAC;EAEF,MAAMD,aAAa,GAAGtB,iBAAiB,GAAGC,WAAW;EACrDS,gBAAgB,CAACc,OAAO,CAACF,aAAa,GAAGA,aAAa,CAAC,CAAC;;EAExD,MAAMG,cAAc,GAAGhC,WAAW,CAAC,CAACiC,MAAM,EAAEC,KAAK,GAAG,KAAK,KAAK;IAC5D,IAAI,OAAOD,MAAM,KAAK,QAAQ,IAAIE,KAAK,CAACF,MAAM,CAAC,EAAE,OAAO,KAAK;IAC7D,MAAMG,cAAc,GAAGtB,CAAC,CAAC,UAAU,CAAC;IAEpC,IAAIoB,KAAK,EAAE;MACT,IAAIG,IAAI,CAACC,GAAG,CAACL,MAAM,CAAC,IAAI,OAAO,EAAE;QAC/B,MAAMM,KAAK,GAAG,CAACN,MAAM,GAAG,OAAO,EAAEO,OAAO,CAAC,CAAC,CAAC;QAC3C,OAAOzB,QAAQ,KAAK,IAAI,GAAG,GAAGwB,KAAK,KAAKH,cAAc,EAAE,GAAG,GAAGG,KAAK,KAAKH,cAAc,EAAE;MAC1F,CAAC,MAAM,IAAIC,IAAI,CAACC,GAAG,CAACL,MAAM,CAAC,IAAI,IAAI,EAAE;QACnC,MAAMM,KAAK,GAAG,CAACN,MAAM,GAAG,IAAI,EAAEO,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,OAAOzB,QAAQ,KAAK,IAAI,GAAG,GAAGwB,KAAK,IAAIH,cAAc,EAAE,GAAG,GAAGG,KAAK,KAAKH,cAAc,EAAE;MACzF;MACA,OAAOrB,QAAQ,KAAK,IAAI,GAAG,GAAGsB,IAAI,CAACI,KAAK,CAACR,MAAM,CAAC,GAAGG,cAAc,EAAE,GAAG,GAAGC,IAAI,CAACI,KAAK,CAACR,MAAM,CAAC,IAAIG,cAAc,EAAE;IACjH;IACA,OAAOrB,QAAQ,KAAK,IAAI,GAAG,GAAGsB,IAAI,CAACI,KAAK,CAACR,MAAM,CAAC,CAACS,cAAc,CAAC,OAAO,CAAC,GAAGN,cAAc,EAAE,GAAG,GAAGA,cAAc,GAAGC,IAAI,CAACI,KAAK,CAACR,MAAM,CAAC,CAACS,cAAc,CAAC,OAAO,CAAC,EAAE;EAChK,CAAC,EAAE,CAAC5B,CAAC,EAAEC,QAAQ,CAAC,CAAC;EAEjB,MAAM4B,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,GAAG,CAAC,KAAK;IACvD,IAAID,QAAQ,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC;IACjC,MAAME,OAAO,GAAGF,QAAQ,GAAGC,WAAW;IACtC,MAAME,SAAS,GAAGV,IAAI,CAACW,GAAG,CAAC,EAAE,EAAEX,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACa,KAAK,CAACJ,OAAO,CAAC,CAAC,CAAC;IAC/D,MAAMK,QAAQ,GAAGL,OAAO,GAAGC,SAAS;IACpC,IAAIK,QAAQ;IACZ,IAAID,QAAQ,GAAG,GAAG,EAAEC,QAAQ,GAAG,CAAC,CAAC,KAC5B,IAAID,QAAQ,GAAG,CAAC,EAAEC,QAAQ,GAAG,CAAC,CAAC,KAC/B,IAAID,QAAQ,GAAG,CAAC,EAAEC,QAAQ,GAAG,CAAC,CAAC,KAC/BA,QAAQ,GAAG,EAAE;IAClB,OAAOf,IAAI,CAACgB,GAAG,CAAC,CAAC,EAAED,QAAQ,GAAGL,SAAS,CAAC,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMO,SAAS,GAAGtD,WAAW,CAAEuD,MAAM,IAAK;IACxC,MAAMC,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC,OAAOyB,KAAK,CAACnC,OAAO,CAACC,IAAI,GAAIiC,MAAM,GAAGC,KAAK,CAAC9B,SAAS,IAAK8B,KAAK,CAACrC,KAAK,GAAGqC,KAAK,CAACnC,OAAO,CAACC,IAAI,GAAGkC,KAAK,CAACnC,OAAO,CAACE,KAAK,CAAC;EACnH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkC,SAAS,GAAGzD,WAAW,CAAE0D,MAAM,IAAK;IACxC,MAAMF,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC;IACA,MAAM4B,kBAAkB,GAAGH,KAAK,CAAC7B,aAAa,IAAI,CAAC,GAAG,CAAC,GAAG6B,KAAK,CAAC7B,aAAa;IAC7E,MAAMiC,WAAW,GAAGJ,KAAK,CAACpC,MAAM,GAAGoC,KAAK,CAACnC,OAAO,CAACG,GAAG,GAAGgC,KAAK,CAACnC,OAAO,CAACI,MAAM;IAC3E;IACA,MAAMoC,KAAK,GAAGL,KAAK,CAACM,aAAa,IAAI,CAAC,GAAG,CAAC,GAAGN,KAAK,CAACM,aAAa;IAChE,MAAMC,WAAW,GAAGJ,kBAAkB,GAAGE,KAAK;IAC9C,IAAIE,WAAW,IAAI,CAAC,EAAE,OAAOP,KAAK,CAACpC,MAAM,GAAGoC,KAAK,CAACnC,OAAO,CAACI,MAAM,CAAC,CAAC;;IAElE,OAAO+B,KAAK,CAACpC,MAAM,GAAGoC,KAAK,CAACnC,OAAO,CAACI,MAAM,GAAI,CAACiC,MAAM,GAAGG,KAAK,IAAIE,WAAW,GAAIH,WAAW;EAC7F,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA,MAAMI,cAAc,GAAGhE,WAAW,CAAC,MAAM;IACvC,MAAMwD,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC,MAAM;MAAEb,GAAG;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGoC,KAAK;IACpCtC,GAAG,CAAC+C,SAAS,GAAG,SAAS,CAAC,CAAC;IAC3B/C,GAAG,CAACgD,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE/C,KAAK,EAAEC,MAAM,CAAC;;IAEjC;IACAF,GAAG,CAACiD,IAAI,GAAG,sBAAsB;IACjCjD,GAAG,CAAC+C,SAAS,GAAG,SAAS;IACzB/C,GAAG,CAACkD,SAAS,GAAG,QAAQ;IACxBlD,GAAG,CAACmD,YAAY,GAAG,KAAK;IACxB,MAAMC,UAAU,GAAGvD,QAAQ,KAAK,IAAI,GAAG,WAAW,GAAG,yBAAyB;IAC9EG,GAAG,CAACqD,QAAQ,CAACD,UAAU,EAAEnD,KAAK,GAAG,CAAC,EAAE,EAAE,CAAC;EACzC,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMyD,eAAe,GAAGxE,WAAW,CAAC,MAAM;IACxC,MAAMwD,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC,MAAM;MAAEb,GAAG;MAAEC,KAAK;MAAEC,MAAM;MAAEC,OAAO;MAAEM,aAAa;MAAEmC,aAAa;MAAElC,KAAK;MAAEF;IAAU,CAAC,GAAG8B,KAAK;IAC7F,MAAMI,WAAW,GAAGxC,MAAM,GAAGC,OAAO,CAACG,GAAG,GAAGH,OAAO,CAACI,MAAM;IAEzDP,GAAG,CAACuD,SAAS,CAAC,CAAC;IACfvD,GAAG,CAACwD,WAAW,GAAG,SAAS;IAC3BxD,GAAG,CAACyD,SAAS,GAAG,CAAC;;IAEjB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIlD,SAAS,EAAEkD,CAAC,IAAI,GAAG,EAAE;MACxC,MAAMC,CAAC,GAAGvB,SAAS,CAACsB,CAAC,CAAC;MACtB1D,GAAG,CAAC4D,MAAM,CAACD,CAAC,EAAExD,OAAO,CAACG,GAAG,CAAC;MAC1BN,GAAG,CAAC6D,MAAM,CAACF,CAAC,EAAEzD,MAAM,GAAGC,OAAO,CAACI,MAAM,CAAC;IACxC;;IAEA;IACA,KAAK,IAAImD,CAAC,GAAGd,aAAa,EAAEc,CAAC,IAAIjD,aAAa,EAAEiD,CAAC,IAAIhD,KAAK,EAAE;MAC1D;MACA,IAAI,CAACD,aAAa,GAAGmC,aAAa,IAAIlC,KAAK,GAAG,EAAE,IAAIgD,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAKd,aAAa,IAAIc,CAAC,KAAKjD,aAAa,EAAE;QACvG,IAAIiD,CAAC,IAAIhD,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAIgD,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC;MACpD;MACA,MAAMI,CAAC,GAAGvB,SAAS,CAACmB,CAAC,CAAC;MACtB1D,GAAG,CAAC4D,MAAM,CAACzD,OAAO,CAACC,IAAI,EAAE0D,CAAC,CAAC;MAC3B9D,GAAG,CAAC6D,MAAM,CAAC5D,KAAK,GAAGE,OAAO,CAACE,KAAK,EAAEyD,CAAC,CAAC;IACtC;IACA9D,GAAG,CAAC+D,MAAM,CAAC,CAAC;;IAEZ;IACA/D,GAAG,CAACuD,SAAS,CAAC,CAAC;IACfvD,GAAG,CAACwD,WAAW,GAAG,SAAS;IAC3BxD,GAAG,CAACyD,SAAS,GAAG,GAAG;IACnBzD,GAAG,CAAC4D,MAAM,CAACzD,OAAO,CAACC,IAAI,EAAEF,MAAM,GAAGC,OAAO,CAACI,MAAM,CAAC,CAAC,CAAC;IACnDP,GAAG,CAAC6D,MAAM,CAAC5D,KAAK,GAAGE,OAAO,CAACE,KAAK,EAAEH,MAAM,GAAGC,OAAO,CAACI,MAAM,CAAC;IAC1DP,GAAG,CAAC4D,MAAM,CAACzD,OAAO,CAACC,IAAI,EAAED,OAAO,CAACG,GAAG,CAAC,CAAC,CAAC;IACvCN,GAAG,CAAC6D,MAAM,CAAC1D,OAAO,CAACC,IAAI,EAAEF,MAAM,GAAGC,OAAO,CAACI,MAAM,CAAC;IACjDP,GAAG,CAAC+D,MAAM,CAAC,CAAC;EACd,CAAC,EAAE,CAAC3B,SAAS,EAAEG,SAAS,CAAC,CAAC;EAE1B,MAAMyB,mBAAmB,GAAGlF,WAAW,CAAC,MAAM;IAC5C,MAAMwD,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC,MAAM;MAAEb,GAAG;MAAEC,KAAK;MAAEC,MAAM;MAAEC,OAAO;MAAEM,aAAa;MAAEmC,aAAa;MAAElC,KAAK;MAAEF;IAAU,CAAC,GAAG8B,KAAK;;IAE7F;IACAtC,GAAG,CAACkD,SAAS,GAAG,OAAO;IACvBlD,GAAG,CAACmD,YAAY,GAAG,QAAQ;IAC3BnD,GAAG,CAAC+C,SAAS,GAAG,SAAS,CAAC,CAAC;IAC3B/C,GAAG,CAACiD,IAAI,GAAG,iBAAiB;IAE5B,KAAK,IAAIS,CAAC,GAAGd,aAAa,EAAEc,CAAC,IAAIjD,aAAa,EAAEiD,CAAC,IAAIhD,KAAK,EAAE;MACzD,IAAI,CAACD,aAAa,GAAGmC,aAAa,IAAIlC,KAAK,GAAG,EAAE,IAAIgD,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAKd,aAAa,IAAIc,CAAC,KAAKjD,aAAa,EAAE;QACxG,IAAIiD,CAAC,IAAIhD,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAIgD,CAAC,KAAK,CAAC,EAAE;MAC1C;MACA,MAAMI,CAAC,GAAGvB,SAAS,CAACmB,CAAC,CAAC;MACtB1D,GAAG,CAACqD,QAAQ,CAACvC,cAAc,CAAC4C,CAAC,EAAE,IAAI,CAAC,EAAEvD,OAAO,CAACC,IAAI,GAAG,EAAE,EAAE0D,CAAC,CAAC;IAC7D;;IAEA;IACA9D,GAAG,CAACkD,SAAS,GAAG,QAAQ;IACxBlD,GAAG,CAACmD,YAAY,GAAG,KAAK;IACxB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIlD,SAAS,EAAEkD,CAAC,IAAKlD,SAAS,IAAI,GAAG,GAAG,GAAG,GAAG,EAAG,EAAE;MAAE;MACpE,MAAMmD,CAAC,GAAGvB,SAAS,CAACsB,CAAC,CAAC;MACtB1D,GAAG,CAACqD,QAAQ,CAACK,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAEN,CAAC,EAAEzD,MAAM,GAAGC,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC;IAC5D;;IAEA;IACAP,GAAG,CAACiD,IAAI,GAAG,sBAAsB;IACjCjD,GAAG,CAAC+C,SAAS,GAAG,SAAS;IACzB/C,GAAG,CAACkD,SAAS,GAAG,QAAQ;;IAExB;IACA,MAAMgB,UAAU,GAAGrE,QAAQ,KAAK,IAAI,GAAG,WAAW,GAAG,8BAA8B;IACnFG,GAAG,CAACqD,QAAQ,CAACa,UAAU,EACV/D,OAAO,CAACC,IAAI,GAAG,CAACH,KAAK,GAAGE,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACE,KAAK,IAAI,CAAC,EACzDH,MAAM,GAAGC,OAAO,CAACI,MAAM,GAAG,EAAE,CAAC;;IAE1C;IACA,MAAM4D,UAAU,GAAGtE,QAAQ,KAAK,IAAI,GAAG,UAAU,GAAG,sBAAsB;IAC1EG,GAAG,CAACoE,IAAI,CAAC,CAAC;IACV;IACA;IACApE,GAAG,CAACqE,SAAS,CAAC,EAAE,EAAElE,OAAO,CAACG,GAAG,GAAG,CAACJ,MAAM,GAAGC,OAAO,CAACG,GAAG,GAAGH,OAAO,CAACI,MAAM,IAAI,CAAC,CAAC;IAC5EP,GAAG,CAACsE,MAAM,CAAC,CAACnD,IAAI,CAACoD,EAAE,GAAG,CAAC,CAAC;IACxBvE,GAAG,CAACkD,SAAS,GAAG,QAAQ;IACxBlD,GAAG,CAACqD,QAAQ,CAACc,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9BnE,GAAG,CAACwE,OAAO,CAAC,CAAC;EACf,CAAC,EAAE,CAACpC,SAAS,EAAEG,SAAS,EAAEzB,cAAc,EAAEjB,QAAQ,CAAC,CAAC;EAEpD,MAAM4E,cAAc,GAAG3F,WAAW,CAAC,MAAM;IAAA,IAAA4F,mBAAA;IACvC,MAAMpC,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC,MAAM;MAAEb,GAAG;MAAEW,aAAa;MAAEH;IAAU,CAAC,GAAG8B,KAAK;IAE/CtC,GAAG,CAACuD,SAAS,CAAC,CAAC;IACf;IACAvD,GAAG,CAACwD,WAAW,GAAG,EAAAkB,mBAAA,GAAA/E,KAAK,CAACgF,OAAO,CAACC,IAAI,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAoBG,MAAM,KAAI,SAAS;IACzD7E,GAAG,CAACyD,SAAS,GAAG,GAAG;IAEnBzD,GAAG,CAAC4D,MAAM,CAACxB,SAAS,CAAC,CAAC,CAAC,EAAEG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,KAAK,IAAIF,MAAM,GAAG,CAAC,EAAEA,MAAM,IAAI7B,SAAS,EAAE6B,MAAM,IAAI,EAAE,EAAE;MAAE;MACxD,MAAMG,MAAM,GAAGH,MAAM,GAAG1B,aAAa;MACrCX,GAAG,CAAC6D,MAAM,CAACzB,SAAS,CAACC,MAAM,CAAC,EAAEE,SAAS,CAACC,MAAM,CAAC,CAAC;IAClD;IACAxC,GAAG,CAAC+D,MAAM,CAAC,CAAC;EACd,CAAC,EAAE,CAAC3B,SAAS,EAAEG,SAAS,GAAA9C,oBAAA,GAAEE,KAAK,CAACgF,OAAO,CAACC,IAAI,cAAAnF,oBAAA,uBAAlBA,oBAAA,CAAoBoF,MAAM,CAAC,CAAC;EAEtD,MAAMC,mBAAmB,GAAGhG,WAAW,CAAC,CAACuD,MAAM,EAAEG,MAAM,KAAK;IAAA,IAAAuC,oBAAA;IAC1D,MAAMzC,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtC,MAAM;MAAEb,GAAG;MAAEE,MAAM;MAAEC,OAAO;MAAEQ;IAAc,CAAC,GAAG2B,KAAK;IACrD,IAAI,CAACtC,GAAG,EAAE;IAEV,MAAMgF,MAAM,GAAG5C,SAAS,CAACC,MAAM,CAAC;IAChC,MAAM4C,MAAM,GAAG1C,SAAS,CAACC,MAAM,CAAC;;IAEhC;IACAxC,GAAG,CAACuD,SAAS,CAAC,CAAC;IACfvD,GAAG,CAACwD,WAAW,GAAG,SAAS;IAC3BxD,GAAG,CAACkF,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvBlF,GAAG,CAACyD,SAAS,GAAG,CAAC;IACjBzD,GAAG,CAAC4D,MAAM,CAACoB,MAAM,EAAE9E,MAAM,GAAGC,OAAO,CAACI,MAAM,CAAC;IAC3CP,GAAG,CAAC6D,MAAM,CAACmB,MAAM,EAAEC,MAAM,CAAC;IAC1BjF,GAAG,CAAC4D,MAAM,CAACzD,OAAO,CAACC,IAAI,EAAE6E,MAAM,CAAC;IAChCjF,GAAG,CAAC6D,MAAM,CAACmB,MAAM,EAAEC,MAAM,CAAC;IAC1BjF,GAAG,CAAC+D,MAAM,CAAC,CAAC;IACZ/D,GAAG,CAACkF,WAAW,CAAC,EAAE,CAAC;;IAEnB;IACAlF,GAAG,CAACuD,SAAS,CAAC,CAAC;IACfvD,GAAG,CAACmF,GAAG,CAACH,MAAM,EAAEC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE9D,IAAI,CAACoD,EAAE,GAAG,CAAC,CAAC;IAC1CvE,GAAG,CAAC+C,SAAS,GAAG,EAAAgC,oBAAA,GAAApF,KAAK,CAACgF,OAAO,CAACC,IAAI,cAAAG,oBAAA,uBAAlBA,oBAAA,CAAoBF,MAAM,KAAI,SAAS;IACvD7E,GAAG,CAACoF,IAAI,CAAC,CAAC;IACVpF,GAAG,CAACwD,WAAW,GAAG,SAAS;IAC3BxD,GAAG,CAACyD,SAAS,GAAG,GAAG;IACnBzD,GAAG,CAAC+D,MAAM,CAAC,CAAC;;IAEZ;IACA,MAAMsB,WAAW,GAAGxF,QAAQ,KAAK,IAAI,GAAG,KAAK,GAAG,QAAQ;IACxD,MAAMyF,WAAW,GAAGzF,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,QAAQ;IACvD,MAAM0F,WAAW,GAAG,GAAGF,WAAW,KAAKhD,MAAM,KAAKiD,WAAW,KAAKxE,cAAc,CAAC0B,MAAM,CAAC,EAAE;IAE1FxC,GAAG,CAACiD,IAAI,GAAG,sBAAsB;IACjC,MAAMuC,SAAS,GAAGxF,GAAG,CAACyF,WAAW,CAACF,WAAW,CAAC,CAACtF,KAAK;IACpD,MAAMyF,YAAY,GAAGvE,IAAI,CAACgB,GAAG,CAACqD,SAAS,CAAC,GAAG,EAAE;IAC7C,MAAMG,aAAa,GAAG,EAAE,CAAC,CAAC;;IAE1B,IAAIC,QAAQ,GAAGZ,MAAM,GAAG,EAAE;IAC1B,IAAIa,QAAQ,GAAGZ,MAAM,GAAG,EAAE,GAAGU,aAAa;;IAE1C;IACA,IAAIC,QAAQ,GAAGF,YAAY,GAAGpD,KAAK,CAACrC,KAAK,GAAGqC,KAAK,CAACnC,OAAO,CAACE,KAAK,EAAE;MAC/DuF,QAAQ,GAAGZ,MAAM,GAAG,EAAE,GAAGU,YAAY;IACvC;IACA,IAAIG,QAAQ,GAAGvD,KAAK,CAACnC,OAAO,CAACG,GAAG,EAAE;MAChCuF,QAAQ,GAAGZ,MAAM,GAAG,EAAE;IACxB;IAEAjF,GAAG,CAAC+C,SAAS,GAAG,0BAA0B;IAC1C/C,GAAG,CAACwD,WAAW,GAAG,0BAA0B;IAC5CxD,GAAG,CAACyD,SAAS,GAAG,CAAC;IACjBzD,GAAG,CAACuD,SAAS,CAAC,CAAC;IACfvD,GAAG,CAAC8F,SAAS,CAACF,QAAQ,EAAEC,QAAQ,EAAEH,YAAY,EAAEC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;IACnE3F,GAAG,CAACoF,IAAI,CAAC,CAAC;IACVpF,GAAG,CAAC+D,MAAM,CAAC,CAAC;IAEZ/D,GAAG,CAAC+C,SAAS,GAAG,SAAS;IACzB/C,GAAG,CAACkD,SAAS,GAAG,MAAM;IACtBlD,GAAG,CAACmD,YAAY,GAAG,QAAQ;IAC3BnD,GAAG,CAACqD,QAAQ,CAACkC,WAAW,EAAEK,QAAQ,GAAG,EAAE,EAAEC,QAAQ,GAAGF,aAAa,GAAG,CAAC,CAAC;EAExE,CAAC,EAAE,CAACvD,SAAS,EAAEG,SAAS,EAAEzB,cAAc,GAAApB,oBAAA,GAAEC,KAAK,CAACgF,OAAO,CAACC,IAAI,cAAAlF,oBAAA,uBAAlBA,oBAAA,CAAoBmF,MAAM,EAAEhF,QAAQ,CAAC,CAAC;;EAGhF;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMmH,MAAM,GAAGjG,SAAS,CAACe,OAAO;IAChC,IAAI,CAACkF,MAAM,IAAI,OAAO1G,iBAAiB,KAAK,QAAQ,IAAI,OAAOC,WAAW,KAAK,QAAQ,EAAE;MACvF;MACA,IAAGyG,MAAM,EAAE;QACT,MAAMC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;QACvCD,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEH,MAAM,CAAC9F,KAAK,EAAE8F,MAAM,CAAC7F,MAAM,CAAC;MACtD;MACA;IACF;IAEA,MAAMoC,KAAK,GAAGvC,gBAAgB,CAACc,OAAO;IACtCyB,KAAK,CAACtC,GAAG,GAAG+F,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnC3D,KAAK,CAACrC,KAAK,GAAG8F,MAAM,CAAC9F,KAAK;IAC1BqC,KAAK,CAACpC,MAAM,GAAG6F,MAAM,CAAC7F,MAAM;IAC5BoC,KAAK,CAAC3B,aAAa,GAAGtB,iBAAiB,GAAGC,WAAW;;IAErD;IACA,MAAM6G,iBAAiB,GAAG7D,KAAK,CAAC9B,SAAS,GAAG8B,KAAK,CAAC3B,aAAa;IAC/D,MAAMyF,iBAAiB,GAAG,CAAC,GAAG9D,KAAK,CAAC3B,aAAa,CAAC,CAAC;;IAEnD,IAAI2B,KAAK,CAAC3B,aAAa,GAAG,CAAC,EAAE;MACzB2B,KAAK,CAACM,aAAa,GAAG,CAAC;MACvBN,KAAK,CAAC7B,aAAa,GAAGU,IAAI,CAACkF,IAAI,CAAEF,iBAAiB,GAAG,GAAG,GAAI1E,iBAAiB,CAAC0E,iBAAiB,GAAG,GAAG,CAAC,CAAC,GAAG1E,iBAAiB,CAAC0E,iBAAiB,GAAG,GAAG,CAAC;MACpJ,IAAI7D,KAAK,CAAC7B,aAAa,IAAG,CAAC,EAAE6B,KAAK,CAAC7B,aAAa,GAAGgB,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAClF,CAAC,MAAM;MAAE;MACLa,KAAK,CAAC7B,aAAa,GAAGgB,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;MACjDa,KAAK,CAACM,aAAa,GAAGzB,IAAI,CAACY,KAAK,CAAEqE,iBAAiB,GAAG,GAAG,GAAI3E,iBAAiB,CAACN,IAAI,CAACC,GAAG,CAACgF,iBAAiB,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG3E,iBAAiB,CAACN,IAAI,CAACC,GAAG,CAACgF,iBAAiB,GAAG,GAAG,CAAC,CAAC;MACzK,IAAI9D,KAAK,CAACM,aAAa,IAAG,CAAC,IAAIwD,iBAAiB,GAAG,CAAC,EAAE9D,KAAK,CAACM,aAAa,GAAG,CAACnB,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;MACxG,IAAIa,KAAK,CAAC3B,aAAa,KAAK,CAAC,EAAE2B,KAAK,CAACM,aAAa,GAAG,CAAC;IAC1D;IACA;IACA,IAAIN,KAAK,CAAC7B,aAAa,IAAI6B,KAAK,CAACM,aAAa,EAAE;MAC5CN,KAAK,CAAC7B,aAAa,GAAG6B,KAAK,CAACM,aAAa,GAAGnB,iBAAiB,CAACN,IAAI,CAACC,GAAG,CAACkB,KAAK,CAACM,aAAa,CAAC,IAAI,MAAM,CAAC;IAC1G;IAEAN,KAAK,CAAC5B,KAAK,GAAGe,iBAAiB,CAACa,KAAK,CAAC7B,aAAa,GAAG6B,KAAK,CAACM,aAAa,EAAE,CAAC,CAAC;IAC7E,IAAIN,KAAK,CAAC5B,KAAK,KAAK,CAAC,EAAE4B,KAAK,CAAC5B,KAAK,GAAG,CAAC4B,KAAK,CAAC7B,aAAa,GAAG6B,KAAK,CAACM,aAAa,IAAI,CAAC,IAAI,CAAC;;IAGzF;IACA,MAAM0D,eAAe,GAAGA,CAAA,KAAM;MAC1BhE,KAAK,CAACtC,GAAG,CAACkG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE5D,KAAK,CAACrC,KAAK,EAAEqC,KAAK,CAACpC,MAAM,CAAC;MACpD4C,cAAc,CAAC,CAAC;MAChBQ,eAAe,CAAC,CAAC;MACjBU,mBAAmB,CAAC,CAAC;MACrBS,cAAc,CAAC,CAAC;IACpB,CAAC;IAED6B,eAAe,CAAC,CAAC,CAAC,CAAC;;IAEnB;IACA,IAAI,OAAO/G,aAAa,KAAK,QAAQ,EAAE;MACnC,MAAMgH,aAAa,GAAGhH,aAAa,GAAG+C,KAAK,CAAC3B,aAAa;MACzD;MACA2B,KAAK,CAAC1B,gBAAgB,GAAG;QAAEyB,MAAM,EAAE9C,aAAa;QAAEiD,MAAM,EAAE+D,aAAa;QAAEC,oBAAoB,EAAE;MAAK,CAAC;MACrG1B,mBAAmB,CAACvF,aAAa,EAAEgH,aAAa,CAAC;IACrD,CAAC,MAAM;MACHjE,KAAK,CAAC1B,gBAAgB,GAAG,IAAI;IACjC;;IAEA;IACA,MAAM6F,eAAe,GAAIC,CAAC,IAAK;MAC7B,MAAMC,IAAI,GAAGZ,MAAM,CAACa,qBAAqB,CAAC,CAAC;MAC3C,MAAMC,MAAM,GAAGH,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACvG,IAAI;MACpC,MAAM2G,MAAM,GAAGL,CAAC,CAACM,OAAO,GAAGL,IAAI,CAACrG,GAAG;MACnC,MAAM;QAAEH,OAAO;QAAEF,KAAK;QAAEC,MAAM;QAAEM,SAAS;QAAEG;MAAc,CAAC,GAAGZ,gBAAgB,CAACc,OAAO;MAErF,IAAIgG,MAAM,IAAI1G,OAAO,CAACC,IAAI,IAAIyG,MAAM,IAAI5G,KAAK,GAAGE,OAAO,CAACE,KAAK,IACzD0G,MAAM,IAAI5G,OAAO,CAACG,GAAG,IAAIyG,MAAM,IAAI7G,MAAM,GAAGC,OAAO,CAACI,MAAM,EAAE;QAE9D,MAAM8B,MAAM,GAAGlB,IAAI,CAACgB,GAAG,CAAC,CAAC,EAAEhB,IAAI,CAAC8F,GAAG,CAACzG,SAAS,EAAEW,IAAI,CAACI,KAAK,CAAE,CAACsF,MAAM,GAAG1G,OAAO,CAACC,IAAI,KAAKH,KAAK,GAAGE,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAIG,SAAS,CAAC,CAAC,CAAC;QAC3I,MAAMgC,MAAM,GAAGH,MAAM,GAAG1B,aAAa;;QAErC;QACA2F,eAAe,CAAC,CAAC;QACjBvG,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,GAAG;UAAEyB,MAAM;UAAEG,MAAM;UAAEgE,oBAAoB,EAAE;QAAM,CAAC;QAC3F1B,mBAAmB,CAACzC,MAAM,EAAEG,MAAM,CAAC;MAErC,CAAC,MAAM;QACL;QACA,IAAIzC,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,IAAI,CAACb,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,CAAC4F,oBAAoB,EAAE;UAC9GF,eAAe,CAAC,CAAC;UACjB,IAAI,OAAO/G,aAAa,KAAK,QAAQ,EAAE;YACnC,MAAM2H,QAAQ,GAAG3H,aAAa,GAAGQ,gBAAgB,CAACc,OAAO,CAACF,aAAa;YACvEZ,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,GAAG;cAAEyB,MAAM,EAAE9C,aAAa;cAAEiD,MAAM,EAAE0E,QAAQ;cAAEV,oBAAoB,EAAE;YAAK,CAAC;YACnH1B,mBAAmB,CAACvF,aAAa,EAAE2H,QAAQ,CAAC;UAChD,CAAC,MAAM;YACHnH,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,GAAG,IAAI;UACpD;QACJ;MACF;IACF,CAAC;IAEDmF,MAAM,CAACoB,gBAAgB,CAAC,WAAW,EAAEV,eAAe,CAAC;IACrD;IACA,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;MAC3Bd,eAAe,CAAC,CAAC;MACjB,IAAI,OAAO/G,aAAa,KAAK,QAAQ,EAAE;QACnC,MAAM2H,QAAQ,GAAG3H,aAAa,GAAGQ,gBAAgB,CAACc,OAAO,CAACF,aAAa;QACvEZ,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,GAAG;UAAEyB,MAAM,EAAE9C,aAAa;UAAEiD,MAAM,EAAE0E,QAAQ;UAAEV,oBAAoB,EAAE;QAAK,CAAC;QACnH1B,mBAAmB,CAACvF,aAAa,EAAE2H,QAAQ,CAAC;MAChD,CAAC,MAAM;QACHnH,gBAAgB,CAACc,OAAO,CAACD,gBAAgB,GAAG,IAAI;MACpD;IACJ,CAAC;IACDmF,MAAM,CAACoB,gBAAgB,CAAC,YAAY,EAAEC,gBAAgB,CAAC;IAGvD,OAAO,MAAM;MACXrB,MAAM,CAACsB,mBAAmB,CAAC,WAAW,EAAEZ,eAAe,CAAC;MACxDV,MAAM,CAACsB,mBAAmB,CAAC,YAAY,EAAED,gBAAgB,CAAC;IAC5D,CAAC;EAEH,CAAC,EAAE,CACD/H,iBAAiB,EACjBC,WAAW,EACXC,aAAa,EACbI,KAAK;EAAE;EACPE,QAAQ,EAAED,CAAC;EAAE;EACbkB,cAAc,EAAEW,iBAAiB,EAAEW,SAAS,EAAEG,SAAS;EAAE;EACzDO,cAAc,EAAEQ,eAAe,EAAEU,mBAAmB,EAAES,cAAc,EAAEK,mBAAmB,CAAC;EAAA,CAC3F,CAAC;EAEF,oBACE3F,OAAA,CAACJ,GAAG;IAACuI,EAAE,EAAE;MAAErH,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEqH,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAC,QAAA,eACzGvI,OAAA,CAACJ,GAAG;MAACuI,EAAE,EAAE;QAAErH,KAAK,EAAE,MAAM;QAAE0H,QAAQ,EAAE,OAAO;QAAEC,WAAW,EAAE,QAAQ;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAH,QAAA,eAC1EvI,OAAA;QACI2I,GAAG,EAAEhI,SAAU;QACfG,KAAK,EAAE,GAAI,CAAE;QACbC,MAAM,EAAE,KAAM,CAAC;QACf6H,KAAK,EAAE;UAAER,OAAO,EAAE,OAAO;UAAEtH,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAM;MAAE;QAAA8H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3I,EAAA,CAzYIJ,iBAAiB;EAAA,QACPJ,QAAQ,EACEC,WAAW;AAAA;AAAAmJ,EAAA,GAF/BhJ,iBAAiB;AA2YvB,eAAeA,iBAAiB;AAAC,IAAAgJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}