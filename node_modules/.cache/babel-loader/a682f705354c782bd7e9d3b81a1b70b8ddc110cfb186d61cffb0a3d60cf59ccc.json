{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MO180SalesSimulator/src/components/Charts/ProfitVolumeChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfitVolumeChart = ({\n  salesPricePerUnit,\n  costPerUnit,\n  currentVolume\n}) => {\n  _s();\n  const theme = useTheme();\n  const canvasRef = useRef(null);\n\n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n\n  // Format currency\n  const formatCurrency = amount => `JPY ${Math.round(amount).toLocaleString()}`;\n\n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = 40;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Chart area dimensions\n    const chartWidth = width - padding * 2;\n    const chartHeight = height - padding * 2;\n\n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n\n    // Y-axis: Monthly Profit (0 to max value based on volume and profit per unit)\n    const maxProfit = maxVolume * profitPerUnit;\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.divider;\n    ctx.lineWidth = 1;\n\n    // X-axis\n    ctx.moveTo(padding, height - padding);\n    ctx.lineTo(width - padding, height - padding);\n\n    // Y-axis\n    ctx.moveTo(padding, padding);\n    ctx.lineTo(padding, height - padding);\n    ctx.stroke();\n\n    // Draw horizontal grid lines\n    const gridLines = 5;\n    ctx.beginPath();\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.setLineDash([5, 5]);\n    for (let i = 1; i <= gridLines; i++) {\n      const y = height - padding - i * (chartHeight / gridLines);\n      ctx.moveTo(padding, y);\n      ctx.lineTo(width - padding, y);\n    }\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Draw axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = theme.palette.text.secondary;\n    ctx.font = '12px ' + theme.typography.fontFamily;\n\n    // X-axis labels\n    for (let i = 0; i <= 5; i++) {\n      const x = padding + i * (chartWidth / 5);\n      const volume = i * maxVolume / 5;\n      ctx.fillText(volume.toString(), x, height - padding + 15);\n    }\n\n    // Y-axis labels\n    ctx.textAlign = 'right';\n    for (let i = 0; i <= gridLines; i++) {\n      const y = height - padding - i * (chartHeight / gridLines);\n      const profit = i * maxProfit / gridLines;\n      ctx.fillText(formatCurrency(profit), padding - 10, y);\n    }\n\n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 10);\n\n    // Y-axis title\n    ctx.save();\n    ctx.translate(15, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n\n    // Draw profit line\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.cmyk.yellow;\n    ctx.lineWidth = 3;\n\n    // Create gradient for the line\n    const gradient = ctx.createLinearGradient(0, height - padding, 0, padding);\n    gradient.addColorStop(0, theme.palette.cmyk.yellow);\n    gradient.addColorStop(1, theme.palette.secondary.main);\n    ctx.strokeStyle = gradient;\n\n    // Start at origin (0, 0)\n    const startX = padding;\n    const startY = height - padding;\n    ctx.moveTo(startX, startY);\n\n    // End at max volume, max profit\n    const endX = width - padding;\n    const endY = padding;\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n\n    // Add glow effect to the line\n    ctx.shadowColor = 'rgba(255, 242, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.strokeStyle = 'rgba(255, 242, 0, 0.8)';\n    ctx.lineWidth = 1;\n    ctx.stroke();\n    ctx.shadowColor = 'transparent';\n\n    // Mark current volume point\n    if (currentVolume) {\n      const pointX = padding + currentVolume / maxVolume * chartWidth;\n      const pointY = height - padding - currentVolume * profitPerUnit / maxProfit * chartHeight;\n\n      // Draw vertical line to the point\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';\n      ctx.setLineDash([5, 5]);\n      ctx.moveTo(pointX, height - padding);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Draw horizontal line to the point\n      ctx.beginPath();\n      ctx.moveTo(padding, pointY);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n\n      // Draw point\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = theme.palette.primary.main;\n      ctx.fill();\n      ctx.strokeStyle = theme.palette.background.paper;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Label the point\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'bottom';\n      ctx.fillStyle = theme.palette.text.primary;\n      ctx.font = 'bold 12px ' + theme.typography.fontFamily;\n      ctx.fillText(`Current: ${currentVolume} units, ${formatCurrency(currentVolume * profitPerUnit)}`, pointX + 10, pointY - 5);\n    }\n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Profit vs. Sales Volume\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        width: '100%',\n        height: '220px',\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 500,\n        height: 300,\n        style: {\n          maxWidth: '100%',\n          maxHeight: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2,\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: [\"Profit per unit: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: formatCurrency(profitPerUnit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfitVolumeChart, \"kdrREFZ0jLaicLxmNBI1E0NiK+c=\", false, function () {\n  return [useTheme];\n});\n_c = ProfitVolumeChart;\nexport default ProfitVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","Box","Typography","useTheme","jsxDEV","_jsxDEV","ProfitVolumeChart","salesPricePerUnit","costPerUnit","currentVolume","_s","theme","canvasRef","profitPerUnit","formatCurrency","amount","Math","round","toLocaleString","canvas","current","ctx","getContext","width","height","padding","clearRect","chartWidth","chartHeight","maxVolume","maxProfit","beginPath","strokeStyle","palette","divider","lineWidth","moveTo","lineTo","stroke","gridLines","setLineDash","i","y","textAlign","textBaseline","fillStyle","text","secondary","font","typography","fontFamily","x","volume","fillText","toString","profit","save","translate","rotate","PI","restore","cmyk","yellow","gradient","createLinearGradient","addColorStop","main","startX","startY","endX","endY","shadowColor","shadowBlur","pointX","pointY","arc","primary","fill","background","paper","sx","display","flexDirection","alignItems","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","position","justifyContent","ref","style","maxWidth","maxHeight","mt","color","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MO180SalesSimulator/src/components/Charts/ProfitVolumeChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume\n */\nconst ProfitVolumeChart = ({ salesPricePerUnit, costPerUnit, currentVolume }) => {\n  const theme = useTheme();\n  const canvasRef = useRef(null);\n  \n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  \n  // Format currency\n  const formatCurrency = (amount) => `JPY ${Math.round(amount).toLocaleString()}`;\n  \n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    \n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = 40;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Chart area dimensions\n    const chartWidth = width - (padding * 2);\n    const chartHeight = height - (padding * 2);\n    \n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n    \n    // Y-axis: Monthly Profit (0 to max value based on volume and profit per unit)\n    const maxProfit = maxVolume * profitPerUnit;\n    \n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.divider;\n    ctx.lineWidth = 1;\n    \n    // X-axis\n    ctx.moveTo(padding, height - padding);\n    ctx.lineTo(width - padding, height - padding);\n    \n    // Y-axis\n    ctx.moveTo(padding, padding);\n    ctx.lineTo(padding, height - padding);\n    ctx.stroke();\n    \n    // Draw horizontal grid lines\n    const gridLines = 5;\n    ctx.beginPath();\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.setLineDash([5, 5]);\n    \n    for (let i = 1; i <= gridLines; i++) {\n      const y = height - padding - (i * (chartHeight / gridLines));\n      ctx.moveTo(padding, y);\n      ctx.lineTo(width - padding, y);\n    }\n    ctx.stroke();\n    ctx.setLineDash([]);\n    \n    // Draw axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = theme.palette.text.secondary;\n    ctx.font = '12px ' + theme.typography.fontFamily;\n    \n    // X-axis labels\n    for (let i = 0; i <= 5; i++) {\n      const x = padding + (i * (chartWidth / 5));\n      const volume = (i * maxVolume) / 5;\n      ctx.fillText(volume.toString(), x, height - padding + 15);\n    }\n    \n    // Y-axis labels\n    ctx.textAlign = 'right';\n    for (let i = 0; i <= gridLines; i++) {\n      const y = height - padding - (i * (chartHeight / gridLines));\n      const profit = (i * maxProfit) / gridLines;\n      ctx.fillText(formatCurrency(profit), padding - 10, y);\n    }\n    \n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 10);\n    \n    // Y-axis title\n    ctx.save();\n    ctx.translate(15, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n    \n    // Draw profit line\n    ctx.beginPath();\n    ctx.strokeStyle = theme.palette.cmyk.yellow;\n    ctx.lineWidth = 3;\n    \n    // Create gradient for the line\n    const gradient = ctx.createLinearGradient(0, height - padding, 0, padding);\n    gradient.addColorStop(0, theme.palette.cmyk.yellow);\n    gradient.addColorStop(1, theme.palette.secondary.main);\n    ctx.strokeStyle = gradient;\n    \n    // Start at origin (0, 0)\n    const startX = padding;\n    const startY = height - padding;\n    ctx.moveTo(startX, startY);\n    \n    // End at max volume, max profit\n    const endX = width - padding;\n    const endY = padding;\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n    \n    // Add glow effect to the line\n    ctx.shadowColor = 'rgba(255, 242, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.strokeStyle = 'rgba(255, 242, 0, 0.8)';\n    ctx.lineWidth = 1;\n    ctx.stroke();\n    ctx.shadowColor = 'transparent';\n    \n    // Mark current volume point\n    if (currentVolume) {\n      const pointX = padding + (currentVolume / maxVolume) * chartWidth;\n      const pointY = height - padding - (currentVolume * profitPerUnit / maxProfit) * chartHeight;\n      \n      // Draw vertical line to the point\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';\n      ctx.setLineDash([5, 5]);\n      ctx.moveTo(pointX, height - padding);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      ctx.setLineDash([]);\n      \n      // Draw horizontal line to the point\n      ctx.beginPath();\n      ctx.moveTo(padding, pointY);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      \n      // Draw point\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = theme.palette.primary.main;\n      ctx.fill();\n      ctx.strokeStyle = theme.palette.background.paper;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Label the point\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'bottom';\n      ctx.fillStyle = theme.palette.text.primary;\n      ctx.font = 'bold 12px ' + theme.typography.fontFamily;\n      ctx.fillText(\n        `Current: ${currentVolume} units, ${formatCurrency(currentVolume * profitPerUnit)}`,\n        pointX + 10,\n        pointY - 5\n      );\n    }\n    \n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme]);\n  \n  return (\n    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\n        Profit vs. Sales Volume\n      </Typography>\n      \n      {/* Canvas for line chart */}\n      <Box sx={{ position: 'relative', width: '100%', height: '220px', display: 'flex', justifyContent: 'center' }}>\n        <canvas ref={canvasRef} width={500} height={300} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n      </Box>\n      \n      {/* Current profit info */}\n      <Box sx={{ mt: 2, textAlign: 'center' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Profit per unit: <strong>{formatCurrency(profitPerUnit)}</strong>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfitVolumeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}