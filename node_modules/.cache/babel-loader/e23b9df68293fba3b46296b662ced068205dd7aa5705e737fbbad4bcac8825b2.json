{"ast":null,"code":"/**\n * MO-180 Sales Simulator Calculation Logic\n * \n * This module contains all the core calculation functions for the MO-180 Sales Simulation Tool.\n * It implements the formulas specified in the PRD document.\n */\n\n// Constants (to be moved to config file in Phase 2)\nconst INITIAL_INVESTMENT = 3780000; // JPY\nconst PRINT_SPEED = 6; // prints/hour\nconst PRINTABLE_AREA = {\n  width: 305,\n  // mm\n  height: 458 // mm\n};\n\n/**\n * Calculate the maximum number of items that can fit in a print job\n * Considers both orientations of the item and returns the maximum\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @param {number} longEdge - Long edge dimension in mm\n * @returns {number} Maximum number of items per print job\n */\nexport const calculateItemsPerPrintJob = (shortEdge, longEdge) => {\n  // Validate inputs\n  if (shortEdge <= 0 || longEdge <= 0) {\n    return 0;\n  }\n\n  // Handle case where dimensions exceed printable area\n  if (shortEdge > PRINTABLE_AREA.width && shortEdge > PRINTABLE_AREA.height) {\n    return 0;\n  }\n  if (longEdge > PRINTABLE_AREA.width && longEdge > PRINTABLE_AREA.height) {\n    return 0;\n  }\n\n  // Calculate items in first orientation (short edge along width, long edge along height)\n  const orientation1 = Math.floor(PRINTABLE_AREA.width / shortEdge) * Math.floor(PRINTABLE_AREA.height / longEdge);\n\n  // Calculate items in second orientation (short edge along height, long edge along width)\n  const orientation2 = Math.floor(PRINTABLE_AREA.width / longEdge) * Math.floor(PRINTABLE_AREA.height / shortEdge);\n\n  // Return the maximum of the two orientations\n  return Math.max(orientation1, orientation2);\n};\n\n/**\n * Calculate the monthly number of print jobs required\n * \n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Number of monthly print jobs (rounded up)\n */\nexport const calculateMonthlyPrintJobs = (monthlySalesVolume, itemsPerPrintJob) => {\n  // Handle division by zero\n  if (itemsPerPrintJob <= 0) {\n    return 0;\n  }\n\n  // Ceil to ensure enough jobs are run\n  return Math.ceil(monthlySalesVolume / itemsPerPrintJob);\n};\n\n/**\n * Calculate monthly operating hours\n * \n * @param {number} monthlyPrintJobs - Number of monthly print jobs\n * @returns {number} Operating hours per month\n */\nexport const calculateOperatingHours = monthlyPrintJobs => {\n  return monthlyPrintJobs / PRINT_SPEED;\n};\n\n/**\n * Calculate ink usage per item using the scaling formula\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @returns {Object} Ink usage in cc for White, CMYK, and Primer\n */\nexport const calculateInkUsage = shortEdge => {\n  // Calculate scaling factor based on reference point\n  const scale = Math.pow(shortEdge / 65, 2);\n\n  // Calculate ink usage based on scaling factor\n  return {\n    white: 0.04 * scale,\n    cmyk: 0.04 * scale,\n    primer: 0.01 * scale\n  };\n};\n\n/**\n * Calculate ink cost per unit\n * \n * @param {Object} inkUsage - Ink usage in cc {white, cmyk, primer}\n * @param {number} inkPricePerCC - Ink price per cc in JPY\n * @returns {number} Ink cost per unit in JPY\n */\nexport const calculateInkCostPerUnit = (inkUsage, inkPricePerCC) => {\n  const totalInkUsage = inkUsage.white + inkUsage.cmyk + inkUsage.primer;\n  return totalInkUsage * inkPricePerCC;\n};\n\n/**\n * Calculate labor cost per unit\n * \n * @param {number} laborCostPerHour - Labor cost per hour in JPY\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Labor cost per unit in JPY\n */\nexport const calculateLaborCostPerUnit = (laborCostPerHour, itemsPerPrintJob) => {\n  // Handle division by zero\n  if (itemsPerPrintJob <= 0) {\n    return 0;\n  }\n  return laborCostPerHour / PRINT_SPEED / itemsPerPrintJob;\n};\n\n/**\n * Calculate total cost per unit\n * \n * @param {number} materialCostPerUnit - Material cost per unit in JPY\n * @param {number} inkCostPerUnit - Ink cost per unit in JPY\n * @param {number} laborCostPerUnit - Labor cost per unit in JPY\n * @returns {number} Total cost per unit in JPY\n */\nexport const calculateCostPerUnit = (materialCostPerUnit, inkCostPerUnit, laborCostPerUnit) => {\n  return materialCostPerUnit + inkCostPerUnit + laborCostPerUnit;\n};\n\n/**\n * Calculate monthly sales\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly sales in JPY\n */\nexport const calculateMonthlySales = (salesPricePerUnit, monthlySalesVolume) => {\n  return salesPricePerUnit * monthlySalesVolume;\n};\n\n/**\n * Calculate monthly gross profit\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly gross profit in JPY\n */\nexport const calculateMonthlyGrossProfit = (salesPricePerUnit, costPerUnit, monthlySalesVolume) => {\n  return (salesPricePerUnit - costPerUnit) * monthlySalesVolume;\n};\n\n/**\n * Calculate gross profit margin as a percentage\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @returns {number} Gross profit margin as a percentage\n */\nexport const calculateGrossProfitMargin = (salesPricePerUnit, costPerUnit) => {\n  // Handle division by zero\n  if (salesPricePerUnit <= 0) {\n    return 0;\n  }\n  return (salesPricePerUnit - costPerUnit) / salesPricePerUnit * 100;\n};\n\n/**\n * Calculate investment payback period in months\n * \n * @param {number} monthlyGrossProfit - Monthly gross profit in JPY\n * @returns {number|string} Payback period in months or '-' if no profit\n */\nexport const calculatePaybackPeriod = monthlyGrossProfit => {\n  // Handle no profit case\n  if (monthlyGrossProfit <= 0) {\n    return '-';\n  }\n  return INITIAL_INVESTMENT / monthlyGrossProfit;\n};\n\n/**\n * Perform all calculations and return complete results\n * \n * @param {Object} inputs - All user inputs\n * @returns {Object} Complete calculation results\n */\nexport const calculateAll = inputs => {\n  const {\n    shortEdge,\n    longEdge,\n    salesPricePerUnit,\n    monthlySalesVolume,\n    materialCostPerUnit,\n    laborCostPerHour,\n    inkPricePerCC\n  } = inputs;\n\n  // Calculate intermediate values\n  const itemsPerPrintJob = calculateItemsPerPrintJob(shortEdge, longEdge);\n  const monthlyPrintJobs = calculateMonthlyPrintJobs(monthlySalesVolume, itemsPerPrintJob);\n  const operatingHours = calculateOperatingHours(monthlyPrintJobs);\n  const inkUsage = calculateInkUsage(shortEdge);\n  const inkCostPerUnit = calculateInkCostPerUnit(inkUsage, inkPricePerCC);\n  const laborCostPerUnit = calculateLaborCostPerUnit(laborCostPerHour, itemsPerPrintJob);\n\n  // Calculate final results\n  const costPerUnit = calculateCostPerUnit(materialCostPerUnit, inkCostPerUnit, laborCostPerUnit);\n  const monthlySales = calculateMonthlySales(salesPricePerUnit, monthlySalesVolume);\n  const monthlyGrossProfit = calculateMonthlyGrossProfit(salesPricePerUnit, costPerUnit, monthlySalesVolume);\n  const grossProfitMargin = calculateGrossProfitMargin(salesPricePerUnit, costPerUnit);\n  const paybackPeriod = calculatePaybackPeriod(monthlyGrossProfit);\n\n  // Format ink usage to 2 decimal places\n  const formattedInkUsage = {\n    white: parseFloat(inkUsage.white.toFixed(2)),\n    cmyk: parseFloat(inkUsage.cmyk.toFixed(2)),\n    primer: parseFloat(inkUsage.primer.toFixed(2))\n  };\n\n  // Pass original inputs back in results\n  const materialCostPerUnitValue = parseFloat(materialCostPerUnit);\n  const inkCostPerUnitValue = parseFloat(inkCostPerUnit);\n  const laborCostPerUnitValue = parseFloat(laborCostPerUnit);\n\n  // Return complete results\n  return {\n    // Input parameters (echoed back for charts and displays)\n    inputs: {\n      shortEdge,\n      longEdge,\n      salesPricePerUnit,\n      monthlySalesVolume,\n      materialCostPerUnit,\n      laborCostPerHour,\n      inkPricePerCC\n    },\n    // Calculated results\n    results: {\n      itemsPerPrintJob,\n      monthlyPrintJobs,\n      operatingHours,\n      inkUsage: formattedInkUsage,\n      inkCostPerUnit: inkCostPerUnitValue,\n      laborCostPerUnit: laborCostPerUnitValue,\n      materialCostPerUnit: materialCostPerUnitValue,\n      // Added for charts\n      costPerUnit,\n      monthlySales,\n      monthlyGrossProfit,\n      grossProfitMargin,\n      paybackPeriod,\n      // Include original inputs for convenience in chart components\n      inputs: {\n        salesPricePerUnit,\n        monthlySalesVolume\n      }\n    }\n  };\n};\n\n// Export a payback period status function for UI color coding\nexport const getPaybackStatus = paybackPeriod => {\n  if (paybackPeriod === '-') {\n    return 'no-profit';\n  } else if (paybackPeriod <= 12) {\n    return 'good';\n  } else if (paybackPeriod <= 24) {\n    return 'average';\n  } else {\n    return 'warning';\n  }\n};","map":{"version":3,"names":["INITIAL_INVESTMENT","PRINT_SPEED","PRINTABLE_AREA","width","height","calculateItemsPerPrintJob","shortEdge","longEdge","orientation1","Math","floor","orientation2","max","calculateMonthlyPrintJobs","monthlySalesVolume","itemsPerPrintJob","ceil","calculateOperatingHours","monthlyPrintJobs","calculateInkUsage","scale","pow","white","cmyk","primer","calculateInkCostPerUnit","inkUsage","inkPricePerCC","totalInkUsage","calculateLaborCostPerUnit","laborCostPerHour","calculateCostPerUnit","materialCostPerUnit","inkCostPerUnit","laborCostPerUnit","calculateMonthlySales","salesPricePerUnit","calculateMonthlyGrossProfit","costPerUnit","calculateGrossProfitMargin","calculatePaybackPeriod","monthlyGrossProfit","calculateAll","inputs","operatingHours","monthlySales","grossProfitMargin","paybackPeriod","formattedInkUsage","parseFloat","toFixed","materialCostPerUnitValue","inkCostPerUnitValue","laborCostPerUnitValue","results","getPaybackStatus"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/utils/calculations.js"],"sourcesContent":["/**\n * MO-180 Sales Simulator Calculation Logic\n * \n * This module contains all the core calculation functions for the MO-180 Sales Simulation Tool.\n * It implements the formulas specified in the PRD document.\n */\n\n// Constants (to be moved to config file in Phase 2)\nconst INITIAL_INVESTMENT = 3780000; // JPY\nconst PRINT_SPEED = 6; // prints/hour\nconst PRINTABLE_AREA = {\n  width: 305, // mm\n  height: 458, // mm\n};\n\n/**\n * Calculate the maximum number of items that can fit in a print job\n * Considers both orientations of the item and returns the maximum\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @param {number} longEdge - Long edge dimension in mm\n * @returns {number} Maximum number of items per print job\n */\nexport const calculateItemsPerPrintJob = (shortEdge, longEdge) => {\n  // Validate inputs\n  if (shortEdge <= 0 || longEdge <= 0) {\n    return 0;\n  }\n  \n  // Handle case where dimensions exceed printable area\n  if (shortEdge > PRINTABLE_AREA.width && shortEdge > PRINTABLE_AREA.height) {\n    return 0;\n  }\n  if (longEdge > PRINTABLE_AREA.width && longEdge > PRINTABLE_AREA.height) {\n    return 0;\n  }\n  \n  // Calculate items in first orientation (short edge along width, long edge along height)\n  const orientation1 = Math.floor(PRINTABLE_AREA.width / shortEdge) * \n                      Math.floor(PRINTABLE_AREA.height / longEdge);\n  \n  // Calculate items in second orientation (short edge along height, long edge along width)\n  const orientation2 = Math.floor(PRINTABLE_AREA.width / longEdge) * \n                      Math.floor(PRINTABLE_AREA.height / shortEdge);\n  \n  // Return the maximum of the two orientations\n  return Math.max(orientation1, orientation2);\n};\n\n/**\n * Calculate the monthly number of print jobs required\n * \n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Number of monthly print jobs (rounded up)\n */\nexport const calculateMonthlyPrintJobs = (monthlySalesVolume, itemsPerPrintJob) => {\n  // Handle division by zero\n  if (itemsPerPrintJob <= 0) {\n    return 0;\n  }\n  \n  // Ceil to ensure enough jobs are run\n  return Math.ceil(monthlySalesVolume / itemsPerPrintJob);\n};\n\n/**\n * Calculate monthly operating hours\n * \n * @param {number} monthlyPrintJobs - Number of monthly print jobs\n * @returns {number} Operating hours per month\n */\nexport const calculateOperatingHours = (monthlyPrintJobs) => {\n  return monthlyPrintJobs / PRINT_SPEED;\n};\n\n/**\n * Calculate ink usage per item using the scaling formula\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @returns {Object} Ink usage in cc for White, CMYK, and Primer\n */\nexport const calculateInkUsage = (shortEdge) => {\n  // Calculate scaling factor based on reference point\n  const scale = Math.pow(shortEdge / 65, 2);\n  \n  // Calculate ink usage based on scaling factor\n  return {\n    white: 0.04 * scale,\n    cmyk: 0.04 * scale,\n    primer: 0.01 * scale\n  };\n};\n\n/**\n * Calculate ink cost per unit\n * \n * @param {Object} inkUsage - Ink usage in cc {white, cmyk, primer}\n * @param {number} inkPricePerCC - Ink price per cc in JPY\n * @returns {number} Ink cost per unit in JPY\n */\nexport const calculateInkCostPerUnit = (inkUsage, inkPricePerCC) => {\n  const totalInkUsage = inkUsage.white + inkUsage.cmyk + inkUsage.primer;\n  return totalInkUsage * inkPricePerCC;\n};\n\n/**\n * Calculate labor cost per unit\n * \n * @param {number} laborCostPerHour - Labor cost per hour in JPY\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Labor cost per unit in JPY\n */\nexport const calculateLaborCostPerUnit = (laborCostPerHour, itemsPerPrintJob) => {\n  // Handle division by zero\n  if (itemsPerPrintJob <= 0) {\n    return 0;\n  }\n  \n  return (laborCostPerHour / PRINT_SPEED) / itemsPerPrintJob;\n};\n\n/**\n * Calculate total cost per unit\n * \n * @param {number} materialCostPerUnit - Material cost per unit in JPY\n * @param {number} inkCostPerUnit - Ink cost per unit in JPY\n * @param {number} laborCostPerUnit - Labor cost per unit in JPY\n * @returns {number} Total cost per unit in JPY\n */\nexport const calculateCostPerUnit = (materialCostPerUnit, inkCostPerUnit, laborCostPerUnit) => {\n  return materialCostPerUnit + inkCostPerUnit + laborCostPerUnit;\n};\n\n/**\n * Calculate monthly sales\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly sales in JPY\n */\nexport const calculateMonthlySales = (salesPricePerUnit, monthlySalesVolume) => {\n  return salesPricePerUnit * monthlySalesVolume;\n};\n\n/**\n * Calculate monthly gross profit\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly gross profit in JPY\n */\nexport const calculateMonthlyGrossProfit = (salesPricePerUnit, costPerUnit, monthlySalesVolume) => {\n  return (salesPricePerUnit - costPerUnit) * monthlySalesVolume;\n};\n\n/**\n * Calculate gross profit margin as a percentage\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @returns {number} Gross profit margin as a percentage\n */\nexport const calculateGrossProfitMargin = (salesPricePerUnit, costPerUnit) => {\n  // Handle division by zero\n  if (salesPricePerUnit <= 0) {\n    return 0;\n  }\n  \n  return ((salesPricePerUnit - costPerUnit) / salesPricePerUnit) * 100;\n};\n\n/**\n * Calculate investment payback period in months\n * \n * @param {number} monthlyGrossProfit - Monthly gross profit in JPY\n * @returns {number|string} Payback period in months or '-' if no profit\n */\nexport const calculatePaybackPeriod = (monthlyGrossProfit) => {\n  // Handle no profit case\n  if (monthlyGrossProfit <= 0) {\n    return '-';\n  }\n  \n  return INITIAL_INVESTMENT / monthlyGrossProfit;\n};\n\n/**\n * Perform all calculations and return complete results\n * \n * @param {Object} inputs - All user inputs\n * @returns {Object} Complete calculation results\n */\nexport const calculateAll = (inputs) => {\n  const {\n    shortEdge,\n    longEdge,\n    salesPricePerUnit,\n    monthlySalesVolume,\n    materialCostPerUnit,\n    laborCostPerHour,\n    inkPricePerCC\n  } = inputs;\n  \n  // Calculate intermediate values\n  const itemsPerPrintJob = calculateItemsPerPrintJob(shortEdge, longEdge);\n  const monthlyPrintJobs = calculateMonthlyPrintJobs(monthlySalesVolume, itemsPerPrintJob);\n  const operatingHours = calculateOperatingHours(monthlyPrintJobs);\n  const inkUsage = calculateInkUsage(shortEdge);\n  const inkCostPerUnit = calculateInkCostPerUnit(inkUsage, inkPricePerCC);\n  const laborCostPerUnit = calculateLaborCostPerUnit(laborCostPerHour, itemsPerPrintJob);\n  \n  // Calculate final results\n  const costPerUnit = calculateCostPerUnit(materialCostPerUnit, inkCostPerUnit, laborCostPerUnit);\n  const monthlySales = calculateMonthlySales(salesPricePerUnit, monthlySalesVolume);\n  const monthlyGrossProfit = calculateMonthlyGrossProfit(salesPricePerUnit, costPerUnit, monthlySalesVolume);\n  const grossProfitMargin = calculateGrossProfitMargin(salesPricePerUnit, costPerUnit);\n  const paybackPeriod = calculatePaybackPeriod(monthlyGrossProfit);\n  \n  // Format ink usage to 2 decimal places\n  const formattedInkUsage = {\n    white: parseFloat(inkUsage.white.toFixed(2)),\n    cmyk: parseFloat(inkUsage.cmyk.toFixed(2)),\n    primer: parseFloat(inkUsage.primer.toFixed(2))\n  };\n  \n  // Pass original inputs back in results\n  const materialCostPerUnitValue = parseFloat(materialCostPerUnit);\n  const inkCostPerUnitValue = parseFloat(inkCostPerUnit);\n  const laborCostPerUnitValue = parseFloat(laborCostPerUnit);\n  \n  // Return complete results\n  return {\n    // Input parameters (echoed back for charts and displays)\n    inputs: {\n      shortEdge,\n      longEdge,\n      salesPricePerUnit,\n      monthlySalesVolume,\n      materialCostPerUnit,\n      laborCostPerHour,\n      inkPricePerCC\n    },\n    // Calculated results\n    results: {\n      itemsPerPrintJob,\n      monthlyPrintJobs,\n      operatingHours,\n      inkUsage: formattedInkUsage,\n      inkCostPerUnit: inkCostPerUnitValue,\n      laborCostPerUnit: laborCostPerUnitValue,\n      materialCostPerUnit: materialCostPerUnitValue, // Added for charts\n      costPerUnit,\n      monthlySales,\n      monthlyGrossProfit,\n      grossProfitMargin,\n      paybackPeriod,\n      // Include original inputs for convenience in chart components\n      inputs: {\n        salesPricePerUnit,\n        monthlySalesVolume\n      }\n    }\n  };\n};\n\n// Export a payback period status function for UI color coding\nexport const getPaybackStatus = (paybackPeriod) => {\n  if (paybackPeriod === '-') {\n    return 'no-profit';\n  } else if (paybackPeriod <= 12) {\n    return 'good';\n  } else if (paybackPeriod <= 24) {\n    return 'average';\n  } else {\n    return 'warning';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}