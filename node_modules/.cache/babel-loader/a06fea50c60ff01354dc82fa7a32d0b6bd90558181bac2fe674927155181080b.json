{"ast":null,"code":"/**\n * Common formatting utilities for the application\n * Centralizes all formatting logic to avoid duplication across components\n */\n\n/**\n * Format a number with commas as thousands separators\n * @param {number} num - The number to format\n * @param {number} decimals - The number of decimal places (default: 0)\n * @param {string} language - The language code for localization (default: 'en-US')\n * @returns {string} - Formatted number\n */\nexport const formatNumber = (num, decimals = 0, language = 'en-US') => {\n  if (num === undefined || num === null || num === '') return '';\n  if (typeof num === 'string' && !isFinite(parseFloat(num))) return num;\n  const locale = language === 'ja' ? 'ja-JP' : 'en-US';\n  return Number(num).toLocaleString(locale, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  });\n};\n\n/**\n * Format a currency value\n * @param {number} amount - The amount to format\n * @param {string} language - The language code (default: 'en-US')\n * @param {string} currencySymbol - The currency symbol to use\n * @param {boolean} isEstimate - Whether to prefix with \"approx\" in Japanese (default: false)\n * @returns {string} - Formatted currency\n */\nexport const formatCurrency = (amount, language = 'en-US', currencySymbol = '¥', isEstimate = false) => {\n  if (amount === undefined || amount === null || amount === '') return '';\n  if (amount === 0) return language === 'ja' ? `0${currencySymbol === '¥' ? '円' : currencySymbol}` : `${currencySymbol} 0`;\n\n  // Use '円' symbol instead of '¥' for Japanese\n  const symbol = language === 'ja' && currencySymbol === '¥' ? '円' : currencySymbol;\n\n  // Place the currency symbol after the number for Japanese\n  if (language === 'ja') {\n    return isEstimate ? `約${formatNumber(Math.round(amount), 0, language)}${symbol}` : `${formatNumber(Math.round(amount), 0, language)}${symbol}`;\n  }\n\n  // Default format for other languages\n  return `${symbol} ${formatNumber(Math.round(amount), 0, language)}`;\n};\n\n/**\n * Format a percentage value\n * @param {number} value - The value to format as percentage \n * @param {number} decimals - The number of decimal places (default: 2)\n * @returns {string} - Formatted percentage with % symbol\n */\nexport const formatPercent = (value, decimals = 2) => {\n  if (value === undefined || value === null || value === '') return '';\n  if (isNaN(parseFloat(value))) return '0.00%';\n  return `${parseFloat(value).toFixed(decimals)}%`;\n};\n\n/**\n * Safely convert a value to a number, with fallback\n * @param {any} value - The value to convert\n * @param {number} fallback - The fallback value if conversion fails (default: 0)\n * @returns {number} - The converted number or fallback\n */\nexport const safeNumber = (value, fallback = 0) => {\n  if (value === undefined || value === null || value === '') return fallback;\n  const num = parseFloat(value);\n  return isNaN(num) ? fallback : num;\n};\n\n/**\n * Safe division that handles division by zero\n * @param {number} numerator - The numerator\n * @param {number} denominator - The denominator\n * @param {*} fallback - The fallback value if denominator is zero\n * @returns {number|*} - The division result or fallback\n */\nexport const safeDivide = (numerator, denominator, fallback = 0) => {\n  if (denominator === 0 || denominator === null || denominator === undefined) {\n    return fallback;\n  }\n  return numerator / denominator;\n};","map":{"version":3,"names":["formatNumber","num","decimals","language","undefined","isFinite","parseFloat","locale","Number","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatCurrency","amount","currencySymbol","isEstimate","symbol","Math","round","formatPercent","value","isNaN","toFixed","safeNumber","fallback","safeDivide","numerator","denominator"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/utils/formatters/index.js"],"sourcesContent":["/**\n * Common formatting utilities for the application\n * Centralizes all formatting logic to avoid duplication across components\n */\n\n/**\n * Format a number with commas as thousands separators\n * @param {number} num - The number to format\n * @param {number} decimals - The number of decimal places (default: 0)\n * @param {string} language - The language code for localization (default: 'en-US')\n * @returns {string} - Formatted number\n */\nexport const formatNumber = (num, decimals = 0, language = 'en-US') => {\n  if (num === undefined || num === null || num === '') return '';\n  if (typeof num === 'string' && !isFinite(parseFloat(num))) return num;\n  \n  const locale = language === 'ja' ? 'ja-JP' : 'en-US';\n  \n  return Number(num).toLocaleString(locale, { \n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  });\n};\n\n/**\n * Format a currency value\n * @param {number} amount - The amount to format\n * @param {string} language - The language code (default: 'en-US')\n * @param {string} currencySymbol - The currency symbol to use\n * @param {boolean} isEstimate - Whether to prefix with \"approx\" in Japanese (default: false)\n * @returns {string} - Formatted currency\n */\nexport const formatCurrency = (amount, language = 'en-US', currencySymbol = '¥', isEstimate = false) => {\n  if (amount === undefined || amount === null || amount === '') return '';\n  if (amount === 0) return language === 'ja' ? `0${currencySymbol === '¥' ? '円' : currencySymbol}` : `${currencySymbol} 0`;\n  \n  // Use '円' symbol instead of '¥' for Japanese\n  const symbol = language === 'ja' && currencySymbol === '¥' ? '円' : currencySymbol;\n  \n  // Place the currency symbol after the number for Japanese\n  if (language === 'ja') {\n    return isEstimate \n      ? `約${formatNumber(Math.round(amount), 0, language)}${symbol}` \n      : `${formatNumber(Math.round(amount), 0, language)}${symbol}`;\n  }\n  \n  // Default format for other languages\n  return `${symbol} ${formatNumber(Math.round(amount), 0, language)}`;\n};\n\n/**\n * Format a percentage value\n * @param {number} value - The value to format as percentage \n * @param {number} decimals - The number of decimal places (default: 2)\n * @returns {string} - Formatted percentage with % symbol\n */\nexport const formatPercent = (value, decimals = 2) => {\n  if (value === undefined || value === null || value === '') return '';\n  if (isNaN(parseFloat(value))) return '0.00%';\n  \n  return `${parseFloat(value).toFixed(decimals)}%`;\n};\n\n/**\n * Safely convert a value to a number, with fallback\n * @param {any} value - The value to convert\n * @param {number} fallback - The fallback value if conversion fails (default: 0)\n * @returns {number} - The converted number or fallback\n */\nexport const safeNumber = (value, fallback = 0) => {\n  if (value === undefined || value === null || value === '') return fallback;\n  \n  const num = parseFloat(value);\n  return isNaN(num) ? fallback : num;\n};\n\n/**\n * Safe division that handles division by zero\n * @param {number} numerator - The numerator\n * @param {number} denominator - The denominator\n * @param {*} fallback - The fallback value if denominator is zero\n * @returns {number|*} - The division result or fallback\n */\nexport const safeDivide = (numerator, denominator, fallback = 0) => {\n  if (denominator === 0 || denominator === null || denominator === undefined) {\n    return fallback;\n  }\n  return numerator / denominator;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}