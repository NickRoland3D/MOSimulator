{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/components/Charts/ProfitVolumeChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfitVolumeChart = ({\n  salesPricePerUnit,\n  costPerUnit,\n  currentVolume\n}) => {\n  _s();\n  var _theme$palette$cmyk2, _theme$palette$cmyk4, _theme$palette$primar;\n  const theme = useTheme();\n  const {\n    t,\n    language\n  } = useLanguage();\n  const canvasRef = useRef(null);\n  const chartInstanceRef = useRef({\n    ctx: null,\n    width: 0,\n    height: 0,\n    padding: {\n      left: 80,\n      right: 30,\n      top: 50,\n      bottom: 70\n    },\n    // Increased padding\n    maxVolume: 1000,\n    niceMaxProfit: 0,\n    yStep: 0,\n    profitPerUnit: 0,\n    currentHoverData: null // To store data for the current hover position\n  });\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  chartInstanceRef.current.profitPerUnit = profitPerUnit; // Store for use in draw functions\n\n  const formatCurrency = useCallback((amount, short = false) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\n    const currencySymbol = t('currency');\n    if (short) {\n      if (Math.abs(amount) >= 1000000) {\n        const value = (amount / 1000000).toFixed(1);\n        return language === 'ja' ? `${value}百万${currencySymbol}` : `${value}M ${currencySymbol}`;\n      } else if (Math.abs(amount) >= 1000) {\n        const value = (amount / 1000).toFixed(0); // No decimal for K to avoid clutter\n        return language === 'ja' ? `${value}千${currencySymbol}` : `${value}K ${currencySymbol}`;\n      }\n      return language === 'ja' ? `${Math.round(amount)}${currencySymbol}` : `${Math.round(amount)} ${currencySymbol}`;\n    }\n    return language === 'ja' ? `${Math.round(amount).toLocaleString('ja-JP')}${currencySymbol}` : `${currencySymbol}${Math.round(amount).toLocaleString('en-US')}`;\n  }, [t, language]);\n  const calculateNiceStep = (maxValue, targetSteps = 5) => {\n    if (maxValue <= 0) return 10000; // Default step if no profit or negative\n    const rawStep = maxValue / targetSteps;\n    const magnitude = Math.pow(10, Math.floor(Math.log10(rawStep)));\n    const mantissa = rawStep / magnitude;\n    let niceStep;\n    if (mantissa < 1.5) niceStep = 1;else if (mantissa < 3) niceStep = 2;else if (mantissa < 7) niceStep = 5;else niceStep = 10;\n    return Math.max(1, niceStep * magnitude); // Ensure step is at least 1\n  };\n  const toCanvasX = useCallback(volume => {\n    const chart = chartInstanceRef.current;\n    return chart.padding.left + volume / chart.maxVolume * (chart.width - chart.padding.left - chart.padding.right);\n  }, []);\n  const toCanvasY = useCallback(profit => {\n    const chart = chartInstanceRef.current;\n    // Handle case where niceMaxProfit might be 0 or negative\n    const effectiveMaxProfit = chart.niceMaxProfit <= 0 ? 1 : chart.niceMaxProfit;\n    const chartHeight = chart.height - chart.padding.top - chart.padding.bottom;\n    // Adjust for Y-axis starting at 0 or a negative value\n    const zeroY = chart.niceMinProfit >= 0 ? 0 : chart.niceMinProfit;\n    const totalYRange = effectiveMaxProfit - zeroY;\n    if (totalYRange <= 0) return chart.height - chart.padding.bottom; // Avoid division by zero\n\n    return chart.height - chart.padding.bottom - (profit - zeroY) / totalYRange * chartHeight;\n  }, []);\n\n  // --- Drawing Functions ---\n  const drawBackground = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      width,\n      height\n    } = chart;\n    ctx.fillStyle = '#f7f9f7'; // Very light green/grayish background\n    ctx.fillRect(0, 0, width, height);\n  }, []);\n  const drawGridAndAxes = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      width,\n      height,\n      padding,\n      niceMaxProfit,\n      niceMinProfit,\n      yStep,\n      maxVolume\n    } = chart;\n    const chartHeight = height - padding.top - padding.bottom;\n    ctx.beginPath();\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n\n    // Vertical grid lines\n    for (let i = 0; i <= maxVolume; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n\n    // Horizontal grid lines\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n      // Ensure we don't draw too many lines if yStep is very small relative to range\n      if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n        if (i % (yStep * 2) !== 0 && i !== 0) continue; // Skip some lines if too dense\n      }\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa';\n    ctx.lineWidth = 1.5;\n    ctx.moveTo(padding.left, height - padding.bottom); // X-axis\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    ctx.moveTo(padding.left, padding.top); // Y-axis\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY, formatCurrency, language]);\n  const drawLabelsAndTitles = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      width,\n      height,\n      padding,\n      niceMaxProfit,\n      niceMinProfit,\n      yStep,\n      maxVolume\n    } = chart;\n\n    // Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#555555'; // Darker for better readability\n    ctx.font = '11px sans-serif';\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n      if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n        if (i % (yStep * 2) !== 0 && i !== 0) continue;\n      }\n      const y = toCanvasY(i);\n      ctx.fillText(formatCurrency(i, true), padding.left - 10, y);\n    }\n\n    // X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    for (let i = 0; i <= maxVolume; i += maxVolume >= 500 ? 100 : 50) {\n      // Adjust step for smaller maxVolume if needed\n      const x = toCanvasX(i);\n      ctx.fillText(i.toString(), x, height - padding.bottom + 8);\n    }\n\n    // Axis titles\n    ctx.font = 'bold 12px sans-serif';\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'center';\n    ctx.fillText(t('ProfitVolumeChart.xAxisTitle', 'Monthly Sales Volume (units)'), padding.left + (width - padding.left - padding.right) / 2, height - padding.bottom + 30);\n    ctx.save();\n    ctx.translate(padding.left - 50, padding.top + (height - padding.top - padding.bottom) / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText(t('ProfitVolumeChart.yAxisTitle', 'Monthly Profit (JPY)'), 0, 0);\n    ctx.restore();\n  }, [toCanvasX, toCanvasY, formatCurrency, language, t]);\n  const drawProfitLine = useCallback(() => {\n    var _theme$palette$cmyk;\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      profitPerUnit,\n      maxVolume\n    } = chart;\n    ctx.beginPath();\n    // Use theme color, ensure theme.palette.cmyk.yellow is defined\n    ctx.strokeStyle = ((_theme$palette$cmyk = theme.palette.cmyk) === null || _theme$palette$cmyk === void 0 ? void 0 : _theme$palette$cmyk.yellow) || '#FFD700';\n    ctx.lineWidth = 2.5;\n    ctx.moveTo(toCanvasX(0), toCanvasY(0)); // Start at 0,0\n    for (let volume = 0; volume <= maxVolume; volume += 10) {\n      // Plot points for the line\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY, (_theme$palette$cmyk2 = theme.palette.cmyk) === null || _theme$palette$cmyk2 === void 0 ? void 0 : _theme$palette$cmyk2.yellow]);\n  const drawTooltipAndPoint = useCallback((volume, profit) => {\n    var _theme$palette$cmyk3;\n    const chart = chartInstanceRef.current;\n    const {\n      ctx,\n      height,\n      padding,\n      profitPerUnit\n    } = chart;\n    if (!ctx) return;\n    const pointX = toCanvasX(volume);\n    const pointY = toCanvasY(profit);\n\n    // Clear previous tooltip area (optional, if not using full redraw for hover)\n    // For simplicity in this refactor, we'll assume the main draw handles clearing.\n    // If glitches persist, a more targeted clear for the tooltip area would be needed.\n\n    // Dashed line\n    ctx.beginPath();\n    ctx.strokeStyle = '#888888';\n    ctx.setLineDash([3, 3]);\n    ctx.lineWidth = 1;\n    ctx.moveTo(pointX, height - padding.bottom);\n    ctx.lineTo(pointX, pointY);\n    ctx.moveTo(padding.left, pointY);\n    ctx.lineTo(pointX, pointY);\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Point\n    ctx.beginPath();\n    ctx.arc(pointX, pointY, 5, 0, Math.PI * 2);\n    ctx.fillStyle = ((_theme$palette$cmyk3 = theme.palette.cmyk) === null || _theme$palette$cmyk3 === void 0 ? void 0 : _theme$palette$cmyk3.yellow) || '#FFD700';\n    ctx.fill();\n    ctx.strokeStyle = '#555555';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n\n    // Tooltip\n    const tooltipText1 = `${t('Volume')}: ${volume}, ${t('Profit')}: ${formatCurrency(profit)}`;\n    // const tooltipText2 = `${t('Profit per unit')}: ${formatCurrency(profitPerUnit)}`; // Already displayed as subtitle\n\n    ctx.font = 'bold 11px sans-serif';\n    const textWidth1 = ctx.measureText(tooltipText1).width;\n    // const textWidth2 = ctx.measureText(tooltipText2).width;\n    const tooltipWidth = Math.max(textWidth1) + 20;\n    const tooltipHeight = 30; // For one line of text\n\n    let tooltipX = pointX + 15;\n    let tooltipY = pointY - 15 - tooltipHeight;\n\n    // Adjust tooltip position to stay within canvas\n    if (tooltipX + tooltipWidth > chart.width - chart.padding.right) {\n      tooltipX = pointX - 15 - tooltipWidth;\n    }\n    if (tooltipY < chart.padding.top) {\n      tooltipY = pointY + 15;\n    }\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.strokeStyle = 'rgba(100, 100, 100, 0.7)';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.roundRect(tooltipX, tooltipY, tooltipWidth, tooltipHeight, 5); // Using roundRect\n    ctx.fill();\n    ctx.stroke();\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(tooltipText1, tooltipX + 10, tooltipY + tooltipHeight / 2);\n    // ctx.fillText(tooltipText2, tooltipX + 10, tooltipY + 28); // If two lines\n  }, [toCanvasX, toCanvasY, formatCurrency, (_theme$palette$cmyk4 = theme.palette.cmyk) === null || _theme$palette$cmyk4 === void 0 ? void 0 : _theme$palette$cmyk4.yellow, t]);\n\n  // Main drawing effect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || typeof salesPricePerUnit !== 'number' || typeof costPerUnit !== 'number') {\n      // Clear canvas if data is invalid or not present\n      if (canvas) {\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      return;\n    }\n    const chart = chartInstanceRef.current;\n    chart.ctx = canvas.getContext('2d');\n    chart.width = canvas.width;\n    chart.height = canvas.height;\n    chart.profitPerUnit = salesPricePerUnit - costPerUnit;\n\n    // Calculate Y-axis scale\n    const maxPossibleProfit = chart.maxVolume * chart.profitPerUnit;\n    const minPossibleProfit = 0 * chart.profitPerUnit; // Could be negative if profitPerUnit is negative\n\n    if (chart.profitPerUnit > 0) {\n      chart.niceMinProfit = 0;\n      chart.niceMaxProfit = Math.ceil(maxPossibleProfit * 1.1 / calculateNiceStep(maxPossibleProfit * 1.1)) * calculateNiceStep(maxPossibleProfit * 1.1);\n      if (chart.niceMaxProfit <= 0) chart.niceMaxProfit = calculateNiceStep(100000); // Default if profit is tiny\n    } else {\n      // Handles zero or negative profit per unit\n      chart.niceMaxProfit = calculateNiceStep(100000); // A small positive default max\n      chart.niceMinProfit = Math.floor(minPossibleProfit * 1.1 / calculateNiceStep(Math.abs(minPossibleProfit * 1.1))) * calculateNiceStep(Math.abs(minPossibleProfit * 1.1));\n      if (chart.niceMinProfit >= 0 && minPossibleProfit < 0) chart.niceMinProfit = -calculateNiceStep(100000); // Default negative if profit is tiny negative\n      if (chart.profitPerUnit === 0) chart.niceMinProfit = 0;\n    }\n    // Ensure niceMaxProfit is always greater than niceMinProfit\n    if (chart.niceMaxProfit <= chart.niceMinProfit) {\n      chart.niceMaxProfit = chart.niceMinProfit + calculateNiceStep(Math.abs(chart.niceMinProfit) || 100000);\n    }\n    chart.yStep = calculateNiceStep(chart.niceMaxProfit - chart.niceMinProfit, 5);\n    if (chart.yStep === 0) chart.yStep = (chart.niceMaxProfit - chart.niceMinProfit) / 5 || 1;\n\n    // --- Main Draw Function (Static Elements) ---\n    const drawStaticChart = () => {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n      drawBackground();\n      drawGridAndAxes();\n      drawLabelsAndTitles();\n      drawProfitLine();\n    };\n    drawStaticChart(); // Initial draw of static elements\n\n    // Draw the point for currentVolume (if provided) on top of the static chart\n    if (typeof currentVolume === 'number') {\n      const currentProfit = currentVolume * chart.profitPerUnit;\n      // Store it for potential redraw on hover end\n      chart.currentHoverData = {\n        volume: currentVolume,\n        profit: currentProfit,\n        isCurrentVolumePoint: true\n      };\n      drawTooltipAndPoint(currentVolume, currentProfit);\n    } else {\n      chart.currentHoverData = null;\n    }\n\n    // --- Mouse Move Handler for Tooltips (More Efficient) ---\n    const handleMouseMove = e => {\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      const {\n        padding,\n        width,\n        height,\n        maxVolume,\n        profitPerUnit\n      } = chartInstanceRef.current;\n      if (mouseX >= padding.left && mouseX <= width - padding.right && mouseY >= padding.top && mouseY <= height - padding.bottom) {\n        const volume = Math.max(0, Math.min(maxVolume, Math.round((mouseX - padding.left) / (width - padding.left - padding.right) * maxVolume)));\n        const profit = volume * profitPerUnit;\n\n        // Redraw static parts, then the new hover point\n        drawStaticChart();\n        chartInstanceRef.current.currentHoverData = {\n          volume,\n          profit,\n          isCurrentVolumePoint: false\n        };\n        drawTooltipAndPoint(volume, profit);\n      } else {\n        // If mouse moves out, redraw static chart and the original currentVolume point if it exists\n        if (chartInstanceRef.current.currentHoverData && !chartInstanceRef.current.currentHoverData.isCurrentVolumePoint) {\n          drawStaticChart();\n          if (typeof currentVolume === 'number') {\n            const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n            chartInstanceRef.current.currentHoverData = {\n              volume: currentVolume,\n              profit: cvProfit,\n              isCurrentVolumePoint: true\n            };\n            drawTooltipAndPoint(currentVolume, cvProfit);\n          } else {\n            chartInstanceRef.current.currentHoverData = null;\n          }\n        }\n      }\n    };\n    canvas.addEventListener('mousemove', handleMouseMove);\n    // Optional: Add a mouseleave listener to clear the hover tooltip and redraw the currentVolume point\n    const handleMouseLeave = () => {\n      drawStaticChart();\n      if (typeof currentVolume === 'number') {\n        const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n        chartInstanceRef.current.currentHoverData = {\n          volume: currentVolume,\n          profit: cvProfit,\n          isCurrentVolumePoint: true\n        };\n        drawTooltipAndPoint(currentVolume, cvProfit);\n      } else {\n        chartInstanceRef.current.currentHoverData = null;\n      }\n    };\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, [salesPricePerUnit, costPerUnit, currentVolume, theme,\n  // theme.palette.cmyk.yellow is used\n  language, t,\n  // For localization in formatCurrency and titles\n  formatCurrency, calculateNiceStep, toCanvasX, toCanvasY,\n  // Memoized helpers\n  drawBackground, drawGridAndAxes, drawLabelsAndTitles, drawProfitLine, drawTooltipAndPoint // Memoized draw functions\n  ]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      height: 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"h3\",\n      align: \"center\",\n      gutterBottom: true,\n      sx: {\n        fontWeight: 'bold'\n      },\n      children: t('ProfitVolumeChart.title', 'Profit vs. Sales Volume')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"text.secondary\",\n      sx: {\n        mb: 1\n      },\n      children: [t('Profit per unit'), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: ((_theme$palette$primar = theme.palette.primary) === null || _theme$palette$primar === void 0 ? void 0 : _theme$palette$primar.main) || '#1976d2',\n          fontWeight: 'bold'\n        },\n        children: formatCurrency(profitPerUnit)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        width: '100%',\n        maxWidth: '600px',\n        aspectRatio: '16 / 9'\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 600 /* Base width */,\n        height: 337.5 /* Base height for 16:9 */,\n        style: {\n          display: 'block',\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfitVolumeChart, \"0F0pRmqscZ7rsFJSjuFZY8LGvTE=\", false, function () {\n  return [useTheme, useLanguage];\n});\n_c = ProfitVolumeChart;\nexport default ProfitVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","Box","Typography","useTheme","useLanguage","jsxDEV","_jsxDEV","ProfitVolumeChart","salesPricePerUnit","costPerUnit","currentVolume","_s","_theme$palette$cmyk2","_theme$palette$cmyk4","_theme$palette$primar","theme","t","language","canvasRef","chartInstanceRef","ctx","width","height","padding","left","right","top","bottom","maxVolume","niceMaxProfit","yStep","profitPerUnit","currentHoverData","current","formatCurrency","amount","short","isNaN","currencySymbol","Math","abs","value","toFixed","round","toLocaleString","calculateNiceStep","maxValue","targetSteps","rawStep","magnitude","pow","floor","log10","mantissa","niceStep","max","toCanvasX","volume","chart","toCanvasY","profit","effectiveMaxProfit","chartHeight","zeroY","niceMinProfit","totalYRange","drawBackground","fillStyle","fillRect","drawGridAndAxes","beginPath","strokeStyle","lineWidth","i","x","moveTo","lineTo","y","stroke","drawLabelsAndTitles","textAlign","textBaseline","font","fillText","toString","save","translate","rotate","PI","restore","drawProfitLine","_theme$palette$cmyk","palette","cmyk","yellow","drawTooltipAndPoint","_theme$palette$cmyk3","pointX","pointY","setLineDash","arc","fill","tooltipText1","textWidth1","measureText","tooltipWidth","tooltipHeight","tooltipX","tooltipY","roundRect","canvas","context","getContext","clearRect","maxPossibleProfit","minPossibleProfit","ceil","drawStaticChart","currentProfit","isCurrentVolumePoint","handleMouseMove","e","rect","getBoundingClientRect","mouseX","clientX","mouseY","clientY","min","cvProfit","addEventListener","handleMouseLeave","removeEventListener","sx","display","flexDirection","alignItems","children","variant","component","align","gutterBottom","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","color","mb","style","primary","main","position","maxWidth","aspectRatio","ref","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/components/Charts/ProfitVolumeChart.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { useLanguage } from '../../context/LanguageContext';\n\nconst ProfitVolumeChart = ({ salesPricePerUnit, costPerUnit, currentVolume }) => {\n  const theme = useTheme();\n  const { t, language } = useLanguage();\n  const canvasRef = useRef(null);\n  const chartInstanceRef = useRef({ \n    ctx: null, \n    width: 0, \n    height: 0, \n    padding: { left: 80, right: 30, top: 50, bottom: 70 }, // Increased padding\n    maxVolume: 1000,\n    niceMaxProfit: 0,\n    yStep: 0,\n    profitPerUnit: 0,\n    currentHoverData: null // To store data for the current hover position\n  });\n\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  chartInstanceRef.current.profitPerUnit = profitPerUnit; // Store for use in draw functions\n\n  const formatCurrency = useCallback((amount, short = false) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\n    const currencySymbol = t('currency');\n    \n    if (short) {\n      if (Math.abs(amount) >= 1000000) {\n        const value = (amount / 1000000).toFixed(1);\n        return language === 'ja' ? `${value}百万${currencySymbol}` : `${value}M ${currencySymbol}`;\n      } else if (Math.abs(amount) >= 1000) {\n        const value = (amount / 1000).toFixed(0); // No decimal for K to avoid clutter\n        return language === 'ja' ? `${value}千${currencySymbol}` : `${value}K ${currencySymbol}`;\n      }\n      return language === 'ja' ? `${Math.round(amount)}${currencySymbol}` : `${Math.round(amount)} ${currencySymbol}`;\n    }\n    return language === 'ja' ? `${Math.round(amount).toLocaleString('ja-JP')}${currencySymbol}` : `${currencySymbol}${Math.round(amount).toLocaleString('en-US')}`;\n  }, [t, language]);\n\n  const calculateNiceStep = (maxValue, targetSteps = 5) => {\n    if (maxValue <= 0) return 10000; // Default step if no profit or negative\n    const rawStep = maxValue / targetSteps;\n    const magnitude = Math.pow(10, Math.floor(Math.log10(rawStep)));\n    const mantissa = rawStep / magnitude;\n    let niceStep;\n    if (mantissa < 1.5) niceStep = 1;\n    else if (mantissa < 3) niceStep = 2;\n    else if (mantissa < 7) niceStep = 5;\n    else niceStep = 10;\n    return Math.max(1, niceStep * magnitude); // Ensure step is at least 1\n  };\n\n  const toCanvasX = useCallback((volume) => {\n    const chart = chartInstanceRef.current;\n    return chart.padding.left + (volume / chart.maxVolume) * (chart.width - chart.padding.left - chart.padding.right);\n  }, []);\n\n  const toCanvasY = useCallback((profit) => {\n    const chart = chartInstanceRef.current;\n    // Handle case where niceMaxProfit might be 0 or negative\n    const effectiveMaxProfit = chart.niceMaxProfit <= 0 ? 1 : chart.niceMaxProfit;\n    const chartHeight = chart.height - chart.padding.top - chart.padding.bottom;\n    // Adjust for Y-axis starting at 0 or a negative value\n    const zeroY = chart.niceMinProfit >= 0 ? 0 : chart.niceMinProfit;\n    const totalYRange = effectiveMaxProfit - zeroY;\n    if (totalYRange <= 0) return chart.height - chart.padding.bottom; // Avoid division by zero\n\n    return chart.height - chart.padding.bottom - ((profit - zeroY) / totalYRange) * chartHeight;\n  }, []);\n\n\n  // --- Drawing Functions ---\n  const drawBackground = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, width, height } = chart;\n    ctx.fillStyle = '#f7f9f7'; // Very light green/grayish background\n    ctx.fillRect(0, 0, width, height);\n  }, []);\n\n  const drawGridAndAxes = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, width, height, padding, niceMaxProfit, niceMinProfit, yStep, maxVolume } = chart;\n    const chartHeight = height - padding.top - padding.bottom;\n\n    ctx.beginPath();\n    ctx.strokeStyle = '#e0e0e0';\n    ctx.lineWidth = 1;\n\n    // Vertical grid lines\n    for (let i = 0; i <= maxVolume; i += 100) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n\n    // Horizontal grid lines\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n      // Ensure we don't draw too many lines if yStep is very small relative to range\n      if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n          if (i % (yStep * 2) !== 0 && i !== 0) continue; // Skip some lines if too dense\n      }\n      const y = toCanvasY(i);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#aaaaaa';\n    ctx.lineWidth = 1.5;\n    ctx.moveTo(padding.left, height - padding.bottom); // X-axis\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    ctx.moveTo(padding.left, padding.top); // Y-axis\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY, formatCurrency, language]);\n\n  const drawLabelsAndTitles = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, width, height, padding, niceMaxProfit, niceMinProfit, yStep, maxVolume } = chart;\n\n    // Y-axis labels\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#555555'; // Darker for better readability\n    ctx.font = '11px sans-serif';\n\n    for (let i = niceMinProfit; i <= niceMaxProfit; i += yStep) {\n       if ((niceMaxProfit - niceMinProfit) / yStep > 20 && i !== 0 && i !== niceMinProfit && i !== niceMaxProfit) {\n          if (i % (yStep * 2) !== 0 && i !== 0) continue;\n      }\n      const y = toCanvasY(i);\n      ctx.fillText(formatCurrency(i, true), padding.left - 10, y);\n    }\n\n    // X-axis labels\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    for (let i = 0; i <= maxVolume; i += (maxVolume >= 500 ? 100 : 50)) { // Adjust step for smaller maxVolume if needed\n      const x = toCanvasX(i);\n      ctx.fillText(i.toString(), x, height - padding.bottom + 8);\n    }\n\n    // Axis titles\n    ctx.font = 'bold 12px sans-serif';\n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'center';\n    ctx.fillText(t('ProfitVolumeChart.xAxisTitle', 'Monthly Sales Volume (units)'), \n                 padding.left + (width - padding.left - padding.right) / 2, \n                 height - padding.bottom + 30);\n\n    ctx.save();\n    ctx.translate(padding.left - 50, padding.top + (height - padding.top - padding.bottom) / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.textAlign = 'center';\n    ctx.fillText(t('ProfitVolumeChart.yAxisTitle', 'Monthly Profit (JPY)'), 0, 0);\n    ctx.restore();\n  }, [toCanvasX, toCanvasY, formatCurrency, language, t]);\n\n  const drawProfitLine = useCallback(() => {\n    const chart = chartInstanceRef.current;\n    const { ctx, profitPerUnit, maxVolume } = chart;\n\n    ctx.beginPath();\n    // Use theme color, ensure theme.palette.cmyk.yellow is defined\n    ctx.strokeStyle = theme.palette.cmyk?.yellow || '#FFD700'; \n    ctx.lineWidth = 2.5;\n    \n    ctx.moveTo(toCanvasX(0), toCanvasY(0)); // Start at 0,0\n    for (let volume = 0; volume <= maxVolume; volume += 10) { // Plot points for the line\n      const profit = volume * profitPerUnit;\n      ctx.lineTo(toCanvasX(volume), toCanvasY(profit));\n    }\n    ctx.stroke();\n  }, [toCanvasX, toCanvasY, theme.palette.cmyk?.yellow]);\n\n  const drawTooltipAndPoint = useCallback((volume, profit) => {\n    const chart = chartInstanceRef.current;\n    const { ctx, height, padding, profitPerUnit } = chart;\n    if (!ctx) return;\n\n    const pointX = toCanvasX(volume);\n    const pointY = toCanvasY(profit);\n\n    // Clear previous tooltip area (optional, if not using full redraw for hover)\n    // For simplicity in this refactor, we'll assume the main draw handles clearing.\n    // If glitches persist, a more targeted clear for the tooltip area would be needed.\n\n    // Dashed line\n    ctx.beginPath();\n    ctx.strokeStyle = '#888888';\n    ctx.setLineDash([3, 3]);\n    ctx.lineWidth = 1;\n    ctx.moveTo(pointX, height - padding.bottom);\n    ctx.lineTo(pointX, pointY);\n    ctx.moveTo(padding.left, pointY);\n    ctx.lineTo(pointX, pointY);\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Point\n    ctx.beginPath();\n    ctx.arc(pointX, pointY, 5, 0, Math.PI * 2);\n    ctx.fillStyle = theme.palette.cmyk?.yellow || '#FFD700';\n    ctx.fill();\n    ctx.strokeStyle = '#555555';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n\n    // Tooltip\n    const tooltipText1 = `${t('Volume')}: ${volume}, ${t('Profit')}: ${formatCurrency(profit)}`;\n    // const tooltipText2 = `${t('Profit per unit')}: ${formatCurrency(profitPerUnit)}`; // Already displayed as subtitle\n\n    ctx.font = 'bold 11px sans-serif';\n    const textWidth1 = ctx.measureText(tooltipText1).width;\n    // const textWidth2 = ctx.measureText(tooltipText2).width;\n    const tooltipWidth = Math.max(textWidth1) + 20;\n    const tooltipHeight = 30; // For one line of text\n    \n    let tooltipX = pointX + 15;\n    let tooltipY = pointY - 15 - tooltipHeight;\n\n    // Adjust tooltip position to stay within canvas\n    if (tooltipX + tooltipWidth > chart.width - chart.padding.right) {\n      tooltipX = pointX - 15 - tooltipWidth;\n    }\n    if (tooltipY < chart.padding.top) {\n      tooltipY = pointY + 15;\n    }\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.strokeStyle = 'rgba(100, 100, 100, 0.7)';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.roundRect(tooltipX, tooltipY, tooltipWidth, tooltipHeight, 5); // Using roundRect\n    ctx.fill();\n    ctx.stroke();\n    \n    ctx.fillStyle = '#333333';\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(tooltipText1, tooltipX + 10, tooltipY + tooltipHeight / 2);\n    // ctx.fillText(tooltipText2, tooltipX + 10, tooltipY + 28); // If two lines\n\n  }, [toCanvasX, toCanvasY, formatCurrency, theme.palette.cmyk?.yellow, t]);\n\n\n  // Main drawing effect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || typeof salesPricePerUnit !== 'number' || typeof costPerUnit !== 'number') {\n      // Clear canvas if data is invalid or not present\n      if(canvas) {\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      return;\n    }\n    \n    const chart = chartInstanceRef.current;\n    chart.ctx = canvas.getContext('2d');\n    chart.width = canvas.width;\n    chart.height = canvas.height;\n    chart.profitPerUnit = salesPricePerUnit - costPerUnit;\n\n    // Calculate Y-axis scale\n    const maxPossibleProfit = chart.maxVolume * chart.profitPerUnit;\n    const minPossibleProfit = 0 * chart.profitPerUnit; // Could be negative if profitPerUnit is negative\n\n    if (chart.profitPerUnit > 0) {\n        chart.niceMinProfit = 0;\n        chart.niceMaxProfit = Math.ceil((maxPossibleProfit * 1.1) / calculateNiceStep(maxPossibleProfit * 1.1)) * calculateNiceStep(maxPossibleProfit * 1.1);\n        if (chart.niceMaxProfit <=0) chart.niceMaxProfit = calculateNiceStep(100000); // Default if profit is tiny\n    } else { // Handles zero or negative profit per unit\n        chart.niceMaxProfit = calculateNiceStep(100000); // A small positive default max\n        chart.niceMinProfit = Math.floor((minPossibleProfit * 1.1) / calculateNiceStep(Math.abs(minPossibleProfit * 1.1))) * calculateNiceStep(Math.abs(minPossibleProfit * 1.1));\n        if (chart.niceMinProfit >=0 && minPossibleProfit < 0) chart.niceMinProfit = -calculateNiceStep(100000); // Default negative if profit is tiny negative\n        if (chart.profitPerUnit === 0) chart.niceMinProfit = 0;\n    }\n    // Ensure niceMaxProfit is always greater than niceMinProfit\n    if (chart.niceMaxProfit <= chart.niceMinProfit) {\n        chart.niceMaxProfit = chart.niceMinProfit + calculateNiceStep(Math.abs(chart.niceMinProfit) || 100000);\n    }\n\n    chart.yStep = calculateNiceStep(chart.niceMaxProfit - chart.niceMinProfit, 5);\n    if (chart.yStep === 0) chart.yStep = (chart.niceMaxProfit - chart.niceMinProfit) / 5 || 1;\n\n\n    // --- Main Draw Function (Static Elements) ---\n    const drawStaticChart = () => {\n        chart.ctx.clearRect(0, 0, chart.width, chart.height);\n        drawBackground();\n        drawGridAndAxes();\n        drawLabelsAndTitles();\n        drawProfitLine();\n    };\n\n    drawStaticChart(); // Initial draw of static elements\n\n    // Draw the point for currentVolume (if provided) on top of the static chart\n    if (typeof currentVolume === 'number') {\n        const currentProfit = currentVolume * chart.profitPerUnit;\n        // Store it for potential redraw on hover end\n        chart.currentHoverData = { volume: currentVolume, profit: currentProfit, isCurrentVolumePoint: true };\n        drawTooltipAndPoint(currentVolume, currentProfit);\n    } else {\n        chart.currentHoverData = null;\n    }\n\n    // --- Mouse Move Handler for Tooltips (More Efficient) ---\n    const handleMouseMove = (e) => {\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      const { padding, width, height, maxVolume, profitPerUnit } = chartInstanceRef.current;\n\n      if (mouseX >= padding.left && mouseX <= width - padding.right &&\n          mouseY >= padding.top && mouseY <= height - padding.bottom) {\n        \n        const volume = Math.max(0, Math.min(maxVolume, Math.round(((mouseX - padding.left) / (width - padding.left - padding.right)) * maxVolume)));\n        const profit = volume * profitPerUnit;\n\n        // Redraw static parts, then the new hover point\n        drawStaticChart(); \n        chartInstanceRef.current.currentHoverData = { volume, profit, isCurrentVolumePoint: false };\n        drawTooltipAndPoint(volume, profit);\n\n      } else {\n        // If mouse moves out, redraw static chart and the original currentVolume point if it exists\n        if (chartInstanceRef.current.currentHoverData && !chartInstanceRef.current.currentHoverData.isCurrentVolumePoint) {\n            drawStaticChart();\n            if (typeof currentVolume === 'number') {\n                const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n                chartInstanceRef.current.currentHoverData = { volume: currentVolume, profit: cvProfit, isCurrentVolumePoint: true };\n                drawTooltipAndPoint(currentVolume, cvProfit);\n            } else {\n                chartInstanceRef.current.currentHoverData = null;\n            }\n        }\n      }\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n    // Optional: Add a mouseleave listener to clear the hover tooltip and redraw the currentVolume point\n    const handleMouseLeave = () => {\n        drawStaticChart();\n        if (typeof currentVolume === 'number') {\n            const cvProfit = currentVolume * chartInstanceRef.current.profitPerUnit;\n            chartInstanceRef.current.currentHoverData = { volume: currentVolume, profit: cvProfit, isCurrentVolumePoint: true };\n            drawTooltipAndPoint(currentVolume, cvProfit);\n        } else {\n            chartInstanceRef.current.currentHoverData = null;\n        }\n    };\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n\n  }, [\n    salesPricePerUnit, \n    costPerUnit, \n    currentVolume, \n    theme, // theme.palette.cmyk.yellow is used\n    language, t, // For localization in formatCurrency and titles\n    formatCurrency, calculateNiceStep, toCanvasX, toCanvasY, // Memoized helpers\n    drawBackground, drawGridAndAxes, drawLabelsAndTitles, drawProfitLine, drawTooltipAndPoint // Memoized draw functions\n  ]);\n  \n  return (\n    <Box sx={{ width: '100%', height: 'auto', display: 'flex', flexDirection: 'column', alignItems: 'center', padding: 2 }}>\n      <Typography variant=\"h6\" component=\"h3\" align=\"center\" gutterBottom sx={{ fontWeight: 'bold' }}>\n        {t('ProfitVolumeChart.title', 'Profit vs. Sales Volume')}\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n        {t('Profit per unit')}: <span style={{ color: theme.palette.primary?.main || '#1976d2', fontWeight: 'bold' }}>{formatCurrency(profitPerUnit)}</span>\n      </Typography>\n      \n      <Box sx={{ position: 'relative', width: '100%', maxWidth: '600px', aspectRatio: '16 / 9' }}> {/* Aspect ratio for responsiveness */}\n        <canvas \n            ref={canvasRef} \n            width={600}  /* Base width */\n            height={337.5} /* Base height for 16:9 */\n            style={{ display: 'block', width: '100%', height: '100%'}} \n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfitVolumeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}