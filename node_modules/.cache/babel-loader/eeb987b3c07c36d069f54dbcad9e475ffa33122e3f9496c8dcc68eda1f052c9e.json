{"ast":null,"code":"/**\n * MO-180 Sales Simulator Calculation Service\n * \n * This module contains all the core calculation functions for the MO-180 Sales Simulation Tool.\n */\n\nimport { PRINTER_SPECIFICATIONS, UI_CONSTANTS } from '../config/constants';\nimport { safeNumber, safeDivide } from '../utils/formatters';\n\n// Get printer constants from configuration\nconst {\n  printSpeed: PRINT_SPEED,\n  printableArea: PRINTABLE_AREA\n} = PRINTER_SPECIFICATIONS;\nconst {\n  paybackThresholds\n} = UI_CONSTANTS;\n\n/**\n * Calculate the maximum number of items that can fit in a print job\n * Considers both orientations of the item and returns the maximum\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @param {number} longEdge - Long edge dimension in mm\n * @returns {number} Maximum number of items per print job\n */\nexport const calculateItemsPerPrintJob = (shortEdge, longEdge) => {\n  // Convert inputs to safe numbers\n  const safeShortEdge = safeNumber(shortEdge);\n  const safeLongEdge = safeNumber(longEdge);\n\n  // Validate inputs\n  if (safeShortEdge <= 0 || safeLongEdge <= 0) {\n    return 0;\n  }\n\n  // Handle case where dimensions exceed printable area\n  if (safeShortEdge > PRINTABLE_AREA.width && safeShortEdge > PRINTABLE_AREA.height || safeLongEdge > PRINTABLE_AREA.width && safeLongEdge > PRINTABLE_AREA.height) {\n    return 0;\n  }\n\n  // Calculate items in first orientation (short edge along width, long edge along height)\n  const orientation1 = Math.floor(PRINTABLE_AREA.width / safeShortEdge) * Math.floor(PRINTABLE_AREA.height / safeLongEdge);\n\n  // Calculate items in second orientation (short edge along height, long edge along width)\n  const orientation2 = Math.floor(PRINTABLE_AREA.width / safeLongEdge) * Math.floor(PRINTABLE_AREA.height / safeShortEdge);\n\n  // Return the maximum of the two orientations\n  return Math.max(orientation1, orientation2);\n};\n\n/**\n * Calculate the monthly number of print jobs required\n * \n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Number of monthly print jobs (rounded up)\n */\nexport const calculateMonthlyPrintJobs = (monthlySalesVolume, itemsPerPrintJob) => {\n  // Convert inputs to safe numbers\n  const safeVolume = safeNumber(monthlySalesVolume);\n  const safeItems = safeNumber(itemsPerPrintJob);\n\n  // Handle division by zero or invalid inputs\n  if (safeItems <= 0) {\n    return 0;\n  }\n\n  // Ceil to ensure enough jobs are run\n  return Math.ceil(safeVolume / safeItems);\n};\n\n/**\n * Calculate monthly operating hours\n * \n * @param {number} monthlyPrintJobs - Number of monthly print jobs\n * @returns {number} Operating hours per month\n */\nexport const calculateOperatingHours = monthlyPrintJobs => {\n  // Convert input to safe number and handle division by zero\n  return safeDivide(safeNumber(monthlyPrintJobs), PRINT_SPEED);\n};\n\n/**\n * Calculate ink usage per item using the scaling formula\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @returns {Object} Ink usage in cc for White, CMYK, and Primer\n */\nexport const calculateInkUsage = shortEdge => {\n  // Convert input to safe number\n  const safeShortEdge = safeNumber(shortEdge, 1); // Use 1 as fallback to avoid division by zero\n\n  // Calculate scaling factor based on reference point (avoid division by zero)\n  const scale = Math.pow(safeShortEdge / 65, 2);\n\n  // Calculate ink usage based on scaling factor\n  return {\n    white: 0.04 * scale,\n    cmyk: 0.04 * scale,\n    primer: 0.01 * scale\n  };\n};\n\n/**\n * Calculate ink cost per unit\n * \n * @param {Object} inkUsage - Ink usage in cc {white, cmyk, primer}\n * @param {number} inkPricePerCC - Ink price per cc in JPY\n * @returns {number} Ink cost per unit in JPY\n */\nexport const calculateInkCostPerUnit = (inkUsage, inkPricePerCC) => {\n  if (!inkUsage || typeof inkUsage !== 'object') {\n    return 0;\n  }\n\n  // Convert inputs to safe numbers\n  const safeWhite = safeNumber(inkUsage.white);\n  const safeCMYK = safeNumber(inkUsage.cmyk);\n  const safePrimer = safeNumber(inkUsage.primer);\n  const safePrice = safeNumber(inkPricePerCC);\n  const totalInkUsage = safeWhite + safeCMYK + safePrimer;\n  return totalInkUsage * safePrice;\n};\n\n/**\n * Calculate labor cost per unit\n * \n * @param {number} laborCostPerHour - Labor cost per hour in JPY\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Labor cost per unit in JPY\n */\nexport const calculateLaborCostPerUnit = (laborCostPerHour, itemsPerPrintJob) => {\n  // Convert inputs to safe numbers\n  const safeLaborCost = safeNumber(laborCostPerHour);\n  const safeItems = safeNumber(itemsPerPrintJob);\n\n  // Use safe division to handle division by zero\n  const printJobCost = safeDivide(safeLaborCost, PRINT_SPEED);\n  return safeDivide(printJobCost, safeItems);\n};\n\n/**\n * Calculate total cost per unit\n * \n * @param {number} materialCostPerUnit - Material cost per unit in JPY\n * @param {number} inkCostPerUnit - Ink cost per unit in JPY\n * @param {number} laborCostPerUnit - Labor cost per unit in JPY\n * @returns {number} Total cost per unit in JPY\n */\nexport const calculateCostPerUnit = (materialCostPerUnit, inkCostPerUnit, laborCostPerUnit) => {\n  // Convert inputs to safe numbers\n  const safeMaterialCost = safeNumber(materialCostPerUnit);\n  const safeInkCost = safeNumber(inkCostPerUnit);\n  const safeLaborCost = safeNumber(laborCostPerUnit);\n  return safeMaterialCost + safeInkCost + safeLaborCost;\n};\n\n/**\n * Calculate monthly sales\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly sales in JPY\n */\nexport const calculateMonthlySales = (salesPricePerUnit, monthlySalesVolume) => {\n  // Convert inputs to safe numbers\n  const safePrice = safeNumber(salesPricePerUnit);\n  const safeVolume = safeNumber(monthlySalesVolume);\n  return safePrice * safeVolume;\n};\n\n/**\n * Calculate monthly gross profit\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly gross profit in JPY\n */\nexport const calculateMonthlyGrossProfit = (salesPricePerUnit, costPerUnit, monthlySalesVolume) => {\n  // Convert inputs to safe numbers\n  const safePrice = safeNumber(salesPricePerUnit);\n  const safeCost = safeNumber(costPerUnit);\n  const safeVolume = safeNumber(monthlySalesVolume);\n  return (safePrice - safeCost) * safeVolume;\n};\n\n/**\n * Calculate gross profit margin as a percentage\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @returns {number} Gross profit margin as a percentage\n */\nexport const calculateGrossProfitMargin = (salesPricePerUnit, costPerUnit) => {\n  // Convert inputs to safe numbers\n  const safePrice = safeNumber(salesPricePerUnit);\n  const safeCost = safeNumber(costPerUnit);\n\n  // Handle division by zero using safe division\n  return safeDivide(safePrice - safeCost, safePrice, 0) * 100;\n};\n\n/**\n * Calculate investment payback period in months\n * \n * @param {number} monthlyGrossProfit - Monthly gross profit in JPY\n * @param {number} initialInvestment - Initial investment amount in JPY\n * @returns {number|string} Payback period in months or '-' if no profit\n */\nexport const calculatePaybackPeriod = (monthlyGrossProfit, initialInvestment) => {\n  // Convert inputs to safe numbers\n  const safeProfit = safeNumber(monthlyGrossProfit);\n  const safeInvestment = safeNumber(initialInvestment);\n\n  // Handle no profit case\n  if (safeProfit <= 0) {\n    return '-';\n  }\n  return safeDivide(safeInvestment, safeProfit, '-');\n};\n\n/**\n * Perform all calculations and return complete results\n * \n * @param {Object} inputs - All user inputs\n * @returns {Object} Complete calculation results\n */\nexport const calculateResults = inputs => {\n  // Performance tracking\n  const startTime = performance.now();\n\n  // Handle null or undefined inputs\n  if (!inputs) {\n    console.error('Invalid inputs provided to calculation service');\n    return null;\n  }\n  const {\n    shortEdge,\n    longEdge,\n    salesPricePerUnit,\n    monthlySalesVolume,\n    materialCostPerUnit,\n    laborCostPerHour,\n    inkPricePerCC,\n    initialInvestment = PRINTER_SPECIFICATIONS.initialInvestment // Use default if not provided\n  } = inputs;\n  try {\n    // Calculate intermediate values\n    const itemsPerPrintJob = calculateItemsPerPrintJob(shortEdge, longEdge);\n    const monthlyPrintJobs = calculateMonthlyPrintJobs(monthlySalesVolume, itemsPerPrintJob);\n    const operatingHours = calculateOperatingHours(monthlyPrintJobs);\n    const inkUsage = calculateInkUsage(shortEdge);\n    const inkCostPerUnit = calculateInkCostPerUnit(inkUsage, inkPricePerCC);\n    const laborCostPerUnit = calculateLaborCostPerUnit(laborCostPerHour, itemsPerPrintJob);\n\n    // Calculate final results\n    const costPerUnit = calculateCostPerUnit(materialCostPerUnit, inkCostPerUnit, laborCostPerUnit);\n    const monthlySales = calculateMonthlySales(salesPricePerUnit, monthlySalesVolume);\n    const monthlyGrossProfit = calculateMonthlyGrossProfit(salesPricePerUnit, costPerUnit, monthlySalesVolume);\n    const grossProfitMargin = calculateGrossProfitMargin(salesPricePerUnit, costPerUnit);\n    const paybackPeriod = calculatePaybackPeriod(monthlyGrossProfit, initialInvestment);\n\n    // Format ink usage to 2 decimal places\n    const formattedInkUsage = {\n      white: parseFloat(inkUsage.white.toFixed(2)),\n      cmyk: parseFloat(inkUsage.cmyk.toFixed(2)),\n      primer: parseFloat(inkUsage.primer.toFixed(2))\n    };\n\n    // Log performance\n    const endTime = performance.now();\n    console.log(`Calculation completed in ${(endTime - startTime).toFixed(2)}ms`);\n\n    // Pass original inputs back in results for chart components and other uses\n    return {\n      itemsPerPrintJob,\n      monthlyPrintJobs,\n      operatingHours,\n      inkUsage: formattedInkUsage,\n      inkCostPerUnit,\n      laborCostPerUnit,\n      materialCostPerUnit,\n      costPerUnit,\n      monthlySales,\n      monthlyGrossProfit,\n      grossProfitMargin,\n      paybackPeriod,\n      initialInvestment,\n      // Include the initial investment value\n      inputs // Include original inputs\n    };\n  } catch (error) {\n    console.error('Error in calculation service:', error);\n    // Return default/fallback values in case of error\n    return {\n      itemsPerPrintJob: 0,\n      monthlyPrintJobs: 0,\n      operatingHours: 0,\n      inkUsage: {\n        white: 0,\n        cmyk: 0,\n        primer: 0\n      },\n      inkCostPerUnit: 0,\n      laborCostPerUnit: 0,\n      materialCostPerUnit: safeNumber(materialCostPerUnit),\n      costPerUnit: safeNumber(materialCostPerUnit),\n      monthlySales: 0,\n      monthlyGrossProfit: 0,\n      grossProfitMargin: 0,\n      paybackPeriod: '-',\n      initialInvestment: safeNumber(initialInvestment),\n      inputs\n    };\n  }\n};\n\n/**\n * Get payback period status for UI color coding\n * @param {number|string} paybackPeriod - Payback period in months or '-' for no profit\n * @returns {string} - Status code ('good', 'average', 'warning', or 'no-profit')\n */\nexport const getPaybackStatus = paybackPeriod => {\n  if (paybackPeriod === '-' || paybackPeriod === undefined || paybackPeriod === null) {\n    return 'no-profit';\n  } else if (paybackPeriod <= paybackThresholds.good) {\n    return 'good';\n  } else if (paybackPeriod <= paybackThresholds.average) {\n    return 'average';\n  } else {\n    return 'warning';\n  }\n};","map":{"version":3,"names":["PRINTER_SPECIFICATIONS","UI_CONSTANTS","safeNumber","safeDivide","printSpeed","PRINT_SPEED","printableArea","PRINTABLE_AREA","paybackThresholds","calculateItemsPerPrintJob","shortEdge","longEdge","safeShortEdge","safeLongEdge","width","height","orientation1","Math","floor","orientation2","max","calculateMonthlyPrintJobs","monthlySalesVolume","itemsPerPrintJob","safeVolume","safeItems","ceil","calculateOperatingHours","monthlyPrintJobs","calculateInkUsage","scale","pow","white","cmyk","primer","calculateInkCostPerUnit","inkUsage","inkPricePerCC","safeWhite","safeCMYK","safePrimer","safePrice","totalInkUsage","calculateLaborCostPerUnit","laborCostPerHour","safeLaborCost","printJobCost","calculateCostPerUnit","materialCostPerUnit","inkCostPerUnit","laborCostPerUnit","safeMaterialCost","safeInkCost","calculateMonthlySales","salesPricePerUnit","calculateMonthlyGrossProfit","costPerUnit","safeCost","calculateGrossProfitMargin","calculatePaybackPeriod","monthlyGrossProfit","initialInvestment","safeProfit","safeInvestment","calculateResults","inputs","startTime","performance","now","console","error","operatingHours","monthlySales","grossProfitMargin","paybackPeriod","formattedInkUsage","parseFloat","toFixed","endTime","log","getPaybackStatus","undefined","good","average"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/services/calculationService.js"],"sourcesContent":["/**\n * MO-180 Sales Simulator Calculation Service\n * \n * This module contains all the core calculation functions for the MO-180 Sales Simulation Tool.\n */\n\nimport { PRINTER_SPECIFICATIONS, UI_CONSTANTS } from '../config/constants';\nimport { safeNumber, safeDivide } from '../utils/formatters';\n\n// Get printer constants from configuration\nconst { printSpeed: PRINT_SPEED, printableArea: PRINTABLE_AREA } = PRINTER_SPECIFICATIONS;\nconst { paybackThresholds } = UI_CONSTANTS;\n\n/**\n * Calculate the maximum number of items that can fit in a print job\n * Considers both orientations of the item and returns the maximum\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @param {number} longEdge - Long edge dimension in mm\n * @returns {number} Maximum number of items per print job\n */\nexport const calculateItemsPerPrintJob = (shortEdge, longEdge) => {\n  // Convert inputs to safe numbers\n  const safeShortEdge = safeNumber(shortEdge);\n  const safeLongEdge = safeNumber(longEdge);\n  \n  // Validate inputs\n  if (safeShortEdge <= 0 || safeLongEdge <= 0) {\n    return 0;\n  }\n  \n  // Handle case where dimensions exceed printable area\n  if ((safeShortEdge > PRINTABLE_AREA.width && safeShortEdge > PRINTABLE_AREA.height) ||\n      (safeLongEdge > PRINTABLE_AREA.width && safeLongEdge > PRINTABLE_AREA.height)) {\n    return 0;\n  }\n  \n  // Calculate items in first orientation (short edge along width, long edge along height)\n  const orientation1 = Math.floor(PRINTABLE_AREA.width / safeShortEdge) * \n                      Math.floor(PRINTABLE_AREA.height / safeLongEdge);\n  \n  // Calculate items in second orientation (short edge along height, long edge along width)\n  const orientation2 = Math.floor(PRINTABLE_AREA.width / safeLongEdge) * \n                      Math.floor(PRINTABLE_AREA.height / safeShortEdge);\n  \n  // Return the maximum of the two orientations\n  return Math.max(orientation1, orientation2);\n};\n\n/**\n * Calculate the monthly number of print jobs required\n * \n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Number of monthly print jobs (rounded up)\n */\nexport const calculateMonthlyPrintJobs = (monthlySalesVolume, itemsPerPrintJob) => {\n  // Convert inputs to safe numbers\n  const safeVolume = safeNumber(monthlySalesVolume);\n  const safeItems = safeNumber(itemsPerPrintJob);\n  \n  // Handle division by zero or invalid inputs\n  if (safeItems <= 0) {\n    return 0;\n  }\n  \n  // Ceil to ensure enough jobs are run\n  return Math.ceil(safeVolume / safeItems);\n};\n\n/**\n * Calculate monthly operating hours\n * \n * @param {number} monthlyPrintJobs - Number of monthly print jobs\n * @returns {number} Operating hours per month\n */\nexport const calculateOperatingHours = (monthlyPrintJobs) => {\n  // Convert input to safe number and handle division by zero\n  return safeDivide(safeNumber(monthlyPrintJobs), PRINT_SPEED);\n};\n\n/**\n * Calculate ink usage per item using the scaling formula\n * \n * @param {number} shortEdge - Short edge dimension in mm\n * @returns {Object} Ink usage in cc for White, CMYK, and Primer\n */\nexport const calculateInkUsage = (shortEdge) => {\n  // Convert input to safe number\n  const safeShortEdge = safeNumber(shortEdge, 1); // Use 1 as fallback to avoid division by zero\n  \n  // Calculate scaling factor based on reference point (avoid division by zero)\n  const scale = Math.pow(safeShortEdge / 65, 2);\n  \n  // Calculate ink usage based on scaling factor\n  return {\n    white: 0.04 * scale,\n    cmyk: 0.04 * scale,\n    primer: 0.01 * scale\n  };\n};\n\n/**\n * Calculate ink cost per unit\n * \n * @param {Object} inkUsage - Ink usage in cc {white, cmyk, primer}\n * @param {number} inkPricePerCC - Ink price per cc in JPY\n * @returns {number} Ink cost per unit in JPY\n */\nexport const calculateInkCostPerUnit = (inkUsage, inkPricePerCC) => {\n  if (!inkUsage || typeof inkUsage !== 'object') {\n    return 0;\n  }\n  \n  // Convert inputs to safe numbers\n  const safeWhite = safeNumber(inkUsage.white);\n  const safeCMYK = safeNumber(inkUsage.cmyk);\n  const safePrimer = safeNumber(inkUsage.primer);\n  const safePrice = safeNumber(inkPricePerCC);\n  \n  const totalInkUsage = safeWhite + safeCMYK + safePrimer;\n  return totalInkUsage * safePrice;\n};\n\n/**\n * Calculate labor cost per unit\n * \n * @param {number} laborCostPerHour - Labor cost per hour in JPY\n * @param {number} itemsPerPrintJob - Number of items per print job\n * @returns {number} Labor cost per unit in JPY\n */\nexport const calculateLaborCostPerUnit = (laborCostPerHour, itemsPerPrintJob) => {\n  // Convert inputs to safe numbers\n  const safeLaborCost = safeNumber(laborCostPerHour);\n  const safeItems = safeNumber(itemsPerPrintJob);\n  \n  // Use safe division to handle division by zero\n  const printJobCost = safeDivide(safeLaborCost, PRINT_SPEED);\n  return safeDivide(printJobCost, safeItems);\n};\n\n/**\n * Calculate total cost per unit\n * \n * @param {number} materialCostPerUnit - Material cost per unit in JPY\n * @param {number} inkCostPerUnit - Ink cost per unit in JPY\n * @param {number} laborCostPerUnit - Labor cost per unit in JPY\n * @returns {number} Total cost per unit in JPY\n */\nexport const calculateCostPerUnit = (materialCostPerUnit, inkCostPerUnit, laborCostPerUnit) => {\n  // Convert inputs to safe numbers\n  const safeMaterialCost = safeNumber(materialCostPerUnit);\n  const safeInkCost = safeNumber(inkCostPerUnit);\n  const safeLaborCost = safeNumber(laborCostPerUnit);\n  \n  return safeMaterialCost + safeInkCost + safeLaborCost;\n};\n\n/**\n * Calculate monthly sales\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly sales in JPY\n */\nexport const calculateMonthlySales = (salesPricePerUnit, monthlySalesVolume) => {\n  // Convert inputs to safe numbers\n  const safePrice = safeNumber(salesPricePerUnit);\n  const safeVolume = safeNumber(monthlySalesVolume);\n  \n  return safePrice * safeVolume;\n};\n\n/**\n * Calculate monthly gross profit\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @param {number} monthlySalesVolume - Monthly sales volume in units\n * @returns {number} Monthly gross profit in JPY\n */\nexport const calculateMonthlyGrossProfit = (salesPricePerUnit, costPerUnit, monthlySalesVolume) => {\n  // Convert inputs to safe numbers\n  const safePrice = safeNumber(salesPricePerUnit);\n  const safeCost = safeNumber(costPerUnit);\n  const safeVolume = safeNumber(monthlySalesVolume);\n  \n  return (safePrice - safeCost) * safeVolume;\n};\n\n/**\n * Calculate gross profit margin as a percentage\n * \n * @param {number} salesPricePerUnit - Sales price per unit in JPY\n * @param {number} costPerUnit - Total cost per unit in JPY\n * @returns {number} Gross profit margin as a percentage\n */\nexport const calculateGrossProfitMargin = (salesPricePerUnit, costPerUnit) => {\n  // Convert inputs to safe numbers\n  const safePrice = safeNumber(salesPricePerUnit);\n  const safeCost = safeNumber(costPerUnit);\n  \n  // Handle division by zero using safe division\n  return safeDivide((safePrice - safeCost), safePrice, 0) * 100;\n};\n\n/**\n * Calculate investment payback period in months\n * \n * @param {number} monthlyGrossProfit - Monthly gross profit in JPY\n * @param {number} initialInvestment - Initial investment amount in JPY\n * @returns {number|string} Payback period in months or '-' if no profit\n */\nexport const calculatePaybackPeriod = (monthlyGrossProfit, initialInvestment) => {\n  // Convert inputs to safe numbers\n  const safeProfit = safeNumber(monthlyGrossProfit);\n  const safeInvestment = safeNumber(initialInvestment);\n  \n  // Handle no profit case\n  if (safeProfit <= 0) {\n    return '-';\n  }\n  \n  return safeDivide(safeInvestment, safeProfit, '-');\n};\n\n/**\n * Perform all calculations and return complete results\n * \n * @param {Object} inputs - All user inputs\n * @returns {Object} Complete calculation results\n */\nexport const calculateResults = (inputs) => {\n  // Performance tracking\n  const startTime = performance.now();\n  \n  // Handle null or undefined inputs\n  if (!inputs) {\n    console.error('Invalid inputs provided to calculation service');\n    return null;\n  }\n  \n  const {\n    shortEdge,\n    longEdge,\n    salesPricePerUnit,\n    monthlySalesVolume,\n    materialCostPerUnit,\n    laborCostPerHour,\n    inkPricePerCC,\n    initialInvestment = PRINTER_SPECIFICATIONS.initialInvestment // Use default if not provided\n  } = inputs;\n  \n  try {\n    // Calculate intermediate values\n    const itemsPerPrintJob = calculateItemsPerPrintJob(shortEdge, longEdge);\n    const monthlyPrintJobs = calculateMonthlyPrintJobs(monthlySalesVolume, itemsPerPrintJob);\n    const operatingHours = calculateOperatingHours(monthlyPrintJobs);\n    const inkUsage = calculateInkUsage(shortEdge);\n    const inkCostPerUnit = calculateInkCostPerUnit(inkUsage, inkPricePerCC);\n    const laborCostPerUnit = calculateLaborCostPerUnit(laborCostPerHour, itemsPerPrintJob);\n    \n    // Calculate final results\n    const costPerUnit = calculateCostPerUnit(materialCostPerUnit, inkCostPerUnit, laborCostPerUnit);\n    const monthlySales = calculateMonthlySales(salesPricePerUnit, monthlySalesVolume);\n    const monthlyGrossProfit = calculateMonthlyGrossProfit(salesPricePerUnit, costPerUnit, monthlySalesVolume);\n    const grossProfitMargin = calculateGrossProfitMargin(salesPricePerUnit, costPerUnit);\n    const paybackPeriod = calculatePaybackPeriod(monthlyGrossProfit, initialInvestment);\n    \n    // Format ink usage to 2 decimal places\n    const formattedInkUsage = {\n      white: parseFloat(inkUsage.white.toFixed(2)),\n      cmyk: parseFloat(inkUsage.cmyk.toFixed(2)),\n      primer: parseFloat(inkUsage.primer.toFixed(2))\n    };\n    \n    // Log performance\n    const endTime = performance.now();\n    console.log(`Calculation completed in ${(endTime - startTime).toFixed(2)}ms`);\n    \n    // Pass original inputs back in results for chart components and other uses\n    return {\n      itemsPerPrintJob,\n      monthlyPrintJobs,\n      operatingHours,\n      inkUsage: formattedInkUsage,\n      inkCostPerUnit,\n      laborCostPerUnit,\n      materialCostPerUnit,\n      costPerUnit,\n      monthlySales,\n      monthlyGrossProfit,\n      grossProfitMargin,\n      paybackPeriod,\n      initialInvestment, // Include the initial investment value\n      inputs // Include original inputs\n    };\n  } catch (error) {\n    console.error('Error in calculation service:', error);\n    // Return default/fallback values in case of error\n    return {\n      itemsPerPrintJob: 0,\n      monthlyPrintJobs: 0,\n      operatingHours: 0,\n      inkUsage: { white: 0, cmyk: 0, primer: 0 },\n      inkCostPerUnit: 0,\n      laborCostPerUnit: 0,\n      materialCostPerUnit: safeNumber(materialCostPerUnit),\n      costPerUnit: safeNumber(materialCostPerUnit),\n      monthlySales: 0,\n      monthlyGrossProfit: 0,\n      grossProfitMargin: 0,\n      paybackPeriod: '-',\n      initialInvestment: safeNumber(initialInvestment),\n      inputs\n    };\n  }\n};\n\n/**\n * Get payback period status for UI color coding\n * @param {number|string} paybackPeriod - Payback period in months or '-' for no profit\n * @returns {string} - Status code ('good', 'average', 'warning', or 'no-profit')\n */\nexport const getPaybackStatus = (paybackPeriod) => {\n  if (paybackPeriod === '-' || paybackPeriod === undefined || paybackPeriod === null) {\n    return 'no-profit';\n  } else if (paybackPeriod <= paybackThresholds.good) {\n    return 'good';\n  } else if (paybackPeriod <= paybackThresholds.average) {\n    return 'average';\n  } else {\n    return 'warning';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}