{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/context/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport translations from '../utils/translations';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\n\n// Custom hook for accessing the language context\nexport const useLanguage = () => {\n  _s();\n  return useContext(LanguageContext);\n};\n\n// Language provider component\n_s(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  // Try to get the language from localStorage or default to English\n  const [language, setLanguage] = useState(() => {\n    const savedLanguage = localStorage.getItem('language');\n    return savedLanguage || 'en';\n  });\n\n  // Save language preference to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  // Toggle between English and Japanese\n  const toggleLanguage = () => {\n    setLanguage(prevLang => prevLang === 'en' ? 'ja' : 'en');\n  };\n\n  // Get translation string\n  const t = key => {\n    if (!translations[language] || !translations[language][key]) {\n      // Fallback to English if translation is missing\n      return translations.en[key] || key;\n    }\n    return translations[language][key];\n  };\n\n  // Get the current language code ('en' or 'ja')\n  const currentLanguage = language;\n\n  // Context value\n  const value = {\n    language: currentLanguage,\n    toggleLanguage,\n    t\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"PWK+AVma2nNpS8sRLTcf1V6E/78=\");\n_c = LanguageProvider;\nexport default LanguageContext;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","translations","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","LanguageProvider","children","_s2","language","setLanguage","savedLanguage","localStorage","getItem","setItem","toggleLanguage","prevLang","t","key","en","currentLanguage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/context/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport translations from '../utils/translations';\n\n// Create the context\nconst LanguageContext = createContext();\n\n// Custom hook for accessing the language context\nexport const useLanguage = () => useContext(LanguageContext);\n\n// Language provider component\nexport const LanguageProvider = ({ children }) => {\n  // Try to get the language from localStorage or default to English\n  const [language, setLanguage] = useState(() => {\n    const savedLanguage = localStorage.getItem('language');\n    return savedLanguage || 'en';\n  });\n\n  // Save language preference to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  // Toggle between English and Japanese\n  const toggleLanguage = () => {\n    setLanguage(prevLang => (prevLang === 'en' ? 'ja' : 'en'));\n  };\n\n  // Get translation string\n  const t = (key) => {\n    if (!translations[language] || !translations[language][key]) {\n      // Fallback to English if translation is missing\n      return translations.en[key] || key;\n    }\n    return translations[language][key];\n  };\n\n  // Get the current language code ('en' or 'ja')\n  const currentLanguage = language;\n\n  // Context value\n  const value = {\n    language: currentLanguage,\n    toggleLanguage,\n    t\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport default LanguageContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,gBAAGP,aAAa,CAAC,CAAC;;AAEvC;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,eAAe,CAAC;AAAA;;AAE5D;AAAAE,EAAA,CAFaD,WAAW;AAGxB,OAAO,MAAME,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,MAAM;IAC7C,MAAMc,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,OAAOF,aAAa,IAAI,IAAI;EAC9B,CAAC,CAAC;;EAEF;EACAZ,SAAS,CAAC,MAAM;IACda,YAAY,CAACE,OAAO,CAAC,UAAU,EAAEL,QAAQ,CAAC;EAC5C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMM,cAAc,GAAGA,CAAA,KAAM;IAC3BL,WAAW,CAACM,QAAQ,IAAKA,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAK,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMC,CAAC,GAAIC,GAAG,IAAK;IACjB,IAAI,CAAClB,YAAY,CAACS,QAAQ,CAAC,IAAI,CAACT,YAAY,CAACS,QAAQ,CAAC,CAACS,GAAG,CAAC,EAAE;MAC3D;MACA,OAAOlB,YAAY,CAACmB,EAAE,CAACD,GAAG,CAAC,IAAIA,GAAG;IACpC;IACA,OAAOlB,YAAY,CAACS,QAAQ,CAAC,CAACS,GAAG,CAAC;EACpC,CAAC;;EAED;EACA,MAAME,eAAe,GAAGX,QAAQ;;EAEhC;EACA,MAAMY,KAAK,GAAG;IACZZ,QAAQ,EAAEW,eAAe;IACzBL,cAAc;IACdE;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,eAAe,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAd,QAAA,EACpCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAClB,GAAA,CAzCWF,gBAAgB;AAAAqB,EAAA,GAAhBrB,gBAAgB;AA2C7B,eAAeH,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}