{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasgobert/Desktop/Apps/MO180SalesSimulator/src/components/Charts/ProfitVolumeChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume with enhanced readability\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfitVolumeChart = ({\n  salesPricePerUnit,\n  costPerUnit,\n  currentVolume\n}) => {\n  _s();\n  const theme = useTheme();\n  const canvasRef = useRef(null);\n\n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n\n  // Format currency with thousands separators\n  const formatCurrency = amount => {\n    return `JPY ${Math.round(amount).toLocaleString()}`;\n  };\n\n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = {\n      left: 60,\n      right: 20,\n      top: 20,\n      bottom: 50\n    };\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Chart area dimensions\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n\n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n\n    // Y-axis: Monthly Profit (0 to max value based on volume and profit per unit)\n    const maxProfit = maxVolume * profitPerUnit;\n    const yAxisSteps = 5;\n\n    // Function to convert data points to canvas coordinates\n    const toCanvasX = volume => padding.left + volume / maxVolume * chartWidth;\n    const toCanvasY = profit => height - padding.bottom - profit / maxProfit * chartHeight;\n\n    // Draw a clean white background\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw grid background with a very light gray\n    ctx.fillStyle = '#F9F9F9';\n    ctx.fillRect(padding.left, padding.top, chartWidth, chartHeight);\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#CCCCCC';\n    ctx.lineWidth = 1;\n\n    // X-axis\n    ctx.moveTo(padding.left, height - padding.bottom);\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n\n    // Y-axis\n    ctx.moveTo(padding.left, padding.top);\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n\n    // Draw horizontal grid lines\n    ctx.beginPath();\n    ctx.strokeStyle = '#E5E5E5';\n    ctx.setLineDash([4, 4]);\n    for (let i = 1; i <= yAxisSteps; i++) {\n      const y = toCanvasY(i / yAxisSteps * maxProfit);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Draw vertical grid lines (every 200 units)\n    ctx.beginPath();\n    ctx.strokeStyle = '#E5E5E5';\n    ctx.setLineDash([4, 4]);\n    for (let i = 200; i <= 1000; i += 200) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    // Draw axis labels with improved formatting\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = theme.palette.text.secondary;\n    ctx.font = '11px ' + theme.typography.fontFamily;\n\n    // Y-axis labels with better spacing and formatting\n    for (let i = 0; i <= yAxisSteps; i++) {\n      const profit = i / yAxisSteps * maxProfit;\n      const y = toCanvasY(profit);\n\n      // Format large numbers with commas and abbreviate if very large\n      let formattedProfit;\n      if (profit >= 1000000) {\n        formattedProfit = `JPY ${(profit / 1000000).toFixed(1)}M`;\n      } else if (profit >= 1000) {\n        formattedProfit = `JPY ${(profit / 1000).toFixed(1)}K`;\n      } else {\n        formattedProfit = `JPY ${Math.round(profit)}`;\n      }\n\n      // Add background to labels for better readability\n      const textWidth = ctx.measureText(formattedProfit).width;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.fillRect(padding.left - textWidth - 8, y - 8, textWidth + 6, 16);\n\n      // Draw the label\n      ctx.fillStyle = theme.palette.text.secondary;\n      ctx.fillText(formattedProfit, padding.left - 4, y);\n    }\n\n    // X-axis labels with improved spacing\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n\n    // Draw X-axis labels at 0, 200, 400, 600, 800, 1000\n    for (let i = 0; i <= 1000; i += 200) {\n      const x = toCanvasX(i);\n      ctx.fillStyle = theme.palette.text.secondary;\n      ctx.fillText(i.toString(), x, height - padding.bottom + 8);\n    }\n\n    // Axis titles with better positioning\n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillStyle = theme.palette.text.primary;\n    ctx.font = 'bold 12px ' + theme.typography.fontFamily;\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 15);\n\n    // Y-axis title\n    ctx.save();\n    ctx.translate(15, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n\n    // Draw profit line with gradient and thicker stroke\n    // Start at origin (0, 0)\n    const startX = toCanvasX(0);\n    const startY = toCanvasY(0);\n\n    // End at max volume, max profit\n    const endX = toCanvasX(maxVolume);\n    const endY = toCanvasY(maxProfit);\n\n    // Create gradient for the line\n    const gradient = ctx.createLinearGradient(0, height - padding.bottom, 0, padding.top);\n    gradient.addColorStop(0, theme.palette.cmyk.yellow);\n    gradient.addColorStop(1, theme.palette.secondary.main);\n\n    // Draw line\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n    ctx.strokeStyle = gradient;\n    ctx.lineWidth = 3;\n    ctx.stroke();\n\n    // Add glow effect\n    ctx.shadowColor = 'rgba(255, 242, 0, 0.4)';\n    ctx.shadowBlur = 6;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctx.shadowColor = 'transparent';\n\n    // Mark current volume point with improved highlighting\n    if (currentVolume) {\n      const pointX = toCanvasX(currentVolume);\n      const pointY = toCanvasY(currentVolume * profitPerUnit);\n\n      // Draw vertical reference line to the point\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.15)';\n      ctx.setLineDash([5, 3]);\n      ctx.lineWidth = 1;\n      ctx.moveTo(pointX, height - padding.bottom);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Draw horizontal reference line to the point\n      ctx.beginPath();\n      ctx.moveTo(padding.left, pointY);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n\n      // Draw filled circle for current point with outline\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = theme.palette.primary.main;\n      ctx.fill();\n      ctx.strokeStyle = theme.palette.background.paper;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Add a clear, well-positioned label for the current point\n      // Draw background for better readability\n      const currentLabel = `Current: ${currentVolume} units, ${formatCurrency(currentVolume * profitPerUnit)}`;\n      const textMetrics = ctx.measureText(currentLabel);\n      const labelWidth = textMetrics.width + 16;\n      const labelHeight = 24;\n      const labelX = Math.min(pointX + 8, width - padding.right - labelWidth - 5); // Ensure label doesn't go off-screen\n      const labelY = pointY - 28; // Position above the point\n\n      // Draw label background\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n      ctx.fillRect(labelX, labelY, labelWidth, labelHeight);\n      ctx.strokeStyle = theme.palette.primary.light;\n      ctx.lineWidth = 1;\n      ctx.strokeRect(labelX, labelY, labelWidth, labelHeight);\n\n      // Draw label text\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = theme.palette.text.primary;\n      ctx.font = 'bold 12px ' + theme.typography.fontFamily;\n      ctx.fillText(currentLabel, labelX + 8, labelY + labelHeight / 2);\n    }\n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Profit vs. Sales Volume\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        width: '100%',\n        height: '220px',\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 500,\n        height: 300,\n        style: {\n          maxWidth: '100%',\n          maxHeight: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2,\n        textAlign: 'center',\n        bgcolor: '#f5f5f5',\n        py: 1,\n        px: 2,\n        borderRadius: 1,\n        width: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        fontWeight: \"600\",\n        color: \"text.primary\",\n        children: [\"Profit per unit: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: theme.palette.primary.main\n          },\n          children: formatCurrency(profitPerUnit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfitVolumeChart, \"kdrREFZ0jLaicLxmNBI1E0NiK+c=\", false, function () {\n  return [useTheme];\n});\n_c = ProfitVolumeChart;\nexport default ProfitVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"ProfitVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","Box","Typography","useTheme","jsxDEV","_jsxDEV","ProfitVolumeChart","salesPricePerUnit","costPerUnit","currentVolume","_s","theme","canvasRef","profitPerUnit","formatCurrency","amount","Math","round","toLocaleString","canvas","current","ctx","getContext","width","height","padding","left","right","top","bottom","clearRect","chartWidth","chartHeight","maxVolume","maxProfit","yAxisSteps","toCanvasX","volume","toCanvasY","profit","fillStyle","fillRect","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","setLineDash","i","y","x","textAlign","textBaseline","palette","text","secondary","font","typography","fontFamily","formattedProfit","toFixed","textWidth","measureText","fillText","toString","primary","save","translate","rotate","PI","restore","startX","startY","endX","endY","gradient","createLinearGradient","addColorStop","cmyk","yellow","main","shadowColor","shadowBlur","pointX","pointY","arc","fill","background","paper","currentLabel","textMetrics","labelWidth","labelHeight","labelX","min","labelY","light","strokeRect","sx","display","flexDirection","alignItems","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","position","justifyContent","ref","style","maxWidth","maxHeight","mt","bgcolor","py","px","borderRadius","fontWeight","color","_c","$RefreshReg$"],"sources":["/Users/nicholasgobert/Desktop/Apps/MO180SalesSimulator/src/components/Charts/ProfitVolumeChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * ProfitVolumeChart Component\n * Displays a line chart showing profit vs sales volume with enhanced readability\n */\nconst ProfitVolumeChart = ({ salesPricePerUnit, costPerUnit, currentVolume }) => {\n  const theme = useTheme();\n  const canvasRef = useRef(null);\n  \n  // Calculate profit per unit\n  const profitPerUnit = salesPricePerUnit - costPerUnit;\n  \n  // Format currency with thousands separators\n  const formatCurrency = (amount) => {\n    return `JPY ${Math.round(amount).toLocaleString()}`;\n  };\n  \n  // Draw the line chart\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !salesPricePerUnit || !costPerUnit) return;\n    \n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = { left: 60, right: 20, top: 20, bottom: 50 };\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Chart area dimensions\n    const chartWidth = width - padding.left - padding.right;\n    const chartHeight = height - padding.top - padding.bottom;\n    \n    // X-axis: Sales Volume (0-1000)\n    const maxVolume = 1000;\n    \n    // Y-axis: Monthly Profit (0 to max value based on volume and profit per unit)\n    const maxProfit = maxVolume * profitPerUnit;\n    const yAxisSteps = 5;\n    \n    // Function to convert data points to canvas coordinates\n    const toCanvasX = (volume) => padding.left + (volume / maxVolume) * chartWidth;\n    const toCanvasY = (profit) => height - padding.bottom - (profit / maxProfit) * chartHeight;\n    \n    // Draw a clean white background\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw grid background with a very light gray\n    ctx.fillStyle = '#F9F9F9';\n    ctx.fillRect(padding.left, padding.top, chartWidth, chartHeight);\n    \n    // Draw axes\n    ctx.beginPath();\n    ctx.strokeStyle = '#CCCCCC';\n    ctx.lineWidth = 1;\n    \n    // X-axis\n    ctx.moveTo(padding.left, height - padding.bottom);\n    ctx.lineTo(width - padding.right, height - padding.bottom);\n    \n    // Y-axis\n    ctx.moveTo(padding.left, padding.top);\n    ctx.lineTo(padding.left, height - padding.bottom);\n    ctx.stroke();\n    \n    // Draw horizontal grid lines\n    ctx.beginPath();\n    ctx.strokeStyle = '#E5E5E5';\n    ctx.setLineDash([4, 4]);\n    \n    for (let i = 1; i <= yAxisSteps; i++) {\n      const y = toCanvasY((i / yAxisSteps) * maxProfit);\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(width - padding.right, y);\n    }\n    ctx.stroke();\n    ctx.setLineDash([]);\n    \n    // Draw vertical grid lines (every 200 units)\n    ctx.beginPath();\n    ctx.strokeStyle = '#E5E5E5';\n    ctx.setLineDash([4, 4]);\n    \n    for (let i = 200; i <= 1000; i += 200) {\n      const x = toCanvasX(i);\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, height - padding.bottom);\n    }\n    ctx.stroke();\n    ctx.setLineDash([]);\n    \n    // Draw axis labels with improved formatting\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = theme.palette.text.secondary;\n    ctx.font = '11px ' + theme.typography.fontFamily;\n    \n    // Y-axis labels with better spacing and formatting\n    for (let i = 0; i <= yAxisSteps; i++) {\n      const profit = (i / yAxisSteps) * maxProfit;\n      const y = toCanvasY(profit);\n      \n      // Format large numbers with commas and abbreviate if very large\n      let formattedProfit;\n      if (profit >= 1000000) {\n        formattedProfit = `JPY ${(profit / 1000000).toFixed(1)}M`;\n      } else if (profit >= 1000) {\n        formattedProfit = `JPY ${(profit / 1000).toFixed(1)}K`;\n      } else {\n        formattedProfit = `JPY ${Math.round(profit)}`;\n      }\n      \n      // Add background to labels for better readability\n      const textWidth = ctx.measureText(formattedProfit).width;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.fillRect(padding.left - textWidth - 8, y - 8, textWidth + 6, 16);\n      \n      // Draw the label\n      ctx.fillStyle = theme.palette.text.secondary;\n      ctx.fillText(formattedProfit, padding.left - 4, y);\n    }\n    \n    // X-axis labels with improved spacing\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    \n    // Draw X-axis labels at 0, 200, 400, 600, 800, 1000\n    for (let i = 0; i <= 1000; i += 200) {\n      const x = toCanvasX(i);\n      ctx.fillStyle = theme.palette.text.secondary;\n      ctx.fillText(i.toString(), x, height - padding.bottom + 8);\n    }\n    \n    // Axis titles with better positioning\n    // X-axis title\n    ctx.textAlign = 'center';\n    ctx.fillStyle = theme.palette.text.primary;\n    ctx.font = 'bold 12px ' + theme.typography.fontFamily;\n    ctx.fillText('Monthly Sales Volume (units)', width / 2, height - 15);\n    \n    // Y-axis title\n    ctx.save();\n    ctx.translate(15, height / 2);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText('Monthly Profit (JPY)', 0, 0);\n    ctx.restore();\n    \n    // Draw profit line with gradient and thicker stroke\n    // Start at origin (0, 0)\n    const startX = toCanvasX(0);\n    const startY = toCanvasY(0);\n    \n    // End at max volume, max profit\n    const endX = toCanvasX(maxVolume);\n    const endY = toCanvasY(maxProfit);\n    \n    // Create gradient for the line\n    const gradient = ctx.createLinearGradient(0, height - padding.bottom, 0, padding.top);\n    gradient.addColorStop(0, theme.palette.cmyk.yellow);  \n    gradient.addColorStop(1, theme.palette.secondary.main);\n    \n    // Draw line\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n    ctx.strokeStyle = gradient;\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    \n    // Add glow effect\n    ctx.shadowColor = 'rgba(255, 242, 0, 0.4)';\n    ctx.shadowBlur = 6;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctx.shadowColor = 'transparent';\n    \n    // Mark current volume point with improved highlighting\n    if (currentVolume) {\n      const pointX = toCanvasX(currentVolume);\n      const pointY = toCanvasY(currentVolume * profitPerUnit);\n      \n      // Draw vertical reference line to the point\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.15)';\n      ctx.setLineDash([5, 3]);\n      ctx.lineWidth = 1;\n      ctx.moveTo(pointX, height - padding.bottom);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      ctx.setLineDash([]);\n      \n      // Draw horizontal reference line to the point\n      ctx.beginPath();\n      ctx.moveTo(padding.left, pointY);\n      ctx.lineTo(pointX, pointY);\n      ctx.stroke();\n      \n      // Draw filled circle for current point with outline\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, 6, 0, Math.PI * 2);\n      ctx.fillStyle = theme.palette.primary.main;\n      ctx.fill();\n      ctx.strokeStyle = theme.palette.background.paper;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Add a clear, well-positioned label for the current point\n      // Draw background for better readability\n      const currentLabel = `Current: ${currentVolume} units, ${formatCurrency(currentVolume * profitPerUnit)}`;\n      const textMetrics = ctx.measureText(currentLabel);\n      const labelWidth = textMetrics.width + 16;\n      const labelHeight = 24;\n      const labelX = Math.min(pointX + 8, width - padding.right - labelWidth - 5); // Ensure label doesn't go off-screen\n      const labelY = pointY - 28; // Position above the point\n      \n      // Draw label background\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n      ctx.fillRect(labelX, labelY, labelWidth, labelHeight);\n      ctx.strokeStyle = theme.palette.primary.light;\n      ctx.lineWidth = 1;\n      ctx.strokeRect(labelX, labelY, labelWidth, labelHeight);\n      \n      // Draw label text\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = theme.palette.text.primary;\n      ctx.font = 'bold 12px ' + theme.typography.fontFamily;\n      ctx.fillText(currentLabel, labelX + 8, labelY + labelHeight/2);\n    }\n    \n  }, [salesPricePerUnit, costPerUnit, currentVolume, profitPerUnit, theme]);\n  \n  return (\n    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\n        Profit vs. Sales Volume\n      </Typography>\n      \n      {/* Canvas for line chart */}\n      <Box sx={{ position: 'relative', width: '100%', height: '220px', display: 'flex', justifyContent: 'center' }}>\n        <canvas ref={canvasRef} width={500} height={300} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n      </Box>\n      \n      {/* Current profit info with clearer formatting */}\n      <Box sx={{ mt: 2, textAlign: 'center', bgcolor: '#f5f5f5', py: 1, px: 2, borderRadius: 1, width: 'auto' }}>\n        <Typography variant=\"body1\" fontWeight=\"600\" color=\"text.primary\">\n          Profit per unit: <span style={{ color: theme.palette.primary.main }}>{formatCurrency(profitPerUnit)}</span>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfitVolumeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}