{"ast":null,"code":"/**\n * Enhanced PDF generation utility for MOSimulator\n * Safely generates and displays printable HTML content\n */\n\nimport { formatNumber, formatCurrency, formatPercent, safeNumber } from '../formatters';\n\n/**\n * Sanitize a string to prevent XSS attacks in generated HTML\n * Basic implementation - for production, use a library like DOMPurify\n * @param {string} str - String to sanitize\n * @returns {string} - Sanitized string\n */\nconst sanitizeHTML = str => {\n  if (!str || typeof str !== 'string') return '';\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n};\n\n/**\n * Get color-coded status for the payback period\n * @param {number|string} paybackPeriod - The payback period in months\n * @param {Function} t - Translation function\n * @returns {Object} - Status object with title, backgroundColor and color\n */\nconst getPaybackStatusInfo = (paybackPeriod, t) => {\n  let statusInfo = {\n    title: t('excellentInvestment'),\n    backgroundColor: '#4caf50',\n    // Success green\n    color: '#FFFFFF'\n  };\n  if (paybackPeriod === '-' || paybackPeriod > 24) {\n    statusInfo = {\n      title: t('considerCarefully'),\n      backgroundColor: '#f44336',\n      // Error red\n      color: '#FFFFFF'\n    };\n  } else if (paybackPeriod > 12) {\n    statusInfo = {\n      title: t('goodInvestment'),\n      backgroundColor: '#ff9800',\n      // Warning orange/yellow\n      color: '#FFFFFF'\n    };\n  }\n  return statusInfo;\n};\n\n/**\n * Generate a printable HTML representation of the simulation results\n * @param {Object} results - The simulation results\n * @param {Function} t - Translation function\n * @returns {String} - HTML content to be printed\n */\nexport const generatePrintableHTML = (results, t) => {\n  // Handle null or invalid results\n  if (!results) {\n    console.error('Invalid results provided to PDF generator');\n    return '<html><body><h1>Error generating PDF</h1></body></html>';\n  }\n  try {\n    // Get the current language from the results\n    const currentLang = results.language || 'en';\n\n    // Initialize inputs safely for PDF generation\n    const inputs = results.inputs || {};\n    const shortEdge = safeNumber(inputs.shortEdge, 0);\n    const longEdge = safeNumber(inputs.longEdge, 0);\n    const salesPricePerUnit = safeNumber(inputs.salesPricePerUnit, 0);\n    const monthlySalesVolume = safeNumber(inputs.monthlySalesVolume, 0);\n    const materialCostPerUnit = safeNumber(inputs.materialCostPerUnit, 0);\n    const laborCostPerHour = safeNumber(inputs.laborCostPerHour, 0);\n    const inkPricePerCC = safeNumber(inputs.inkPricePerCC, 0);\n\n    // Initialize results safely\n    const itemsPerPrintJob = safeNumber(results.itemsPerPrintJob, 0);\n    const monthlyPrintJobs = safeNumber(results.monthlyPrintJobs, 0);\n    const operatingHours = safeNumber(results.operatingHours, 0);\n    const inkUsage = results.inkUsage || {\n      white: 0,\n      cmyk: 0,\n      primer: 0\n    };\n    const inkCostPerUnit = safeNumber(results.inkCostPerUnit, 0);\n    const costPerUnit = safeNumber(results.costPerUnit, 0);\n    const monthlySales = safeNumber(results.monthlySales, 0);\n    const monthlyGrossProfit = safeNumber(results.monthlyGrossProfit, 0);\n    const grossProfitMargin = safeNumber(results.grossProfitMargin, 0);\n    const paybackPeriod = results.paybackPeriod || '-';\n    const initialInvestment = safeNumber(results.initialInvestment, 3780000);\n\n    // Calculate labor cost - this is an estimate\n    const laborCost = costPerUnit - materialCostPerUnit - inkCostPerUnit;\n\n    // Sample image as a placeholder path\n    const sampleImagePath = '/assets/images/lisa.png';\n\n    // Get the status information\n    const statusInfo = getPaybackStatusInfo(paybackPeriod, t);\n\n    // Format the current date\n    const formattedDate = new Date().toLocaleDateString(currentLang === 'ja' ? 'ja-JP' : 'en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    // Generate HTML content with 2-column layout and matching color scheme\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html lang=\"${sanitizeHTML(currentLang)}\">\n      <head>\n        <title>${sanitizeHTML(t('mo180Simulator'))} - ${sanitizeHTML(t('simulationResults'))}</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            padding: 20px;\n            max-width: 1000px;\n            margin: 0 auto;\n            color: #333;\n            background-color: #ffffff;\n          }\n          h1, h2, h3 {\n            color: #008d70;\n            margin-top: 0;\n          }\n          .header {\n            border-bottom: 2px solid #008d70;\n            padding-bottom: 10px;\n            margin-bottom: 20px;\n            background-color: #f8f8f8;\n            padding: 20px;\n            border-radius: 8px 8px 0 0;\n          }\n          .header h1 {\n            margin: 0;\n            font-size: 24px;\n          }\n          .header h2 {\n            margin: 5px 0 0 0;\n            font-weight: normal;\n            font-size: 16px;\n            color: #666;\n          }\n          .status-tag {\n            display: inline-block;\n            padding: 6px 16px;\n            border-radius: 24px;\n            font-weight: bold;\n            background-color: ${sanitizeHTML(statusInfo.backgroundColor)};\n            color: ${sanitizeHTML(statusInfo.color)};\n            font-size: 14px;\n            float: right;\n          }\n          .date {\n            font-size: 14px;\n            color: #777;\n            text-align: right;\n            margin-bottom: 20px;\n          }\n          .content-wrapper {\n            display: flex;\n            flex-direction: row;\n            gap: 30px;\n          }\n          .left-column {\n            flex: 0 0 35%;\n          }\n          .right-column {\n            flex: 0 0 60%;\n          }\n          .card {\n            background-color: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.08);\n            margin-bottom: 24px;\n            overflow: hidden;\n          }\n          .card-header {\n            background-color: #f5f5f5;\n            padding: 12px 16px;\n            border-bottom: 1px solid #e0e0e0;\n          }\n          .card-header h3 {\n            margin: 0;\n            font-size: 16px;\n          }\n          .card-content {\n            padding: 16px;\n          }\n          table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 0;\n          }\n          th {\n            background-color: #008d70;\n            color: white;\n            padding: 10px 16px;\n            text-align: left;\n            font-weight: 500;\n            font-size: 14px;\n          }\n          td {\n            padding: 10px 16px;\n            border-bottom: 1px solid #eeeeee;\n            font-size: 14px;\n          }\n          tr:last-child td {\n            border-bottom: none;\n          }\n          tr:nth-child(even) {\n            background-color: #f9f9f9;\n          }\n          .value-cell {\n            text-align: right;\n            font-weight: 500;\n          }\n          .summary-section {\n            background-color: #e8f5e9;\n            border-radius: 8px;\n            padding: 0;\n            margin-bottom: 24px;\n            overflow: hidden;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.08);\n          }\n          .summary-table {\n            border: none;\n            margin-bottom: 0;\n          }\n          .summary-table td {\n            border-bottom: 1px solid #c8e6c9;\n            padding: 14px 16px;\n          }\n          .summary-table tr:last-child td {\n            border-bottom: none;\n          }\n          .summary-header {\n            background-color: #4caf50;\n            color: white;\n            padding: 12px 16px;\n          }\n          .summary-header h3 {\n            margin: 0;\n            color: white;\n            font-size: 16px;\n          }\n          .cyan-accent {\n            border-left: 4px solid #00bcd4;\n          }\n          .magenta-accent {\n            border-left: 4px solid #e91e63;\n          }\n          .yellow-accent {\n            border-left: 4px solid #ffc107;\n          }\n          .blue-accent {\n            border-left: 4px solid #2196F3;\n          }\n          .footer {\n            margin-top: 30px;\n            text-align: center;\n            color: #777;\n            font-size: 12px;\n            border-top: 1px solid #ddd;\n            padding-top: 10px;\n          }\n          .print-button {\n            background-color: #008d70;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            padding: 12px 24px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n            transition: all 0.3s;\n            display: block;\n            margin: 30px auto;\n          }\n          .print-button:hover {\n            background-color: #00755e;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n          }\n          .sample-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n            margin: 0 auto 10px;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.15);\n          }\n          .sample-caption {\n            text-align: center;\n            color: #666;\n            margin-bottom: 10px;\n            font-size: 14px;\n          }\n          @media print {\n            body {\n              padding: 0;\n              background-color: white;\n            }\n            .no-print {\n              display: none;\n            }\n            .content-wrapper {\n              display: flex;\n              flex-direction: row;\n            }\n            .left-column {\n              width: 35%;\n            }\n            .right-column {\n              width: 60%;\n            }\n            .card {\n              box-shadow: none;\n              border: 1px solid #e0e0e0;\n            }\n            .summary-section {\n              box-shadow: none;\n              border: 1px solid #c8e6c9;\n            }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <span class=\"status-tag\">${sanitizeHTML(statusInfo.title)}</span>\n          <h1>${sanitizeHTML(t('mo180Simulator'))}</h1>\n          <h2>${sanitizeHTML(t('simulationResults'))}</h2>\n        </div>\n        \n        <div class=\"date\">\n          ${sanitizeHTML(t('generatedOn'))}: ${sanitizeHTML(formattedDate)}\n        </div>\n        \n        <div class=\"content-wrapper\">\n          <!-- Left column - Input parameters -->\n          <div class=\"left-column\">\n            <!-- Printer Specifications Card with Sample Image -->\n            <div class=\"card blue-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('printerSpecifications'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <img src=\"${sanitizeHTML(sampleImagePath)}\" alt=\"Sample Print\" class=\"sample-image\" />\n                <p class=\"sample-caption\">${sanitizeHTML(t('simulationImageCaption') || 'Simulations are based on the above image')}</p>\n                \n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('initialInvestment'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(initialInvestment, currentLang)}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          \n            <div class=\"card cyan-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('simulationParameters'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('productDimensions'))}</td>\n                    <td class=\"value-cell\">${formatNumber(shortEdge)} x ${formatNumber(longEdge)} mm</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('monthlySalesTarget'))}</td>\n                    <td class=\"value-cell\">${formatNumber(monthlySalesVolume)} ${sanitizeHTML(t('units'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('salesPricePerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(salesPricePerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('materialCostPerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(materialCostPerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('laborCostPerHour'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(laborCostPerHour, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('inkPrice'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkPricePerCC)} ${sanitizeHTML(t('currency'))}/${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n            \n            <div class=\"card magenta-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('inkUsagePerItem'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('white'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkUsage.white, 2)} ${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('cmyk'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkUsage.cmyk, 2)} ${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('primer'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkUsage.primer, 2)} ${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('inkCostPerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(inkCostPerUnit, currentLang, '¥', currentLang === 'ja')}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Right column - Results -->\n          <div class=\"right-column\">\n            <div class=\"summary-section\">\n              <div class=\"summary-header\">\n                <h3>${sanitizeHTML(t('keySummary'))}</h3>\n              </div>\n              <table class=\"summary-table\">\n                <tr>\n                  <td><strong>${sanitizeHTML(t('monthlySales'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${formatCurrency(monthlySales, currentLang)}</strong></td>\n                </tr>\n                <tr>\n                  <td><strong>${sanitizeHTML(t('monthlyGrossProfit'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${formatCurrency(monthlyGrossProfit, currentLang)}</strong></td>\n                </tr>\n                <tr>\n                  <td><strong>${sanitizeHTML(t('grossProfitMargin'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${formatPercent(grossProfitMargin)}</strong></td>\n                </tr>\n                <tr>\n                  <td><strong>${sanitizeHTML(t('investmentPaybackPeriod'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${paybackPeriod === '-' ? 'N/A' : `${formatNumber(paybackPeriod, 1)} ${sanitizeHTML(t('months'))}`}</strong></td>\n                </tr>\n              </table>\n            </div>\n            \n            <div class=\"card yellow-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('costBreakdownPerUnit'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('costPerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(costPerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('material'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(materialCostPerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('ink'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(inkCostPerUnit, currentLang, '¥', currentLang === 'ja')}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('labor'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(laborCost, currentLang, '¥', currentLang === 'ja')}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n            \n            <div class=\"card cyan-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('productionDetails'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('operatingHours'))}</td>\n                    <td class=\"value-cell\">${formatNumber(operatingHours, 1)} ${sanitizeHTML(t('hours'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('itemsPerPrintJob'))}</td>\n                    <td class=\"value-cell\">${formatNumber(itemsPerPrintJob)} ${sanitizeHTML(t('units'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('monthlyPrintJobs'))}</td>\n                    <td class=\"value-cell\">${formatNumber(monthlyPrintJobs)} ${sanitizeHTML(t('jobs'))}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"footer\">\n          Roland DG MO-180 UV Printer | ${sanitizeHTML(t('mo180Simulator'))} | ${sanitizeHTML(formattedDate)}\n        </div>\n        \n        <button class=\"print-button no-print\" onclick=\"window.print()\">\n          ${sanitizeHTML(t('downloadPDF'))}\n        </button>\n      </body>\n      </html>\n    `;\n    return htmlContent;\n  } catch (error) {\n    console.error('Error generating printable HTML:', error);\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Error</title>\n        <meta charset=\"UTF-8\">\n      </head>\n      <body>\n        <h1>Error Generating PDF</h1>\n        <p>There was an error generating the PDF report. Please try again later.</p>\n        <button onclick=\"window.close()\">Close</button>\n      </body>\n      </html>\n    `;\n  }\n};\n\n/**\n * Open a new window with printable content and improved error handling\n * @param {Object} results - The simulation results\n * @param {Function} t - Translation function\n */\nexport const printResults = (results, t) => {\n  try {\n    const html = generatePrintableHTML(results, t);\n\n    // Open a new window\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) {\n      throw new Error('Popup was blocked or could not be opened');\n    }\n\n    // Write HTML to the new window\n    printWindow.document.write(html);\n    printWindow.document.close();\n\n    // Log success\n    console.log('PDF generated successfully');\n  } catch (error) {\n    console.error('Error printing results:', error);\n\n    // Show error message to user\n    alert(`There was an error generating the PDF: ${error.message}. Please check if popups are allowed for this site.`);\n  }\n};\nexport default printResults;","map":{"version":3,"names":["formatNumber","formatCurrency","formatPercent","safeNumber","sanitizeHTML","str","replace","getPaybackStatusInfo","paybackPeriod","t","statusInfo","title","backgroundColor","color","generatePrintableHTML","results","console","error","currentLang","language","inputs","shortEdge","longEdge","salesPricePerUnit","monthlySalesVolume","materialCostPerUnit","laborCostPerHour","inkPricePerCC","itemsPerPrintJob","monthlyPrintJobs","operatingHours","inkUsage","white","cmyk","primer","inkCostPerUnit","costPerUnit","monthlySales","monthlyGrossProfit","grossProfitMargin","initialInvestment","laborCost","sampleImagePath","formattedDate","Date","toLocaleDateString","year","month","day","htmlContent","printResults","html","printWindow","window","open","Error","document","write","close","log","alert","message"],"sources":["/Users/nicholasgobert/Desktop/Apps/MOSimulator/src/utils/pdf/generatePDF.js"],"sourcesContent":["/**\n * Enhanced PDF generation utility for MOSimulator\n * Safely generates and displays printable HTML content\n */\n\nimport { formatNumber, formatCurrency, formatPercent, safeNumber } from '../formatters';\n\n/**\n * Sanitize a string to prevent XSS attacks in generated HTML\n * Basic implementation - for production, use a library like DOMPurify\n * @param {string} str - String to sanitize\n * @returns {string} - Sanitized string\n */\nconst sanitizeHTML = (str) => {\n  if (!str || typeof str !== 'string') return '';\n  \n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n};\n\n/**\n * Get color-coded status for the payback period\n * @param {number|string} paybackPeriod - The payback period in months\n * @param {Function} t - Translation function\n * @returns {Object} - Status object with title, backgroundColor and color\n */\nconst getPaybackStatusInfo = (paybackPeriod, t) => {\n  let statusInfo = {\n    title: t('excellentInvestment'),\n    backgroundColor: '#4caf50', // Success green\n    color: '#FFFFFF'\n  };\n\n  if (paybackPeriod === '-' || paybackPeriod > 24) {\n    statusInfo = {\n      title: t('considerCarefully'),\n      backgroundColor: '#f44336', // Error red\n      color: '#FFFFFF'\n    };\n  } else if (paybackPeriod > 12) {\n    statusInfo = {\n      title: t('goodInvestment'),\n      backgroundColor: '#ff9800', // Warning orange/yellow\n      color: '#FFFFFF'\n    };\n  }\n  \n  return statusInfo;\n};\n\n/**\n * Generate a printable HTML representation of the simulation results\n * @param {Object} results - The simulation results\n * @param {Function} t - Translation function\n * @returns {String} - HTML content to be printed\n */\nexport const generatePrintableHTML = (results, t) => {\n  // Handle null or invalid results\n  if (!results) {\n    console.error('Invalid results provided to PDF generator');\n    return '<html><body><h1>Error generating PDF</h1></body></html>';\n  }\n  \n  try {\n    // Get the current language from the results\n    const currentLang = results.language || 'en';\n    \n    // Initialize inputs safely for PDF generation\n    const inputs = results.inputs || {};\n    const shortEdge = safeNumber(inputs.shortEdge, 0);\n    const longEdge = safeNumber(inputs.longEdge, 0);\n    const salesPricePerUnit = safeNumber(inputs.salesPricePerUnit, 0);\n    const monthlySalesVolume = safeNumber(inputs.monthlySalesVolume, 0);\n    const materialCostPerUnit = safeNumber(inputs.materialCostPerUnit, 0);\n    const laborCostPerHour = safeNumber(inputs.laborCostPerHour, 0);\n    const inkPricePerCC = safeNumber(inputs.inkPricePerCC, 0);\n    \n    // Initialize results safely\n    const itemsPerPrintJob = safeNumber(results.itemsPerPrintJob, 0);\n    const monthlyPrintJobs = safeNumber(results.monthlyPrintJobs, 0);\n    const operatingHours = safeNumber(results.operatingHours, 0);\n    const inkUsage = results.inkUsage || { white: 0, cmyk: 0, primer: 0 };\n    const inkCostPerUnit = safeNumber(results.inkCostPerUnit, 0);\n    const costPerUnit = safeNumber(results.costPerUnit, 0);\n    const monthlySales = safeNumber(results.monthlySales, 0);\n    const monthlyGrossProfit = safeNumber(results.monthlyGrossProfit, 0);\n    const grossProfitMargin = safeNumber(results.grossProfitMargin, 0);\n    const paybackPeriod = results.paybackPeriod || '-';\n    const initialInvestment = safeNumber(results.initialInvestment, 3780000);\n    \n    // Calculate labor cost - this is an estimate\n    const laborCost = costPerUnit - materialCostPerUnit - inkCostPerUnit;\n    \n    // Sample image as a placeholder path\n    const sampleImagePath = '/assets/images/lisa.png';\n    \n    // Get the status information\n    const statusInfo = getPaybackStatusInfo(paybackPeriod, t);\n    \n    // Format the current date\n    const formattedDate = new Date().toLocaleDateString(\n      currentLang === 'ja' ? 'ja-JP' : 'en-US',\n      { year: 'numeric', month: 'long', day: 'numeric' }\n    );\n    \n    // Generate HTML content with 2-column layout and matching color scheme\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html lang=\"${sanitizeHTML(currentLang)}\">\n      <head>\n        <title>${sanitizeHTML(t('mo180Simulator'))} - ${sanitizeHTML(t('simulationResults'))}</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            padding: 20px;\n            max-width: 1000px;\n            margin: 0 auto;\n            color: #333;\n            background-color: #ffffff;\n          }\n          h1, h2, h3 {\n            color: #008d70;\n            margin-top: 0;\n          }\n          .header {\n            border-bottom: 2px solid #008d70;\n            padding-bottom: 10px;\n            margin-bottom: 20px;\n            background-color: #f8f8f8;\n            padding: 20px;\n            border-radius: 8px 8px 0 0;\n          }\n          .header h1 {\n            margin: 0;\n            font-size: 24px;\n          }\n          .header h2 {\n            margin: 5px 0 0 0;\n            font-weight: normal;\n            font-size: 16px;\n            color: #666;\n          }\n          .status-tag {\n            display: inline-block;\n            padding: 6px 16px;\n            border-radius: 24px;\n            font-weight: bold;\n            background-color: ${sanitizeHTML(statusInfo.backgroundColor)};\n            color: ${sanitizeHTML(statusInfo.color)};\n            font-size: 14px;\n            float: right;\n          }\n          .date {\n            font-size: 14px;\n            color: #777;\n            text-align: right;\n            margin-bottom: 20px;\n          }\n          .content-wrapper {\n            display: flex;\n            flex-direction: row;\n            gap: 30px;\n          }\n          .left-column {\n            flex: 0 0 35%;\n          }\n          .right-column {\n            flex: 0 0 60%;\n          }\n          .card {\n            background-color: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.08);\n            margin-bottom: 24px;\n            overflow: hidden;\n          }\n          .card-header {\n            background-color: #f5f5f5;\n            padding: 12px 16px;\n            border-bottom: 1px solid #e0e0e0;\n          }\n          .card-header h3 {\n            margin: 0;\n            font-size: 16px;\n          }\n          .card-content {\n            padding: 16px;\n          }\n          table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 0;\n          }\n          th {\n            background-color: #008d70;\n            color: white;\n            padding: 10px 16px;\n            text-align: left;\n            font-weight: 500;\n            font-size: 14px;\n          }\n          td {\n            padding: 10px 16px;\n            border-bottom: 1px solid #eeeeee;\n            font-size: 14px;\n          }\n          tr:last-child td {\n            border-bottom: none;\n          }\n          tr:nth-child(even) {\n            background-color: #f9f9f9;\n          }\n          .value-cell {\n            text-align: right;\n            font-weight: 500;\n          }\n          .summary-section {\n            background-color: #e8f5e9;\n            border-radius: 8px;\n            padding: 0;\n            margin-bottom: 24px;\n            overflow: hidden;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.08);\n          }\n          .summary-table {\n            border: none;\n            margin-bottom: 0;\n          }\n          .summary-table td {\n            border-bottom: 1px solid #c8e6c9;\n            padding: 14px 16px;\n          }\n          .summary-table tr:last-child td {\n            border-bottom: none;\n          }\n          .summary-header {\n            background-color: #4caf50;\n            color: white;\n            padding: 12px 16px;\n          }\n          .summary-header h3 {\n            margin: 0;\n            color: white;\n            font-size: 16px;\n          }\n          .cyan-accent {\n            border-left: 4px solid #00bcd4;\n          }\n          .magenta-accent {\n            border-left: 4px solid #e91e63;\n          }\n          .yellow-accent {\n            border-left: 4px solid #ffc107;\n          }\n          .blue-accent {\n            border-left: 4px solid #2196F3;\n          }\n          .footer {\n            margin-top: 30px;\n            text-align: center;\n            color: #777;\n            font-size: 12px;\n            border-top: 1px solid #ddd;\n            padding-top: 10px;\n          }\n          .print-button {\n            background-color: #008d70;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            padding: 12px 24px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n            transition: all 0.3s;\n            display: block;\n            margin: 30px auto;\n          }\n          .print-button:hover {\n            background-color: #00755e;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n          }\n          .sample-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n            margin: 0 auto 10px;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.15);\n          }\n          .sample-caption {\n            text-align: center;\n            color: #666;\n            margin-bottom: 10px;\n            font-size: 14px;\n          }\n          @media print {\n            body {\n              padding: 0;\n              background-color: white;\n            }\n            .no-print {\n              display: none;\n            }\n            .content-wrapper {\n              display: flex;\n              flex-direction: row;\n            }\n            .left-column {\n              width: 35%;\n            }\n            .right-column {\n              width: 60%;\n            }\n            .card {\n              box-shadow: none;\n              border: 1px solid #e0e0e0;\n            }\n            .summary-section {\n              box-shadow: none;\n              border: 1px solid #c8e6c9;\n            }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <span class=\"status-tag\">${sanitizeHTML(statusInfo.title)}</span>\n          <h1>${sanitizeHTML(t('mo180Simulator'))}</h1>\n          <h2>${sanitizeHTML(t('simulationResults'))}</h2>\n        </div>\n        \n        <div class=\"date\">\n          ${sanitizeHTML(t('generatedOn'))}: ${sanitizeHTML(formattedDate)}\n        </div>\n        \n        <div class=\"content-wrapper\">\n          <!-- Left column - Input parameters -->\n          <div class=\"left-column\">\n            <!-- Printer Specifications Card with Sample Image -->\n            <div class=\"card blue-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('printerSpecifications'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <img src=\"${sanitizeHTML(sampleImagePath)}\" alt=\"Sample Print\" class=\"sample-image\" />\n                <p class=\"sample-caption\">${sanitizeHTML(t('simulationImageCaption') || 'Simulations are based on the above image')}</p>\n                \n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('initialInvestment'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(initialInvestment, currentLang)}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          \n            <div class=\"card cyan-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('simulationParameters'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('productDimensions'))}</td>\n                    <td class=\"value-cell\">${formatNumber(shortEdge)} x ${formatNumber(longEdge)} mm</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('monthlySalesTarget'))}</td>\n                    <td class=\"value-cell\">${formatNumber(monthlySalesVolume)} ${sanitizeHTML(t('units'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('salesPricePerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(salesPricePerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('materialCostPerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(materialCostPerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('laborCostPerHour'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(laborCostPerHour, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('inkPrice'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkPricePerCC)} ${sanitizeHTML(t('currency'))}/${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n            \n            <div class=\"card magenta-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('inkUsagePerItem'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('white'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkUsage.white, 2)} ${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('cmyk'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkUsage.cmyk, 2)} ${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('primer'))}</td>\n                    <td class=\"value-cell\">${formatNumber(inkUsage.primer, 2)} ${sanitizeHTML(t('cc'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('inkCostPerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(inkCostPerUnit, currentLang, '¥', currentLang === 'ja')}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Right column - Results -->\n          <div class=\"right-column\">\n            <div class=\"summary-section\">\n              <div class=\"summary-header\">\n                <h3>${sanitizeHTML(t('keySummary'))}</h3>\n              </div>\n              <table class=\"summary-table\">\n                <tr>\n                  <td><strong>${sanitizeHTML(t('monthlySales'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${formatCurrency(monthlySales, currentLang)}</strong></td>\n                </tr>\n                <tr>\n                  <td><strong>${sanitizeHTML(t('monthlyGrossProfit'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${formatCurrency(monthlyGrossProfit, currentLang)}</strong></td>\n                </tr>\n                <tr>\n                  <td><strong>${sanitizeHTML(t('grossProfitMargin'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${formatPercent(grossProfitMargin)}</strong></td>\n                </tr>\n                <tr>\n                  <td><strong>${sanitizeHTML(t('investmentPaybackPeriod'))}</strong></td>\n                  <td class=\"value-cell\"><strong>${paybackPeriod === '-' ? 'N/A' : `${formatNumber(paybackPeriod, 1)} ${sanitizeHTML(t('months'))}`}</strong></td>\n                </tr>\n              </table>\n            </div>\n            \n            <div class=\"card yellow-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('costBreakdownPerUnit'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('costPerUnit'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(costPerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('material'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(materialCostPerUnit, currentLang)}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('ink'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(inkCostPerUnit, currentLang, '¥', currentLang === 'ja')}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('labor'))}</td>\n                    <td class=\"value-cell\">${formatCurrency(laborCost, currentLang, '¥', currentLang === 'ja')}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n            \n            <div class=\"card cyan-accent\">\n              <div class=\"card-header\">\n                <h3>${sanitizeHTML(t('productionDetails'))}</h3>\n              </div>\n              <div class=\"card-content\">\n                <table>\n                  <tr>\n                    <td>${sanitizeHTML(t('operatingHours'))}</td>\n                    <td class=\"value-cell\">${formatNumber(operatingHours, 1)} ${sanitizeHTML(t('hours'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('itemsPerPrintJob'))}</td>\n                    <td class=\"value-cell\">${formatNumber(itemsPerPrintJob)} ${sanitizeHTML(t('units'))}</td>\n                  </tr>\n                  <tr>\n                    <td>${sanitizeHTML(t('monthlyPrintJobs'))}</td>\n                    <td class=\"value-cell\">${formatNumber(monthlyPrintJobs)} ${sanitizeHTML(t('jobs'))}</td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"footer\">\n          Roland DG MO-180 UV Printer | ${sanitizeHTML(t('mo180Simulator'))} | ${sanitizeHTML(formattedDate)}\n        </div>\n        \n        <button class=\"print-button no-print\" onclick=\"window.print()\">\n          ${sanitizeHTML(t('downloadPDF'))}\n        </button>\n      </body>\n      </html>\n    `;\n\n    return htmlContent;\n  } catch (error) {\n    console.error('Error generating printable HTML:', error);\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Error</title>\n        <meta charset=\"UTF-8\">\n      </head>\n      <body>\n        <h1>Error Generating PDF</h1>\n        <p>There was an error generating the PDF report. Please try again later.</p>\n        <button onclick=\"window.close()\">Close</button>\n      </body>\n      </html>\n    `;\n  }\n};\n\n/**\n * Open a new window with printable content and improved error handling\n * @param {Object} results - The simulation results\n * @param {Function} t - Translation function\n */\nexport const printResults = (results, t) => {\n  try {\n    const html = generatePrintableHTML(results, t);\n    \n    // Open a new window\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) {\n      throw new Error('Popup was blocked or could not be opened');\n    }\n    \n    // Write HTML to the new window\n    printWindow.document.write(html);\n    printWindow.document.close();\n    \n    // Log success\n    console.log('PDF generated successfully');\n  } catch (error) {\n    console.error('Error printing results:', error);\n    \n    // Show error message to user\n    alert(`There was an error generating the PDF: ${error.message}. Please check if popups are allowed for this site.`);\n  }\n};\n\nexport default printResults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}